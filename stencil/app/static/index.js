var Z5=function(X,Y){return Z5=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(Z,J){Z.__proto__=J}||function(Z,J){for(var G in J)if(Object.prototype.hasOwnProperty.call(J,G))Z[G]=J[G]},Z5(X,Y)};function o(X,Y){if(typeof Y!=="function"&&Y!==null)throw new TypeError("Class extends value "+String(Y)+" is not a constructor or null");Z5(X,Y);function Z(){this.constructor=X}X.prototype=Y===null?Object.create(Y):(Z.prototype=Y.prototype,new Z)}var E=function(){return E=Object.assign||function X(Y){for(var Z,J=1,G=arguments.length;J<G;J++){Z=arguments[J];for(var $ in Z)if(Object.prototype.hasOwnProperty.call(Z,$))Y[$]=Z[$]}return Y},E.apply(this,arguments)};function t(X,Y){var Z={};for(var J in X)if(Object.prototype.hasOwnProperty.call(X,J)&&Y.indexOf(J)<0)Z[J]=X[J];if(X!=null&&typeof Object.getOwnPropertySymbols==="function"){for(var G=0,J=Object.getOwnPropertySymbols(X);G<J.length;G++)if(Y.indexOf(J[G])<0&&Object.prototype.propertyIsEnumerable.call(X,J[G]))Z[J[G]]=X[J[G]]}return Z}function EY(X,Y,Z,J){function G($){return $ instanceof Z?$:new Z(function(H){H($)})}return new(Z||(Z=Promise))(function($,H){function B(U){try{W(J.next(U))}catch(Q){H(Q)}}function z(U){try{W(J.throw(U))}catch(Q){H(Q)}}function W(U){U.done?$(U.value):G(U.value).then(B,z)}W((J=J.apply(X,Y||[])).next())})}function AY(X,Y){var Z={label:0,sent:function(){if($[0]&1)throw $[1];return $[1]},trys:[],ops:[]},J,G,$,H=Object.create((typeof Iterator==="function"?Iterator:Object).prototype);return H.next=B(0),H.throw=B(1),H.return=B(2),typeof Symbol==="function"&&(H[Symbol.iterator]=function(){return this}),H;function B(W){return function(U){return z([W,U])}}function z(W){if(J)throw new TypeError("Generator is already executing.");while(H&&(H=0,W[0]&&(Z=0)),Z)try{if(J=1,G&&($=W[0]&2?G.return:W[0]?G.throw||(($=G.return)&&$.call(G),0):G.next)&&!($=$.call(G,W[1])).done)return $;if(G=0,$)W=[W[0]&2,$.value];switch(W[0]){case 0:case 1:$=W;break;case 4:return Z.label++,{value:W[1],done:!1};case 5:Z.label++,G=W[1],W=[0];continue;case 7:W=Z.ops.pop(),Z.trys.pop();continue;default:if(($=Z.trys,!($=$.length>0&&$[$.length-1]))&&(W[0]===6||W[0]===2)){Z=0;continue}if(W[0]===3&&(!$||W[1]>$[0]&&W[1]<$[3])){Z.label=W[1];break}if(W[0]===6&&Z.label<$[1]){Z.label=$[1],$=W;break}if($&&Z.label<$[2]){Z.label=$[2],Z.ops.push(W);break}if($[2])Z.ops.pop();Z.trys.pop();continue}W=Y.call(X,Z)}catch(U){W=[6,U],G=0}finally{J=$=0}if(W[0]&5)throw W[1];return{value:W[0]?W[1]:void 0,done:!0}}}function m(X,Y,Z){if(Z||arguments.length===2){for(var J=0,G=Y.length,$;J<G;J++)if($||!(J in Y)){if(!$)$=Array.prototype.slice.call(Y,0,J);$[J]=Y[J]}}return X.concat($||Array.prototype.slice.call(Y))}var J5="Invariant Violation",T6=Object.setPrototypeOf,v9=T6===void 0?function(X,Y){return X.__proto__=Y,X}:T6,$Z=function(X){o(Y,X);function Y(Z){if(Z===void 0)Z=J5;var J=X.call(this,typeof Z==="number"?J5+": "+Z+" (see https://github.com/apollographql/invariant-packages)":Z)||this;return J.framesToPop=1,J.name=J5,v9(J,Y.prototype),J}return Y}(Error);function hY(X,Y){if(!X)throw new $Z(Y)}var GZ=["debug","log","warn","error","silent"],G5=GZ.indexOf("log");function JZ(X){return function(){if(GZ.indexOf(X)>=G5){var Y=console[X]||console.log;return Y.apply(console,arguments)}}}(function(X){X.debug=JZ("debug"),X.log=JZ("log"),X.warn=JZ("warn"),X.error=JZ("error")})(hY||(hY={}));function F6(X){var Y=GZ[G5];return G5=Math.max(0,GZ.indexOf(X)),Y}var wX="3.14.0";function e(X){try{return X()}catch(Y){}}var bY=e(function(){return globalThis})||e(function(){return window})||e(function(){return self})||e(function(){return global})||e(function(){return e.constructor("return this")()});var K6=new Map;function CX(X){var Y=K6.get(X)||1;return K6.set(X,Y+1),"".concat(X,":").concat(Y,":").concat(Math.random().toString(36).slice(2))}function HZ(X,Y){if(Y===void 0)Y=0;var Z=CX("stringifyForDisplay");return JSON.stringify(X,function(J,G){return G===void 0?Z:G},Y).split(JSON.stringify(Z)).join("<undefined>")}function BZ(X){return function(Y){var Z=[];for(var J=1;J<arguments.length;J++)Z[J-1]=arguments[J];if(typeof Y==="number"){var G=Y;if(Y=$5(G),!Y)Y=H5(G,Z),Z=[]}X.apply(void 0,[Y].concat(Z))}}var K=Object.assign(function X(Y,Z){var J=[];for(var G=2;G<arguments.length;G++)J[G-2]=arguments[G];if(!Y)hY(Y,$5(Z,J)||H5(Z,J))},{debug:BZ(hY.debug),log:BZ(hY.log),warn:BZ(hY.warn),error:BZ(hY.error)});function f(X){var Y=[];for(var Z=1;Z<arguments.length;Z++)Y[Z-1]=arguments[Z];return new $Z($5(X,Y)||H5(X,Y))}var w6=Symbol.for("ApolloErrorMessageHandler_"+wX);function C6(X){if(typeof X=="string")return X;try{return HZ(X,2).slice(0,1000)}catch(Y){return"<non-serializable>"}}function $5(X,Y){if(Y===void 0)Y=[];if(!X)return;return bY[w6]&&bY[w6](X,Y.map(C6))}function H5(X,Y){if(Y===void 0)Y=[];if(!X)return;return"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#".concat(encodeURIComponent(JSON.stringify({version:wX,message:X,args:Y.map(C6)})))}var f9=globalThis.__DEV__!==!1;function GX(X,Y){if(!Boolean(X))throw new Error(Y)}function R6(X){return typeof X=="object"&&X!==null}function N6(X,Y){if(!Boolean(X))throw new Error(Y!=null?Y:"Unexpected invariant triggered.")}var g9=/\r\n|[\n\r]/g;function $X(X,Y){let Z=0,J=1;for(let G of X.body.matchAll(g9)){if(typeof G.index==="number"||N6(!1),G.index>=Y)break;Z=G.index+G[0].length,J+=1}return{line:J,column:Y+1-Z}}function B5(X){return WZ(X.source,$X(X.source,X.start))}function WZ(X,Y){let Z=X.locationOffset.column-1,J="".padStart(Z)+X.body,G=Y.line-1,$=X.locationOffset.line-1,H=Y.line+$,B=Y.line===1?Z:0,z=Y.column+B,W=`${X.name}:${H}:${z}\n`,U=J.split(/\r\n|[\n\r]/g),Q=U[G];if(Q.length>120){let P=Math.floor(z/80),V=z%80,q=[];for(let D=0;D<Q.length;D+=80)q.push(Q.slice(D,D+80));return W+I6([[`${H} |`,q[0]],...q.slice(1,P+1).map((D)=>["|",D]),["|","^".padStart(V)],["|",q[P+1]]])}return W+I6([[`${H-1} |`,U[G-1]],[`${H} |`,Q],["|","^".padStart(z)],[`${H+1} |`,U[G+1]]])}function I6(X){let Y=X.filter(([J,G])=>G!==void 0),Z=Math.max(...Y.map(([J])=>J.length));return Y.map(([J,G])=>J.padStart(Z)+(G?" "+G:"")).join("\n")}function y9(X){let Y=X[0];if(Y==null||"kind"in Y||"length"in Y)return{nodes:Y,source:X[1],positions:X[2],path:X[3],originalError:X[4],extensions:X[5]};return Y}class zZ extends Error{constructor(X,...Y){var Z,J,G;let{nodes:$,source:H,positions:B,path:z,originalError:W,extensions:U}=y9(Y);super(X);this.name="GraphQLError",this.path=z!==null&&z!==void 0?z:void 0,this.originalError=W!==null&&W!==void 0?W:void 0,this.nodes=O6(Array.isArray($)?$:$?[$]:void 0);let Q=O6((Z=this.nodes)===null||Z===void 0?void 0:Z.map((V)=>V.loc).filter((V)=>V!=null));this.source=H!==null&&H!==void 0?H:Q===null||Q===void 0?void 0:(J=Q[0])===null||J===void 0?void 0:J.source,this.positions=B!==null&&B!==void 0?B:Q===null||Q===void 0?void 0:Q.map((V)=>V.start),this.locations=B&&H?B.map((V)=>$X(H,V)):Q===null||Q===void 0?void 0:Q.map((V)=>$X(V.source,V.start));let P=R6(W===null||W===void 0?void 0:W.extensions)?W===null||W===void 0?void 0:W.extensions:void 0;if(this.extensions=(G=U!==null&&U!==void 0?U:P)!==null&&G!==void 0?G:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),W!==null&&W!==void 0&&W.stack)Object.defineProperty(this,"stack",{value:W.stack,writable:!0,configurable:!0});else if(Error.captureStackTrace)Error.captureStackTrace(this,zZ);else Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let X=this.message;if(this.nodes){for(let Y of this.nodes)if(Y.loc)X+="\n\n"+B5(Y.loc)}else if(this.source&&this.locations)for(let Y of this.locations)X+="\n\n"+WZ(this.source,Y);return X}toJSON(){let X={message:this.message};if(this.locations!=null)X.locations=this.locations;if(this.path!=null)X.path=this.path;if(this.extensions!=null&&Object.keys(this.extensions).length>0)X.extensions=this.extensions;return X}}function O6(X){return X===void 0||X.length===0?void 0:X}function c(X,Y,Z){return new zZ(`Syntax Error: ${Z}`,{source:X,positions:[Y]})}class UZ{constructor(X,Y,Z){this.start=X.start,this.end=Y.end,this.startToken=X,this.endToken=Y,this.source=Z}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class RX{constructor(X,Y,Z,J,G,$){this.kind=X,this.start=Y,this.end=Z,this.line=J,this.column=G,this.value=$,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}var W5={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},m9=new Set(Object.keys(W5));function z5(X){let Y=X===null||X===void 0?void 0:X.kind;return typeof Y==="string"&&m9.has(Y)}var _Y;(function(X){X.QUERY="query",X.MUTATION="mutation",X.SUBSCRIPTION="subscription"})(_Y||(_Y={}));var NX;(function(X){X.QUERY="QUERY",X.MUTATION="MUTATION",X.SUBSCRIPTION="SUBSCRIPTION",X.FIELD="FIELD",X.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",X.FRAGMENT_SPREAD="FRAGMENT_SPREAD",X.INLINE_FRAGMENT="INLINE_FRAGMENT",X.VARIABLE_DEFINITION="VARIABLE_DEFINITION",X.SCHEMA="SCHEMA",X.SCALAR="SCALAR",X.OBJECT="OBJECT",X.FIELD_DEFINITION="FIELD_DEFINITION",X.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",X.INTERFACE="INTERFACE",X.UNION="UNION",X.ENUM="ENUM",X.ENUM_VALUE="ENUM_VALUE",X.INPUT_OBJECT="INPUT_OBJECT",X.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"})(NX||(NX={}));var R;(function(X){X.NAME="Name",X.DOCUMENT="Document",X.OPERATION_DEFINITION="OperationDefinition",X.VARIABLE_DEFINITION="VariableDefinition",X.SELECTION_SET="SelectionSet",X.FIELD="Field",X.ARGUMENT="Argument",X.FRAGMENT_SPREAD="FragmentSpread",X.INLINE_FRAGMENT="InlineFragment",X.FRAGMENT_DEFINITION="FragmentDefinition",X.VARIABLE="Variable",X.INT="IntValue",X.FLOAT="FloatValue",X.STRING="StringValue",X.BOOLEAN="BooleanValue",X.NULL="NullValue",X.ENUM="EnumValue",X.LIST="ListValue",X.OBJECT="ObjectValue",X.OBJECT_FIELD="ObjectField",X.DIRECTIVE="Directive",X.NAMED_TYPE="NamedType",X.LIST_TYPE="ListType",X.NON_NULL_TYPE="NonNullType",X.SCHEMA_DEFINITION="SchemaDefinition",X.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",X.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",X.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",X.FIELD_DEFINITION="FieldDefinition",X.INPUT_VALUE_DEFINITION="InputValueDefinition",X.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",X.UNION_TYPE_DEFINITION="UnionTypeDefinition",X.ENUM_TYPE_DEFINITION="EnumTypeDefinition",X.ENUM_VALUE_DEFINITION="EnumValueDefinition",X.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",X.DIRECTIVE_DEFINITION="DirectiveDefinition",X.SCHEMA_EXTENSION="SchemaExtension",X.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",X.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",X.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",X.UNION_TYPE_EXTENSION="UnionTypeExtension",X.ENUM_TYPE_EXTENSION="EnumTypeExtension",X.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"})(R||(R={}));function QZ(X){return X===9||X===32}function HX(X){return X>=48&&X<=57}function j6(X){return X>=97&&X<=122||X>=65&&X<=90}function U5(X){return j6(X)||X===95}function S6(X){return j6(X)||HX(X)||X===95}function x6(X){var Y;let Z=Number.MAX_SAFE_INTEGER,J=null,G=-1;for(let H=0;H<X.length;++H){var $;let B=X[H],z=u9(B);if(z===B.length)continue;if(J=($=J)!==null&&$!==void 0?$:H,G=H,H!==0&&z<Z)Z=z}return X.map((H,B)=>B===0?H:H.slice(Z)).slice((Y=J)!==null&&Y!==void 0?Y:0,G+1)}function u9(X){let Y=0;while(Y<X.length&&QZ(X.charCodeAt(Y)))++Y;return Y}function k6(X,Y){let Z=X.replace(/"""/g,'\\"""'),J=Z.split(/\r\n|[\n\r]/g),G=J.length===1,$=J.length>1&&J.slice(1).every((V)=>V.length===0||QZ(V.charCodeAt(0))),H=Z.endsWith('\\"""'),B=X.endsWith('"')&&!H,z=X.endsWith("\\"),W=B||z,U=!(Y!==null&&Y!==void 0&&Y.minimize)&&(!G||X.length>70||W||$||H),Q="",P=G&&QZ(X.charCodeAt(0));if(U&&!P||$)Q+="\n";if(Q+=Z,U||W)Q+="\n";return'"""'+Q+'"""'}var L;(function(X){X.SOF="<SOF>",X.EOF="<EOF>",X.BANG="!",X.DOLLAR="$",X.AMP="&",X.PAREN_L="(",X.PAREN_R=")",X.SPREAD="...",X.COLON=":",X.EQUALS="=",X.AT="@",X.BRACKET_L="[",X.BRACKET_R="]",X.BRACE_L="{",X.PIPE="|",X.BRACE_R="}",X.NAME="Name",X.INT="Int",X.FLOAT="Float",X.STRING="String",X.BLOCK_STRING="BlockString",X.COMMENT="Comment"})(L||(L={}));class PZ{constructor(X){let Y=new RX(L.SOF,0,0,0,0);this.source=X,this.lastToken=Y,this.token=Y,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let X=this.token;if(X.kind!==L.EOF)do if(X.next)X=X.next;else{let Y=p9(this,X.end);X.next=Y,Y.prev=X,X=Y}while(X.kind===L.COMMENT);return X}}function b6(X){return X===L.BANG||X===L.DOLLAR||X===L.AMP||X===L.PAREN_L||X===L.PAREN_R||X===L.SPREAD||X===L.COLON||X===L.EQUALS||X===L.AT||X===L.BRACKET_L||X===L.BRACKET_R||X===L.BRACE_L||X===L.PIPE||X===L.BRACE_R}function BX(X){return X>=0&&X<=55295||X>=57344&&X<=1114111}function VZ(X,Y){return _6(X.charCodeAt(Y))&&v6(X.charCodeAt(Y+1))}function _6(X){return X>=55296&&X<=56319}function v6(X){return X>=56320&&X<=57343}function aY(X,Y){let Z=X.source.body.codePointAt(Y);if(Z===void 0)return L.EOF;else if(Z>=32&&Z<=126){let J=String.fromCodePoint(Z);return J==='"'?"'\"'":`"${J}"`}return"U+"+Z.toString(16).toUpperCase().padStart(4,"0")}function l(X,Y,Z,J,G){let $=X.line,H=1+Z-X.lineStart;return new RX(Y,Z,J,$,H,G)}function p9(X,Y){let Z=X.source.body,J=Z.length,G=Y;while(G<J){let $=Z.charCodeAt(G);switch($){case 65279:case 9:case 32:case 44:++G;continue;case 10:++G,++X.line,X.lineStart=G;continue;case 13:if(Z.charCodeAt(G+1)===10)G+=2;else++G;++X.line,X.lineStart=G;continue;case 35:return d9(X,G);case 33:return l(X,L.BANG,G,G+1);case 36:return l(X,L.DOLLAR,G,G+1);case 38:return l(X,L.AMP,G,G+1);case 40:return l(X,L.PAREN_L,G,G+1);case 41:return l(X,L.PAREN_R,G,G+1);case 46:if(Z.charCodeAt(G+1)===46&&Z.charCodeAt(G+2)===46)return l(X,L.SPREAD,G,G+3);break;case 58:return l(X,L.COLON,G,G+1);case 61:return l(X,L.EQUALS,G,G+1);case 64:return l(X,L.AT,G,G+1);case 91:return l(X,L.BRACKET_L,G,G+1);case 93:return l(X,L.BRACKET_R,G,G+1);case 123:return l(X,L.BRACE_L,G,G+1);case 124:return l(X,L.PIPE,G,G+1);case 125:return l(X,L.BRACE_R,G,G+1);case 34:if(Z.charCodeAt(G+1)===34&&Z.charCodeAt(G+2)===34)return o9(X,G);return l9(X,G)}if(HX($)||$===45)return c9(X,G,$);if(U5($))return r9(X,G);throw c(X.source,G,$===39?'Unexpected single quote character (\'), did you mean to use a double quote (")?':BX($)||VZ(Z,G)?`Unexpected character: ${aY(X,G)}.`:`Invalid character: ${aY(X,G)}.`)}return l(X,L.EOF,J,J)}function d9(X,Y){let Z=X.source.body,J=Z.length,G=Y+1;while(G<J){let $=Z.charCodeAt(G);if($===10||$===13)break;if(BX($))++G;else if(VZ(Z,G))G+=2;else break}return l(X,L.COMMENT,Y,G,Z.slice(Y+1,G))}function c9(X,Y,Z){let J=X.source.body,G=Y,$=Z,H=!1;if($===45)$=J.charCodeAt(++G);if($===48){if($=J.charCodeAt(++G),HX($))throw c(X.source,G,`Invalid number, unexpected digit after 0: ${aY(X,G)}.`)}else G=Q5(X,G,$),$=J.charCodeAt(G);if($===46)H=!0,$=J.charCodeAt(++G),G=Q5(X,G,$),$=J.charCodeAt(G);if($===69||$===101){if(H=!0,$=J.charCodeAt(++G),$===43||$===45)$=J.charCodeAt(++G);G=Q5(X,G,$),$=J.charCodeAt(G)}if($===46||U5($))throw c(X.source,G,`Invalid number, expected digit but got: ${aY(X,G)}.`);return l(X,H?L.FLOAT:L.INT,Y,G,J.slice(Y,G))}function Q5(X,Y,Z){if(!HX(Z))throw c(X.source,Y,`Invalid number, expected digit but got: ${aY(X,Y)}.`);let J=X.source.body,G=Y+1;while(HX(J.charCodeAt(G)))++G;return G}function l9(X,Y){let Z=X.source.body,J=Z.length,G=Y+1,$=G,H="";while(G<J){let B=Z.charCodeAt(G);if(B===34)return H+=Z.slice($,G),l(X,L.STRING,Y,G+1,H);if(B===92){H+=Z.slice($,G);let z=Z.charCodeAt(G+1)===117?Z.charCodeAt(G+2)===123?s9(X,G):a9(X,G):n9(X,G);H+=z.value,G+=z.size,$=G;continue}if(B===10||B===13)break;if(BX(B))++G;else if(VZ(Z,G))G+=2;else throw c(X.source,G,`Invalid character within String: ${aY(X,G)}.`)}throw c(X.source,G,"Unterminated string.")}function s9(X,Y){let Z=X.source.body,J=0,G=3;while(G<12){let $=Z.charCodeAt(Y+G++);if($===125){if(G<5||!BX(J))break;return{value:String.fromCodePoint(J),size:G}}if(J=J<<4|IX($),J<0)break}throw c(X.source,Y,`Invalid Unicode escape sequence: "${Z.slice(Y,Y+G)}".`)}function a9(X,Y){let Z=X.source.body,J=h6(Z,Y+2);if(BX(J))return{value:String.fromCodePoint(J),size:6};if(_6(J)){if(Z.charCodeAt(Y+6)===92&&Z.charCodeAt(Y+7)===117){let G=h6(Z,Y+8);if(v6(G))return{value:String.fromCodePoint(J,G),size:12}}}throw c(X.source,Y,`Invalid Unicode escape sequence: "${Z.slice(Y,Y+6)}".`)}function h6(X,Y){return IX(X.charCodeAt(Y))<<12|IX(X.charCodeAt(Y+1))<<8|IX(X.charCodeAt(Y+2))<<4|IX(X.charCodeAt(Y+3))}function IX(X){return X>=48&&X<=57?X-48:X>=65&&X<=70?X-55:X>=97&&X<=102?X-87:-1}function n9(X,Y){let Z=X.source.body;switch(Z.charCodeAt(Y+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:`
`,size:2};case 114:return{value:`\r`,size:2};case 116:return{value:"\t",size:2}}throw c(X.source,Y,`Invalid character escape sequence: "${Z.slice(Y,Y+2)}".`)}function o9(X,Y){let Z=X.source.body,J=Z.length,G=X.lineStart,$=Y+3,H=$,B="",z=[];while($<J){let W=Z.charCodeAt($);if(W===34&&Z.charCodeAt($+1)===34&&Z.charCodeAt($+2)===34){B+=Z.slice(H,$),z.push(B);let U=l(X,L.BLOCK_STRING,Y,$+3,x6(z).join("\n"));return X.line+=z.length-1,X.lineStart=G,U}if(W===92&&Z.charCodeAt($+1)===34&&Z.charCodeAt($+2)===34&&Z.charCodeAt($+3)===34){B+=Z.slice(H,$),H=$+1,$+=4;continue}if(W===10||W===13){if(B+=Z.slice(H,$),z.push(B),W===13&&Z.charCodeAt($+1)===10)$+=2;else++$;B="",H=$,G=$;continue}if(BX(W))++$;else if(VZ(Z,$))$+=2;else throw c(X.source,$,`Invalid character within String: ${aY(X,$)}.`)}throw c(X.source,$,"Unterminated string.")}function r9(X,Y){let Z=X.source.body,J=Z.length,G=Y+1;while(G<J){let $=Z.charCodeAt(G);if(S6($))++G;else break}return l(X,L.NAME,Y,G,Z.slice(Y,G))}function WX(X){return EZ(X,[])}function EZ(X,Y){switch(typeof X){case"string":return JSON.stringify(X);case"function":return X.name?`[function ${X.name}]`:"[function]";case"object":return i9(X,Y);default:return String(X)}}function i9(X,Y){if(X===null)return"null";if(Y.includes(X))return"[Circular]";let Z=[...Y,X];if(t9(X)){let J=X.toJSON();if(J!==X)return typeof J==="string"?J:EZ(J,Z)}else if(Array.isArray(X))return YJ(X,Z);return e9(X,Z)}function t9(X){return typeof X.toJSON==="function"}function e9(X,Y){let Z=Object.entries(X);if(Z.length===0)return"{}";if(Y.length>2)return"["+XJ(X)+"]";return"{ "+Z.map(([G,$])=>G+": "+EZ($,Y)).join(", ")+" }"}function YJ(X,Y){if(X.length===0)return"[]";if(Y.length>2)return"[Array]";let Z=Math.min(10,X.length),J=X.length-Z,G=[];for(let $=0;$<Z;++$)G.push(EZ(X[$],Y));if(J===1)G.push("... 1 more item");else if(J>1)G.push(`... ${J} more items`);return"["+G.join(", ")+"]"}function XJ(X){let Y=Object.prototype.toString.call(X).replace(/^\[object /,"").replace(/]$/,"");if(Y==="Object"&&typeof X.constructor==="function"){let Z=X.constructor.name;if(typeof Z==="string"&&Z!=="")return Z}return Y}var ZJ=globalThis.process&&!1,f6=ZJ?function X(Y,Z){return Y instanceof Z}:function X(Y,Z){if(Y instanceof Z)return!0;if(typeof Y==="object"&&Y!==null){var J;let G=Z.prototype[Symbol.toStringTag],$=Symbol.toStringTag in Y?Y[Symbol.toStringTag]:(J=Y.constructor)===null||J===void 0?void 0:J.name;if(G===$){let H=WX(Y);throw new Error(`Cannot use ${G} "${H}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`)}}return!1};class OX{constructor(X,Y="GraphQL request",Z={line:1,column:1}){typeof X==="string"||GX(!1,`Body must be a string. Received: ${WX(X)}.`),this.body=X,this.name=Y,this.locationOffset=Z,this.locationOffset.line>0||GX(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||GX(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}function g6(X){return f6(X,OX)}function qZ(X,Y){let Z=new y6(X,Y),J=Z.parseDocument();return Object.defineProperty(J,"tokenCount",{enumerable:!1,value:Z.tokenCount}),J}class y6{constructor(X,Y={}){let Z=g6(X)?X:new OX(X);this._lexer=new PZ(Z),this._options=Y,this._tokenCounter=0}get tokenCount(){return this._tokenCounter}parseName(){let X=this.expectToken(L.NAME);return this.node(X,{kind:R.NAME,value:X.value})}parseDocument(){return this.node(this._lexer.token,{kind:R.DOCUMENT,definitions:this.many(L.SOF,this.parseDefinition,L.EOF)})}parseDefinition(){if(this.peek(L.BRACE_L))return this.parseOperationDefinition();let X=this.peekDescription(),Y=X?this._lexer.lookahead():this._lexer.token;if(Y.kind===L.NAME){switch(Y.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(X)throw c(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(Y.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(Y)}parseOperationDefinition(){let X=this._lexer.token;if(this.peek(L.BRACE_L))return this.node(X,{kind:R.OPERATION_DEFINITION,operation:_Y.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});let Y=this.parseOperationType(),Z;if(this.peek(L.NAME))Z=this.parseName();return this.node(X,{kind:R.OPERATION_DEFINITION,operation:Y,name:Z,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){let X=this.expectToken(L.NAME);switch(X.value){case"query":return _Y.QUERY;case"mutation":return _Y.MUTATION;case"subscription":return _Y.SUBSCRIPTION}throw this.unexpected(X)}parseVariableDefinitions(){return this.optionalMany(L.PAREN_L,this.parseVariableDefinition,L.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:R.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(L.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(L.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){let X=this._lexer.token;return this.expectToken(L.DOLLAR),this.node(X,{kind:R.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:R.SELECTION_SET,selections:this.many(L.BRACE_L,this.parseSelection,L.BRACE_R)})}parseSelection(){return this.peek(L.SPREAD)?this.parseFragment():this.parseField()}parseField(){let X=this._lexer.token,Y=this.parseName(),Z,J;if(this.expectOptionalToken(L.COLON))Z=Y,J=this.parseName();else J=Y;return this.node(X,{kind:R.FIELD,alias:Z,name:J,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(L.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(X){let Y=X?this.parseConstArgument:this.parseArgument;return this.optionalMany(L.PAREN_L,Y,L.PAREN_R)}parseArgument(X=!1){let Y=this._lexer.token,Z=this.parseName();return this.expectToken(L.COLON),this.node(Y,{kind:R.ARGUMENT,name:Z,value:this.parseValueLiteral(X)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){let X=this._lexer.token;this.expectToken(L.SPREAD);let Y=this.expectOptionalKeyword("on");if(!Y&&this.peek(L.NAME))return this.node(X,{kind:R.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)});return this.node(X,{kind:R.INLINE_FRAGMENT,typeCondition:Y?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){let X=this._lexer.token;if(this.expectKeyword("fragment"),this._options.allowLegacyFragmentVariables===!0)return this.node(X,{kind:R.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()});return this.node(X,{kind:R.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if(this._lexer.token.value==="on")throw this.unexpected();return this.parseName()}parseValueLiteral(X){let Y=this._lexer.token;switch(Y.kind){case L.BRACKET_L:return this.parseList(X);case L.BRACE_L:return this.parseObject(X);case L.INT:return this.advanceLexer(),this.node(Y,{kind:R.INT,value:Y.value});case L.FLOAT:return this.advanceLexer(),this.node(Y,{kind:R.FLOAT,value:Y.value});case L.STRING:case L.BLOCK_STRING:return this.parseStringLiteral();case L.NAME:switch(this.advanceLexer(),Y.value){case"true":return this.node(Y,{kind:R.BOOLEAN,value:!0});case"false":return this.node(Y,{kind:R.BOOLEAN,value:!1});case"null":return this.node(Y,{kind:R.NULL});default:return this.node(Y,{kind:R.ENUM,value:Y.value})}case L.DOLLAR:if(X)if(this.expectToken(L.DOLLAR),this._lexer.token.kind===L.NAME){let Z=this._lexer.token.value;throw c(this._lexer.source,Y.start,`Unexpected variable "\$${Z}" in constant value.`)}else throw this.unexpected(Y);return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){let X=this._lexer.token;return this.advanceLexer(),this.node(X,{kind:R.STRING,value:X.value,block:X.kind===L.BLOCK_STRING})}parseList(X){let Y=()=>this.parseValueLiteral(X);return this.node(this._lexer.token,{kind:R.LIST,values:this.any(L.BRACKET_L,Y,L.BRACKET_R)})}parseObject(X){let Y=()=>this.parseObjectField(X);return this.node(this._lexer.token,{kind:R.OBJECT,fields:this.any(L.BRACE_L,Y,L.BRACE_R)})}parseObjectField(X){let Y=this._lexer.token,Z=this.parseName();return this.expectToken(L.COLON),this.node(Y,{kind:R.OBJECT_FIELD,name:Z,value:this.parseValueLiteral(X)})}parseDirectives(X){let Y=[];while(this.peek(L.AT))Y.push(this.parseDirective(X));return Y}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(X){let Y=this._lexer.token;return this.expectToken(L.AT),this.node(Y,{kind:R.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(X)})}parseTypeReference(){let X=this._lexer.token,Y;if(this.expectOptionalToken(L.BRACKET_L)){let Z=this.parseTypeReference();this.expectToken(L.BRACKET_R),Y=this.node(X,{kind:R.LIST_TYPE,type:Z})}else Y=this.parseNamedType();if(this.expectOptionalToken(L.BANG))return this.node(X,{kind:R.NON_NULL_TYPE,type:Y});return Y}parseNamedType(){return this.node(this._lexer.token,{kind:R.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(L.STRING)||this.peek(L.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("schema");let Z=this.parseConstDirectives(),J=this.many(L.BRACE_L,this.parseOperationTypeDefinition,L.BRACE_R);return this.node(X,{kind:R.SCHEMA_DEFINITION,description:Y,directives:Z,operationTypes:J})}parseOperationTypeDefinition(){let X=this._lexer.token,Y=this.parseOperationType();this.expectToken(L.COLON);let Z=this.parseNamedType();return this.node(X,{kind:R.OPERATION_TYPE_DEFINITION,operation:Y,type:Z})}parseScalarTypeDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("scalar");let Z=this.parseName(),J=this.parseConstDirectives();return this.node(X,{kind:R.SCALAR_TYPE_DEFINITION,description:Y,name:Z,directives:J})}parseObjectTypeDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("type");let Z=this.parseName(),J=this.parseImplementsInterfaces(),G=this.parseConstDirectives(),$=this.parseFieldsDefinition();return this.node(X,{kind:R.OBJECT_TYPE_DEFINITION,description:Y,name:Z,interfaces:J,directives:G,fields:$})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(L.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(L.BRACE_L,this.parseFieldDefinition,L.BRACE_R)}parseFieldDefinition(){let X=this._lexer.token,Y=this.parseDescription(),Z=this.parseName(),J=this.parseArgumentDefs();this.expectToken(L.COLON);let G=this.parseTypeReference(),$=this.parseConstDirectives();return this.node(X,{kind:R.FIELD_DEFINITION,description:Y,name:Z,arguments:J,type:G,directives:$})}parseArgumentDefs(){return this.optionalMany(L.PAREN_L,this.parseInputValueDef,L.PAREN_R)}parseInputValueDef(){let X=this._lexer.token,Y=this.parseDescription(),Z=this.parseName();this.expectToken(L.COLON);let J=this.parseTypeReference(),G;if(this.expectOptionalToken(L.EQUALS))G=this.parseConstValueLiteral();let $=this.parseConstDirectives();return this.node(X,{kind:R.INPUT_VALUE_DEFINITION,description:Y,name:Z,type:J,defaultValue:G,directives:$})}parseInterfaceTypeDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("interface");let Z=this.parseName(),J=this.parseImplementsInterfaces(),G=this.parseConstDirectives(),$=this.parseFieldsDefinition();return this.node(X,{kind:R.INTERFACE_TYPE_DEFINITION,description:Y,name:Z,interfaces:J,directives:G,fields:$})}parseUnionTypeDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("union");let Z=this.parseName(),J=this.parseConstDirectives(),G=this.parseUnionMemberTypes();return this.node(X,{kind:R.UNION_TYPE_DEFINITION,description:Y,name:Z,directives:J,types:G})}parseUnionMemberTypes(){return this.expectOptionalToken(L.EQUALS)?this.delimitedMany(L.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("enum");let Z=this.parseName(),J=this.parseConstDirectives(),G=this.parseEnumValuesDefinition();return this.node(X,{kind:R.ENUM_TYPE_DEFINITION,description:Y,name:Z,directives:J,values:G})}parseEnumValuesDefinition(){return this.optionalMany(L.BRACE_L,this.parseEnumValueDefinition,L.BRACE_R)}parseEnumValueDefinition(){let X=this._lexer.token,Y=this.parseDescription(),Z=this.parseEnumValueName(),J=this.parseConstDirectives();return this.node(X,{kind:R.ENUM_VALUE_DEFINITION,description:Y,name:Z,directives:J})}parseEnumValueName(){if(this._lexer.token.value==="true"||this._lexer.token.value==="false"||this._lexer.token.value==="null")throw c(this._lexer.source,this._lexer.token.start,`${AZ(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("input");let Z=this.parseName(),J=this.parseConstDirectives(),G=this.parseInputFieldsDefinition();return this.node(X,{kind:R.INPUT_OBJECT_TYPE_DEFINITION,description:Y,name:Z,directives:J,fields:G})}parseInputFieldsDefinition(){return this.optionalMany(L.BRACE_L,this.parseInputValueDef,L.BRACE_R)}parseTypeSystemExtension(){let X=this._lexer.lookahead();if(X.kind===L.NAME)switch(X.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(X)}parseSchemaExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");let Y=this.parseConstDirectives(),Z=this.optionalMany(L.BRACE_L,this.parseOperationTypeDefinition,L.BRACE_R);if(Y.length===0&&Z.length===0)throw this.unexpected();return this.node(X,{kind:R.SCHEMA_EXTENSION,directives:Y,operationTypes:Z})}parseScalarTypeExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");let Y=this.parseName(),Z=this.parseConstDirectives();if(Z.length===0)throw this.unexpected();return this.node(X,{kind:R.SCALAR_TYPE_EXTENSION,name:Y,directives:Z})}parseObjectTypeExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");let Y=this.parseName(),Z=this.parseImplementsInterfaces(),J=this.parseConstDirectives(),G=this.parseFieldsDefinition();if(Z.length===0&&J.length===0&&G.length===0)throw this.unexpected();return this.node(X,{kind:R.OBJECT_TYPE_EXTENSION,name:Y,interfaces:Z,directives:J,fields:G})}parseInterfaceTypeExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");let Y=this.parseName(),Z=this.parseImplementsInterfaces(),J=this.parseConstDirectives(),G=this.parseFieldsDefinition();if(Z.length===0&&J.length===0&&G.length===0)throw this.unexpected();return this.node(X,{kind:R.INTERFACE_TYPE_EXTENSION,name:Y,interfaces:Z,directives:J,fields:G})}parseUnionTypeExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");let Y=this.parseName(),Z=this.parseConstDirectives(),J=this.parseUnionMemberTypes();if(Z.length===0&&J.length===0)throw this.unexpected();return this.node(X,{kind:R.UNION_TYPE_EXTENSION,name:Y,directives:Z,types:J})}parseEnumTypeExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");let Y=this.parseName(),Z=this.parseConstDirectives(),J=this.parseEnumValuesDefinition();if(Z.length===0&&J.length===0)throw this.unexpected();return this.node(X,{kind:R.ENUM_TYPE_EXTENSION,name:Y,directives:Z,values:J})}parseInputObjectTypeExtension(){let X=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");let Y=this.parseName(),Z=this.parseConstDirectives(),J=this.parseInputFieldsDefinition();if(Z.length===0&&J.length===0)throw this.unexpected();return this.node(X,{kind:R.INPUT_OBJECT_TYPE_EXTENSION,name:Y,directives:Z,fields:J})}parseDirectiveDefinition(){let X=this._lexer.token,Y=this.parseDescription();this.expectKeyword("directive"),this.expectToken(L.AT);let Z=this.parseName(),J=this.parseArgumentDefs(),G=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");let $=this.parseDirectiveLocations();return this.node(X,{kind:R.DIRECTIVE_DEFINITION,description:Y,name:Z,arguments:J,repeatable:G,locations:$})}parseDirectiveLocations(){return this.delimitedMany(L.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){let X=this._lexer.token,Y=this.parseName();if(Object.prototype.hasOwnProperty.call(NX,Y.value))return Y;throw this.unexpected(X)}node(X,Y){if(this._options.noLocation!==!0)Y.loc=new UZ(X,this._lexer.lastToken,this._lexer.source);return Y}peek(X){return this._lexer.token.kind===X}expectToken(X){let Y=this._lexer.token;if(Y.kind===X)return this.advanceLexer(),Y;throw c(this._lexer.source,Y.start,`Expected ${m6(X)}, found ${AZ(Y)}.`)}expectOptionalToken(X){if(this._lexer.token.kind===X)return this.advanceLexer(),!0;return!1}expectKeyword(X){let Y=this._lexer.token;if(Y.kind===L.NAME&&Y.value===X)this.advanceLexer();else throw c(this._lexer.source,Y.start,`Expected "${X}", found ${AZ(Y)}.`)}expectOptionalKeyword(X){let Y=this._lexer.token;if(Y.kind===L.NAME&&Y.value===X)return this.advanceLexer(),!0;return!1}unexpected(X){let Y=X!==null&&X!==void 0?X:this._lexer.token;return c(this._lexer.source,Y.start,`Unexpected ${AZ(Y)}.`)}any(X,Y,Z){this.expectToken(X);let J=[];while(!this.expectOptionalToken(Z))J.push(Y.call(this));return J}optionalMany(X,Y,Z){if(this.expectOptionalToken(X)){let J=[];do J.push(Y.call(this));while(!this.expectOptionalToken(Z));return J}return[]}many(X,Y,Z){this.expectToken(X);let J=[];do J.push(Y.call(this));while(!this.expectOptionalToken(Z));return J}delimitedMany(X,Y){this.expectOptionalToken(X);let Z=[];do Z.push(Y.call(this));while(this.expectOptionalToken(X));return Z}advanceLexer(){let{maxTokens:X}=this._options,Y=this._lexer.advance();if(Y.kind!==L.EOF){if(++this._tokenCounter,X!==void 0&&this._tokenCounter>X)throw c(this._lexer.source,Y.start,`Document contains more that ${X} tokens. Parsing aborted.`)}}}function AZ(X){let Y=X.value;return m6(X.kind)+(Y!=null?` "${Y}"`:"")}function m6(X){return b6(X)?`"${X}"`:X}function u6(X){return`"${X.replace(JJ,GJ)}"`}var JJ=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function GJ(X){return $J[X.charCodeAt(0)]}var $J=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];var wY=Object.freeze({});function a(X,Y,Z=W5){let J=new Map;for(let A of Object.values(R))J.set(A,P5(Y,A));let G=void 0,$=Array.isArray(X),H=[X],B=-1,z=[],W=X,U=void 0,Q=void 0,P=[],V=[];do{B++;let A=B===H.length,F=A&&z.length!==0;if(A){if(U=V.length===0?void 0:P[P.length-1],W=Q,Q=V.pop(),F)if($){W=W.slice();let w=0;for(let[C,N]of z){let O=C-w;if(N===null)W.splice(O,1),w++;else W[O]=N}}else{W={...W};for(let[w,C]of z)W[w]=C}B=G.index,H=G.keys,z=G.edits,$=G.inArray,G=G.prev}else if(Q){if(U=$?B:H[B],W=Q[U],W===null||W===void 0)continue;P.push(U)}let T;if(!Array.isArray(W)){var q,D;z5(W)||GX(!1,`Invalid AST Node: ${WX(W)}.`);let w=A?(q=J.get(W.kind))===null||q===void 0?void 0:q.leave:(D=J.get(W.kind))===null||D===void 0?void 0:D.enter;if(T=w===null||w===void 0?void 0:w.call(Y,W,U,Q,P,V),T===wY)break;if(T===!1){if(!A){P.pop();continue}}else if(T!==void 0){if(z.push([U,T]),!A)if(z5(T))W=T;else{P.pop();continue}}}if(T===void 0&&F)z.push([U,W]);if(A)P.pop();else{var M;if(G={inArray:$,index:B,keys:H,edits:z,prev:G},$=Array.isArray(W),H=$?W:(M=Z[W.kind])!==null&&M!==void 0?M:[],B=-1,z=[],Q)V.push(Q);Q=W}}while(G!==void 0);if(z.length!==0)return z[z.length-1][1];return X}function P5(X,Y){let Z=X[Y];if(typeof Z==="object")return Z;else if(typeof Z==="function")return{enter:Z,leave:void 0};return{enter:X.enter,leave:X.leave}}function MZ(X){return a(X,BJ)}var HJ=80,BJ={Name:{leave:(X)=>X.value},Variable:{leave:(X)=>"$"+X.name},Document:{leave:(X)=>I(X.definitions,"\n\n")},OperationDefinition:{leave(X){let Y=k("(",I(X.variableDefinitions,", "),")"),Z=I([X.operation,I([X.name,Y]),I(X.directives," ")]," ");return(Z==="query"?"":Z+" ")+X.selectionSet}},VariableDefinition:{leave:({variable:X,type:Y,defaultValue:Z,directives:J})=>X+": "+Y+k(" = ",Z)+k(" ",I(J," "))},SelectionSet:{leave:({selections:X})=>qY(X)},Field:{leave({alias:X,name:Y,arguments:Z,directives:J,selectionSet:G}){let $=k("",X,": ")+Y,H=$+k("(",I(Z,", "),")");if(H.length>HJ)H=$+k("(\n",DZ(I(Z,"\n")),"\n)");return I([H,I(J," "),G]," ")}},Argument:{leave:({name:X,value:Y})=>X+": "+Y},FragmentSpread:{leave:({name:X,directives:Y})=>"..."+X+k(" ",I(Y," "))},InlineFragment:{leave:({typeCondition:X,directives:Y,selectionSet:Z})=>I(["...",k("on ",X),I(Y," "),Z]," ")},FragmentDefinition:{leave:({name:X,typeCondition:Y,variableDefinitions:Z,directives:J,selectionSet:G})=>`fragment ${X}${k("(",I(Z,", "),")")} on ${Y} ${k("",I(J," ")," ")}`+G},IntValue:{leave:({value:X})=>X},FloatValue:{leave:({value:X})=>X},StringValue:{leave:({value:X,block:Y})=>Y?k6(X):u6(X)},BooleanValue:{leave:({value:X})=>X?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:X})=>X},ListValue:{leave:({values:X})=>"["+I(X,", ")+"]"},ObjectValue:{leave:({fields:X})=>"{"+I(X,", ")+"}"},ObjectField:{leave:({name:X,value:Y})=>X+": "+Y},Directive:{leave:({name:X,arguments:Y})=>"@"+X+k("(",I(Y,", "),")")},NamedType:{leave:({name:X})=>X},ListType:{leave:({type:X})=>"["+X+"]"},NonNullType:{leave:({type:X})=>X+"!"},SchemaDefinition:{leave:({description:X,directives:Y,operationTypes:Z})=>k("",X,"\n")+I(["schema",I(Y," "),qY(Z)]," ")},OperationTypeDefinition:{leave:({operation:X,type:Y})=>X+": "+Y},ScalarTypeDefinition:{leave:({description:X,name:Y,directives:Z})=>k("",X,"\n")+I(["scalar",Y,I(Z," ")]," ")},ObjectTypeDefinition:{leave:({description:X,name:Y,interfaces:Z,directives:J,fields:G})=>k("",X,"\n")+I(["type",Y,k("implements ",I(Z," & ")),I(J," "),qY(G)]," ")},FieldDefinition:{leave:({description:X,name:Y,arguments:Z,type:J,directives:G})=>k("",X,"\n")+Y+(p6(Z)?k("(\n",DZ(I(Z,"\n")),"\n)"):k("(",I(Z,", "),")"))+": "+J+k(" ",I(G," "))},InputValueDefinition:{leave:({description:X,name:Y,type:Z,defaultValue:J,directives:G})=>k("",X,"\n")+I([Y+": "+Z,k("= ",J),I(G," ")]," ")},InterfaceTypeDefinition:{leave:({description:X,name:Y,interfaces:Z,directives:J,fields:G})=>k("",X,"\n")+I(["interface",Y,k("implements ",I(Z," & ")),I(J," "),qY(G)]," ")},UnionTypeDefinition:{leave:({description:X,name:Y,directives:Z,types:J})=>k("",X,"\n")+I(["union",Y,I(Z," "),k("= ",I(J," | "))]," ")},EnumTypeDefinition:{leave:({description:X,name:Y,directives:Z,values:J})=>k("",X,"\n")+I(["enum",Y,I(Z," "),qY(J)]," ")},EnumValueDefinition:{leave:({description:X,name:Y,directives:Z})=>k("",X,"\n")+I([Y,I(Z," ")]," ")},InputObjectTypeDefinition:{leave:({description:X,name:Y,directives:Z,fields:J})=>k("",X,"\n")+I(["input",Y,I(Z," "),qY(J)]," ")},DirectiveDefinition:{leave:({description:X,name:Y,arguments:Z,repeatable:J,locations:G})=>k("",X,"\n")+"directive @"+Y+(p6(Z)?k("(\n",DZ(I(Z,"\n")),"\n)"):k("(",I(Z,", "),")"))+(J?" repeatable":"")+" on "+I(G," | ")},SchemaExtension:{leave:({directives:X,operationTypes:Y})=>I(["extend schema",I(X," "),qY(Y)]," ")},ScalarTypeExtension:{leave:({name:X,directives:Y})=>I(["extend scalar",X,I(Y," ")]," ")},ObjectTypeExtension:{leave:({name:X,interfaces:Y,directives:Z,fields:J})=>I(["extend type",X,k("implements ",I(Y," & ")),I(Z," "),qY(J)]," ")},InterfaceTypeExtension:{leave:({name:X,interfaces:Y,directives:Z,fields:J})=>I(["extend interface",X,k("implements ",I(Y," & ")),I(Z," "),qY(J)]," ")},UnionTypeExtension:{leave:({name:X,directives:Y,types:Z})=>I(["extend union",X,I(Y," "),k("= ",I(Z," | "))]," ")},EnumTypeExtension:{leave:({name:X,directives:Y,values:Z})=>I(["extend enum",X,I(Y," "),qY(Z)]," ")},InputObjectTypeExtension:{leave:({name:X,directives:Y,fields:Z})=>I(["extend input",X,I(Y," "),qY(Z)]," ")}};function I(X,Y=""){var Z;return(Z=X===null||X===void 0?void 0:X.filter((J)=>J).join(Y))!==null&&Z!==void 0?Z:""}function qY(X){return k("{\n",DZ(I(X,"\n")),"\n}")}function k(X,Y,Z=""){return Y!=null&&Y!==""?X+Y+Z:""}function DZ(X){return k("  ",X.replace(/\n/g,"\n  "))}function p6(X){var Y;return(Y=X===null||X===void 0?void 0:X.some((Z)=>Z.includes("\n")))!==null&&Y!==void 0?Y:!1}function jX(X){return X.kind===R.FIELD||X.kind===R.FRAGMENT_SPREAD||X.kind===R.INLINE_FRAGMENT}function DY(X,Y){var Z=X.directives;if(!Z||!Z.length)return!0;return d6(Z).every(function(J){var{directive:G,ifArgument:$}=J,H=!1;if($.value.kind==="Variable")H=Y&&Y[$.value.name.value],K(H!==void 0,106,G.name.value);else H=$.value.value;return G.name.value==="skip"?!H:H})}function CY(X,Y,Z){var J=new Set(X),G=J.size;return a(Y,{Directive:function($){if(J.delete($.name.value)&&(!Z||!J.size))return wY}}),Z?!J.size:J.size<G}function V5(X){return X&&CY(["client","export"],X,!0)}function KJ(X){var Y=X.name.value;return Y==="skip"||Y==="include"}function d6(X){var Y=[];if(X&&X.length)X.forEach(function(Z){if(!KJ(Z))return;var J=Z.arguments,G=Z.name.value;K(J&&J.length===1,107,G);var $=J[0];K($.name&&$.name.value==="if",108,G);var H=$.value;K(H&&(H.kind==="Variable"||H.kind==="BooleanValue"),109,G),Y.push({directive:Z,ifArgument:$})});return Y}function E5(X){var Y,Z,J=(Y=X.directives)===null||Y===void 0?void 0:Y.find(function($){var H=$.name;return H.value==="unmask"});if(!J)return"mask";var G=(Z=J.arguments)===null||Z===void 0?void 0:Z.find(function($){var H=$.name;return H.value==="mode"});if(globalThis.__DEV__!==!1){if(G){if(G.value.kind===R.VARIABLE)globalThis.__DEV__!==!1&&K.warn(110);else if(G.value.kind!==R.STRING)globalThis.__DEV__!==!1&&K.warn(111);else if(G.value.value!=="migrate")globalThis.__DEV__!==!1&&K.warn(112,G.value.value)}}if(G&&"value"in G.value&&G.value.value==="migrate")return"migrate";return"unmask"}var wJ=()=>Object.create(null),{forEach:CJ,slice:c6}=Array.prototype,{hasOwnProperty:RJ}=Object.prototype;class XY{constructor(X=!0,Y=wJ){this.weakness=X,this.makeData=Y}lookup(){return this.lookupArray(arguments)}lookupArray(X){let Y=this;return CJ.call(X,(Z)=>Y=Y.getChildTrie(Z)),RJ.call(Y,"data")?Y.data:Y.data=this.makeData(c6.call(X))}peek(){return this.peekArray(arguments)}peekArray(X){let Y=this;for(let Z=0,J=X.length;Y&&Z<J;++Z){let G=Y.mapFor(X[Z],!1);Y=G&&G.get(X[Z])}return Y&&Y.data}remove(){return this.removeArray(arguments)}removeArray(X){let Y;if(X.length){let Z=X[0],J=this.mapFor(Z,!1),G=J&&J.get(Z);if(G){if(Y=G.removeArray(c6.call(X,1)),!G.data&&!G.weak&&!(G.strong&&G.strong.size))J.delete(Z)}}else Y=this.data,delete this.data;return Y}getChildTrie(X){let Y=this.mapFor(X,!0),Z=Y.get(X);if(!Z)Y.set(X,Z=new XY(this.weakness,this.makeData));return Z}mapFor(X,Y){return this.weakness&&NJ(X)?this.weak||(Y?this.weak=new WeakMap:void 0):this.strong||(Y?this.strong=new Map:void 0)}}function NJ(X){switch(typeof X){case"object":if(X===null)break;case"function":return!0}return!1}var IJ=e(function(){return navigator.product})=="ReactNative",$Y=typeof WeakMap==="function"&&!(IJ&&!global.HermesInternal),zX=typeof WeakSet==="function",A5=typeof Symbol==="function"&&typeof Symbol.for==="function",vY=A5&&Symbol.asyncIterator,l4=typeof e(function(){return window.document.createElement})==="function",s4=e(function(){return navigator.userAgent.indexOf("jsdom")>=0})||!1;function h(X){return X!==null&&typeof X==="object"}function q5(X,Y){var Z=Y,J=[];if(X.definitions.forEach(function($){if($.kind==="OperationDefinition")throw f(113,$.operation,$.name?" named '".concat($.name.value,"'"):"");if($.kind==="FragmentDefinition")J.push($)}),typeof Z==="undefined")K(J.length===1,114,J.length),Z=J[0].name.value;var G=E(E({},X),{definitions:m([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:Z}}]}}],X.definitions,!0)});return G}function HY(X){if(X===void 0)X=[];var Y={};return X.forEach(function(Z){Y[Z.name.value]=Z}),Y}function RY(X,Y){switch(X.kind){case"InlineFragment":return X;case"FragmentSpread":{var Z=X.name.value;if(typeof Y==="function")return Y(Z);var J=Y&&Y[Z];return K(J,115,Z),J||null}default:return null}}function D5(X){var Y=!0;return a(X,{FragmentSpread:function(Z){if(Y=!!Z.directives&&Z.directives.some(function(J){return J.name.value==="unmask"}),!Y)return wY}}),Y}function OJ(){}class nY{constructor(X=1/0,Y=OJ){this.max=X,this.dispose=Y,this.map=new Map,this.newest=null,this.oldest=null}has(X){return this.map.has(X)}get(X){let Y=this.getNode(X);return Y&&Y.value}get size(){return this.map.size}getNode(X){let Y=this.map.get(X);if(Y&&Y!==this.newest){let{older:Z,newer:J}=Y;if(J)J.older=Z;if(Z)Z.newer=J;if(Y.older=this.newest,Y.older.newer=Y,Y.newer=null,this.newest=Y,Y===this.oldest)this.oldest=J}return Y}set(X,Y){let Z=this.getNode(X);if(Z)return Z.value=Y;if(Z={key:X,value:Y,newer:null,older:this.newest},this.newest)this.newest.newer=Z;return this.newest=Z,this.oldest=this.oldest||Z,this.map.set(X,Z),Z.value}clean(){while(this.oldest&&this.map.size>this.max)this.delete(this.oldest.key)}delete(X){let Y=this.map.get(X);if(Y){if(Y===this.newest)this.newest=Y.older;if(Y===this.oldest)this.oldest=Y.newer;if(Y.newer)Y.newer.older=Y.older;if(Y.older)Y.older.newer=Y.newer;return this.map.delete(X),this.dispose(Y.value,X),!0}return!1}}function M5(){}var jJ=M5,SJ=typeof WeakRef!=="undefined"?WeakRef:function(X){return{deref:()=>X}},xJ=typeof WeakMap!=="undefined"?WeakMap:Map,kJ=typeof FinalizationRegistry!=="undefined"?FinalizationRegistry:function(){return{register:M5,unregister:M5}},hJ=10024;class NY{constructor(X=1/0,Y=jJ){this.max=X,this.dispose=Y,this.map=new xJ,this.newest=null,this.oldest=null,this.unfinalizedNodes=new Set,this.finalizationScheduled=!1,this.size=0,this.finalize=()=>{let Z=this.unfinalizedNodes.values();for(let J=0;J<hJ;J++){let G=Z.next().value;if(!G)break;this.unfinalizedNodes.delete(G);let $=G.key;delete G.key,G.keyRef=new SJ($),this.registry.register($,G,G)}if(this.unfinalizedNodes.size>0)queueMicrotask(this.finalize);else this.finalizationScheduled=!1},this.registry=new kJ(this.deleteNode.bind(this))}has(X){return this.map.has(X)}get(X){let Y=this.getNode(X);return Y&&Y.value}getNode(X){let Y=this.map.get(X);if(Y&&Y!==this.newest){let{older:Z,newer:J}=Y;if(J)J.older=Z;if(Z)Z.newer=J;if(Y.older=this.newest,Y.older.newer=Y,Y.newer=null,this.newest=Y,Y===this.oldest)this.oldest=J}return Y}set(X,Y){let Z=this.getNode(X);if(Z)return Z.value=Y;if(Z={key:X,value:Y,newer:null,older:this.newest},this.newest)this.newest.newer=Z;return this.newest=Z,this.oldest=this.oldest||Z,this.scheduleFinalization(Z),this.map.set(X,Z),this.size++,Z.value}clean(){while(this.oldest&&this.size>this.max)this.deleteNode(this.oldest)}deleteNode(X){if(X===this.newest)this.newest=X.older;if(X===this.oldest)this.oldest=X.newer;if(X.newer)X.newer.older=X.older;if(X.older)X.older.newer=X.newer;this.size--;let Y=X.key||X.keyRef&&X.keyRef.deref();if(this.dispose(X.value,Y),!X.keyRef)this.unfinalizedNodes.delete(X);else this.registry.unregister(X);if(Y)this.map.delete(Y)}delete(X){let Y=this.map.get(X);if(Y)return this.deleteNode(Y),!0;return!1}scheduleFinalization(X){if(this.unfinalizedNodes.add(X),!this.finalizationScheduled)this.finalizationScheduled=!0,queueMicrotask(this.finalize)}}var L5=new WeakSet;function l6(X){if(X.size<=(X.max||-1))return;if(!L5.has(X))L5.add(X),setTimeout(function(){X.clean(),L5.delete(X)},100)}var UX=function(X,Y){var Z=new NY(X,Y);return Z.set=function(J,G){var $=NY.prototype.set.call(this,J,G);return l6(this),$},Z},LZ=function(X,Y){var Z=new nY(X,Y);return Z.set=function(J,G){var $=nY.prototype.set.call(this,J,G);return l6(this),$},Z};var bJ=Symbol.for("apollo.cacheSize"),n=E({},bY[bJ]);var oY={};function TZ(X,Y){oY[X]=Y}var s6=globalThis.__DEV__!==!1?vJ:void 0,a6=globalThis.__DEV__!==!1?fJ:void 0,n6=globalThis.__DEV__!==!1?o6:void 0;function _J(){var X={parser:1000,canonicalStringify:1000,print:2000,"documentTransform.cache":2000,"queryManager.getDocumentInfo":2000,"PersistedQueryLink.persistedQueryHashes":2000,"fragmentRegistry.transform":2000,"fragmentRegistry.lookup":1000,"fragmentRegistry.findFragmentSpreads":4000,"cache.fragmentQueryDocuments":1000,"removeTypenameFromVariables.getVariableDefinitions":2000,"inMemoryCache.maybeBroadcastWatch":5000,"inMemoryCache.executeSelectionSet":50000,"inMemoryCache.executeSubSelectedArray":1e4};return Object.fromEntries(Object.entries(X).map(function(Y){var Z=Y[0],J=Y[1];return[Z,n[Z]||J]}))}function vJ(){var X,Y,Z,J,G;if(globalThis.__DEV__===!1)throw new Error("only supported in development mode");return{limits:_J(),sizes:E({print:(X=oY.print)===null||X===void 0?void 0:X.call(oY),parser:(Y=oY.parser)===null||Y===void 0?void 0:Y.call(oY),canonicalStringify:(Z=oY.canonicalStringify)===null||Z===void 0?void 0:Z.call(oY),links:F5(this.link),queryManager:{getDocumentInfo:this.queryManager.transformCache.size,documentTransforms:i6(this.queryManager.documentTransform)}},(G=(J=this.cache).getMemoryInternals)===null||G===void 0?void 0:G.call(J))}}function o6(){return{cache:{fragmentQueryDocuments:fY(this.getFragmentDoc)}}}function fJ(){var X=this.config.fragments;return E(E({},o6.apply(this)),{addTypenameDocumentTransform:i6(this.addTypenameTransform),inMemoryCache:{executeSelectionSet:fY(this.storeReader.executeSelectionSet),executeSubSelectedArray:fY(this.storeReader.executeSubSelectedArray),maybeBroadcastWatch:fY(this.maybeBroadcastWatch)},fragmentRegistry:{findFragmentSpreads:fY(X===null||X===void 0?void 0:X.findFragmentSpreads),lookup:fY(X===null||X===void 0?void 0:X.lookup),transform:fY(X===null||X===void 0?void 0:X.transform)}})}function gJ(X){return!!X&&"dirtyKey"in X}function fY(X){return gJ(X)?X.size:void 0}function r6(X){return X!=null}function i6(X){return T5(X).map(function(Y){return{cache:Y}})}function T5(X){return X?m(m([fY(X===null||X===void 0?void 0:X.performWork)],T5(X===null||X===void 0?void 0:X.left),!0),T5(X===null||X===void 0?void 0:X.right),!0).filter(r6):[]}function F5(X){var Y;return X?m(m([(Y=X===null||X===void 0?void 0:X.getMemoryInternals)===null||Y===void 0?void 0:Y.call(X)],F5(X===null||X===void 0?void 0:X.left),!0),F5(X===null||X===void 0?void 0:X.right),!0).filter(r6):[]}var ZY=Object.assign(function X(Y){return JSON.stringify(Y,yJ)},{reset:function(){QX=new LZ(n.canonicalStringify||1000)}});if(globalThis.__DEV__!==!1)TZ("canonicalStringify",function(){return QX.size});var QX;ZY.reset();function yJ(X,Y){if(Y&&typeof Y==="object"){var Z=Object.getPrototypeOf(Y);if(Z===Object.prototype||Z===null){var J=Object.keys(Y);if(J.every(mJ))return Y;var G=JSON.stringify(J),$=QX.get(G);if(!$){J.sort();var H=JSON.stringify(J);$=QX.get(H)||J,QX.set(G,$),QX.set(H,$)}var B=Object.create(Z);return $.forEach(function(z){B[z]=Y[z]}),B}}return Y}function mJ(X,Y,Z){return Y===0||Z[Y-1]<=X}function MY(X){return{__ref:String(X)}}function x(X){return Boolean(X&&typeof X==="object"&&typeof X.__ref==="string")}function K5(X){return h(X)&&X.kind==="Document"&&Array.isArray(X.definitions)}function uJ(X){return X.kind==="StringValue"}function pJ(X){return X.kind==="BooleanValue"}function dJ(X){return X.kind==="IntValue"}function cJ(X){return X.kind==="FloatValue"}function lJ(X){return X.kind==="Variable"}function sJ(X){return X.kind==="ObjectValue"}function aJ(X){return X.kind==="ListValue"}function nJ(X){return X.kind==="EnumValue"}function oJ(X){return X.kind==="NullValue"}function gY(X,Y,Z,J){if(dJ(Z)||cJ(Z))X[Y.value]=Number(Z.value);else if(pJ(Z)||uJ(Z))X[Y.value]=Z.value;else if(sJ(Z)){var G={};Z.fields.map(function(H){return gY(G,H.name,H.value,J)}),X[Y.value]=G}else if(lJ(Z)){var $=(J||{})[Z.name.value];X[Y.value]=$}else if(aJ(Z))X[Y.value]=Z.values.map(function(H){var B={};return gY(B,Y,H,J),B[Y.value]});else if(nJ(Z))X[Y.value]=Z.value;else if(oJ(Z))X[Y.value]=null;else throw f(124,Y.value,Z.kind)}function w5(X,Y){var Z=null;if(X.directives)Z={},X.directives.forEach(function(G){if(Z[G.name.value]={},G.arguments)G.arguments.forEach(function($){var{name:H,value:B}=$;return gY(Z[G.name.value],H,B,Y)})});var J=null;if(X.arguments&&X.arguments.length)J={},X.arguments.forEach(function(G){var{name:$,value:H}=G;return gY(J,$,H,Y)});return FZ(X.name.value,J,Z)}var rJ=["connection","include","skip","client","rest","export","nonreactive"],SX=ZY,FZ=Object.assign(function(X,Y,Z){if(Y&&Z&&Z.connection&&Z.connection.key)if(Z.connection.filter&&Z.connection.filter.length>0){var J=Z.connection.filter?Z.connection.filter:[];J.sort();var G={};return J.forEach(function(B){G[B]=Y[B]}),"".concat(Z.connection.key,"(").concat(SX(G),")")}else return Z.connection.key;var $=X;if(Y){var H=SX(Y);$+="(".concat(H,")")}if(Z)Object.keys(Z).forEach(function(B){if(rJ.indexOf(B)!==-1)return;if(Z[B]&&Object.keys(Z[B]).length)$+="@".concat(B,"(").concat(SX(Z[B]),")");else $+="@".concat(B)});return $},{setStringify:function(X){var Y=SX;return SX=X,Y}});function IY(X,Y){if(X.arguments&&X.arguments.length){var Z={};return X.arguments.forEach(function(J){var{name:G,value:$}=J;return gY(Z,G,$,Y)}),Z}return null}function YY(X){return X.alias?X.alias.value:X.name.value}function xX(X,Y,Z){var J;for(var G=0,$=Y.selections;G<$.length;G++){var H=$[G];if(JY(H)){if(H.name.value==="__typename")return X[YY(H)]}else if(J)J.push(H);else J=[H]}if(typeof X.__typename==="string")return X.__typename;if(J)for(var B=0,z=J;B<z.length;B++){var H=z[B],W=xX(X,RY(H,Z).selectionSet,Z);if(typeof W==="string")return W}}function JY(X){return X.kind==="Field"}function C5(X){return X.kind==="InlineFragment"}function OY(X){K(X&&X.kind==="Document",116);var Y=X.definitions.filter(function(Z){return Z.kind!=="FragmentDefinition"}).map(function(Z){if(Z.kind!=="OperationDefinition")throw f(117,Z.kind);return Z});return K(Y.length<=1,118,Y.length),X}function BY(X){return OY(X),X.definitions.filter(function(Y){return Y.kind==="OperationDefinition"})[0]}function yY(X){return X.definitions.filter(function(Y){return Y.kind==="OperationDefinition"&&!!Y.name}).map(function(Y){return Y.name.value})[0]||null}function WY(X){return X.definitions.filter(function(Y){return Y.kind==="FragmentDefinition"})}function kX(X){var Y=BY(X);return K(Y&&Y.operation==="query",119),Y}function hX(X){K(X.kind==="Document",120),K(X.definitions.length<=1,121);var Y=X.definitions[0];return K(Y.kind==="FragmentDefinition",122),Y}function LY(X){OY(X);var Y;for(var Z=0,J=X.definitions;Z<J.length;Z++){var G=J[Z];if(G.kind==="OperationDefinition"){var $=G.operation;if($==="query"||$==="mutation"||$==="subscription")return G}if(G.kind==="FragmentDefinition"&&!Y)Y=G}if(Y)return Y;throw f(123)}function rY(X){var Y=Object.create(null),Z=X&&X.variableDefinitions;if(Z&&Z.length)Z.forEach(function(J){if(J.defaultValue)gY(Y,J.variable.name,J.defaultValue)});return Y}var r=null,t6={},iJ=1,tJ=()=>class X{constructor(){this.id=["slot",iJ++,Date.now(),Math.random().toString(36).slice(2)].join(":")}hasValue(){for(let Y=r;Y;Y=Y.parent)if(this.id in Y.slots){let Z=Y.slots[this.id];if(Z===t6)break;if(Y!==r)r.slots[this.id]=Z;return!0}if(r)r.slots[this.id]=t6;return!1}getValue(){if(this.hasValue())return r.slots[this.id]}withValue(Y,Z,J,G){let $={__proto__:null,[this.id]:Y},H=r;r={parent:H,slots:$};try{return Z.apply(G,J)}finally{r=H}}static bind(Y){let Z=r;return function(){let J=r;try{return r=Z,Y.apply(this,arguments)}finally{r=J}}}static noContext(Y,Z,J){if(r){let G=r;try{return r=null,Y.apply(J,Z)}finally{r=G}}else return Y.apply(J,Z)}};function e6(X){try{return X()}catch(Y){}}var R5="@wry/context:Slot",eJ=e6(()=>globalThis)||e6(()=>global)||Object.create(null),Y8=eJ,QY=Y8[R5]||Array[R5]||function(X){try{Object.defineProperty(Y8,R5,{value:X,enumerable:!1,writable:!1,configurable:!0})}finally{return X}}(tJ());var iY=new QY;var{hasOwnProperty:X8}=Object.prototype,bX=Array.from||function(X){let Y=[];return X.forEach((Z)=>Y.push(Z)),Y};function PX(X){let{unsubscribe:Y}=X;if(typeof Y==="function")X.unsubscribe=void 0,Y()}var _X=[],G0=100;function VX(X,Y){if(!X)throw new Error(Y||"assertion failure")}function J8(X,Y){let Z=X.length;return Z>0&&Z===Y.length&&X[Z-1]===Y[Z-1]}function G8(X){switch(X.length){case 0:throw new Error("unknown value");case 1:return X[0];case 2:throw X[1]}}function $8(X){return X.slice(0)}class vX{constructor(X){this.fn=X,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++vX.count}peek(){if(this.value.length===1&&!mY(this))return Z8(this),this.value[0]}recompute(X){return VX(!this.recomputing,"already recomputing"),Z8(this),mY(this)?$0(this,X):G8(this.value)}setDirty(){if(this.dirty)return;this.dirty=!0,H8(this),PX(this)}dispose(){this.setDirty(),Q8(this),N5(this,(X,Y)=>{X.setDirty(),P8(X,this)})}forget(){this.dispose()}dependOn(X){if(X.add(this),!this.deps)this.deps=_X.pop()||new Set;this.deps.add(X)}forgetDeps(){if(this.deps)bX(this.deps).forEach((X)=>X.delete(this)),this.deps.clear(),_X.push(this.deps),this.deps=null}}vX.count=0;function Z8(X){let Y=iY.getValue();if(Y){if(X.parents.add(Y),!Y.childValues.has(X))Y.childValues.set(X,[]);if(mY(X))W8(Y,X);else z8(Y,X);return Y}}function $0(X,Y){if(Q8(X),iY.withValue(X,H0,[X,Y]),W0(X,Y))B0(X);return G8(X.value)}function H0(X,Y){X.recomputing=!0;let{normalizeResult:Z}=X,J;if(Z&&X.value.length===1)J=$8(X.value);X.value.length=0;try{if(X.value[0]=X.fn.apply(null,Y),Z&&J&&!J8(J,X.value))try{X.value[0]=Z(X.value[0],J[0])}catch(G){}}catch(G){X.value[1]=G}X.recomputing=!1}function mY(X){return X.dirty||!!(X.dirtyChildren&&X.dirtyChildren.size)}function B0(X){if(X.dirty=!1,mY(X))return;B8(X)}function H8(X){N5(X,W8)}function B8(X){N5(X,z8)}function N5(X,Y){let Z=X.parents.size;if(Z){let J=bX(X.parents);for(let G=0;G<Z;++G)Y(J[G],X)}}function W8(X,Y){VX(X.childValues.has(Y)),VX(mY(Y));let Z=!mY(X);if(!X.dirtyChildren)X.dirtyChildren=_X.pop()||new Set;else if(X.dirtyChildren.has(Y))return;if(X.dirtyChildren.add(Y),Z)H8(X)}function z8(X,Y){VX(X.childValues.has(Y)),VX(!mY(Y));let Z=X.childValues.get(Y);if(Z.length===0)X.childValues.set(Y,$8(Y.value));else if(!J8(Z,Y.value))X.setDirty();if(U8(X,Y),mY(X))return;B8(X)}function U8(X,Y){let Z=X.dirtyChildren;if(Z){if(Z.delete(Y),Z.size===0){if(_X.length<G0)_X.push(Z);X.dirtyChildren=null}}}function Q8(X){if(X.childValues.size>0)X.childValues.forEach((Y,Z)=>{P8(X,Z)});X.forgetDeps(),VX(X.dirtyChildren===null)}function P8(X,Y){Y.parents.delete(X),X.childValues.delete(Y),U8(X,Y)}function W0(X,Y){if(typeof X.subscribe==="function")try{PX(X),X.unsubscribe=X.subscribe.apply(null,Y)}catch(Z){return X.setDirty(),!1}return!0}var z0={setDirty:!0,dispose:!0,forget:!0};function fX(X){let Y=new Map,Z=X&&X.subscribe;function J(G){let $=iY.getValue();if($){let H=Y.get(G);if(!H)Y.set(G,H=new Set);if($.dependOn(H),typeof Z==="function")PX(H),H.unsubscribe=Z(G)}}return J.dirty=function G($,H){let B=Y.get($);if(B){let z=H&&X8.call(z0,H)?H:"setDirty";bX(B).forEach((W)=>W[z]()),Y.delete($),PX(B)}},J}var V8;function U0(...X){return(V8||(V8=new XY(typeof WeakMap==="function"))).lookupArray(X)}var I5=new Set;function jY(X,{max:Y=Math.pow(2,16),keyArgs:Z,makeCacheKey:J=U0,normalizeResult:G,subscribe:$,cache:H=nY}=Object.create(null)){let B=typeof H==="function"?new H(Y,(P)=>P.dispose()):H,z=function(){let P=J.apply(null,Z?Z.apply(null,arguments):arguments);if(P===void 0)return X.apply(null,arguments);let V=B.get(P);if(!V)B.set(P,V=new vX(X)),V.normalizeResult=G,V.subscribe=$,V.forget=()=>B.delete(P);let q=V.recompute(Array.prototype.slice.call(arguments));if(B.set(P,V),I5.add(B),!iY.hasValue())I5.forEach((D)=>D.clean()),I5.clear();return q};Object.defineProperty(z,"size",{get:()=>B.size,configurable:!1,enumerable:!1}),Object.freeze(z.options={max:Y,keyArgs:Z,makeCacheKey:J,normalizeResult:G,subscribe:$,cache:B});function W(P){let V=P&&B.get(P);if(V)V.setDirty()}z.dirtyKey=W,z.dirty=function P(){W(J.apply(null,arguments))};function U(P){let V=P&&B.get(P);if(V)return V.peek()}z.peekKey=U,z.peek=function P(){return U(J.apply(null,arguments))};function Q(P){return P?B.delete(P):!1}return z.forgetKey=Q,z.forget=function P(){return Q(J.apply(null,arguments))},z.makeCacheKey=J,z.getKey=Z?function P(){return J.apply(null,Z.apply(null,arguments))}:J,Object.freeze(z)}function Q0(X){return X}var gX=function(){function X(Y,Z){if(Z===void 0)Z=Object.create(null);if(this.resultCache=zX?new WeakSet:new Set,this.transform=Y,Z.getCacheKey)this.getCacheKey=Z.getCacheKey;this.cached=Z.cache!==!1,this.resetCache()}return X.prototype.getCacheKey=function(Y){return[Y]},X.identity=function(){return new X(Q0,{cache:!1})},X.split=function(Y,Z,J){if(J===void 0)J=X.identity();return Object.assign(new X(function(G){var $=Y(G)?Z:J;return $.transformDocument(G)},{cache:!1}),{left:Z,right:J})},X.prototype.resetCache=function(){var Y=this;if(this.cached){var Z=new XY($Y);this.performWork=jY(X.prototype.performWork.bind(this),{makeCacheKey:function(J){var G=Y.getCacheKey(J);if(G)return K(Array.isArray(G),105),Z.lookupArray(G)},max:n["documentTransform.cache"],cache:NY})}},X.prototype.performWork=function(Y){return OY(Y),this.transform(Y)},X.prototype.transformDocument=function(Y){if(this.resultCache.has(Y))return Y;var Z=this.performWork(Y);return this.resultCache.add(Z),Z},X.prototype.concat=function(Y){var Z=this;return Object.assign(new X(function(J){return Y.transformDocument(Z.transformDocument(J))},{cache:!1}),{left:this,right:Y})},X}();var yX,TY=Object.assign(function(X){var Y=yX.get(X);if(!Y)Y=MZ(X),yX.set(X,Y);return Y},{reset:function(){yX=new UX(n.print||2000)}});TY.reset();if(globalThis.__DEV__!==!1)TZ("print",function(){return yX?yX.size:0});var v=Array.isArray;function i(X){return Array.isArray(X)&&X.length>0}var E8={kind:R.FIELD,name:{kind:R.NAME,value:"__typename"}};function q8(X,Y){return!X||X.selectionSet.selections.every(function(Z){return Z.kind===R.FRAGMENT_SPREAD&&q8(Y[Z.name.value],Y)})}function P0(X){return q8(BY(X)||hX(X),HY(WY(X)))?null:X}function V0(X){var Y=new Map,Z=new Map;return X.forEach(function(J){if(J){if(J.name)Y.set(J.name,J);else if(J.test)Z.set(J.test,J)}}),function(J){var G=Y.get(J.name.value);if(!G&&Z.size)Z.forEach(function($,H){if(H(J))G=$});return G}}function A8(X){var Y=new Map;return function Z(J){if(J===void 0)J=X;var G=Y.get(J);if(!G)Y.set(J,G={variables:new Set,fragmentSpreads:new Set});return G}}function KZ(X,Y){OY(Y);var Z=A8(""),J=A8(""),G=function(A){for(var F=0,T=void 0;F<A.length&&(T=A[F]);++F){if(v(T))continue;if(T.kind===R.OPERATION_DEFINITION)return Z(T.name&&T.name.value);if(T.kind===R.FRAGMENT_DEFINITION)return J(T.name.value)}return globalThis.__DEV__!==!1&&K.error(125),null},$=0;for(var H=Y.definitions.length-1;H>=0;--H)if(Y.definitions[H].kind===R.OPERATION_DEFINITION)++$;var B=V0(X),z=function(A){return i(A)&&A.map(B).some(function(F){return F&&F.remove})},W=new Map,U=!1,Q={enter:function(A){if(z(A.directives))return U=!0,null}},P=a(Y,{Field:Q,InlineFragment:Q,VariableDefinition:{enter:function(){return!1}},Variable:{enter:function(A,F,T,w,C){var N=G(C);if(N)N.variables.add(A.name.value)}},FragmentSpread:{enter:function(A,F,T,w,C){if(z(A.directives))return U=!0,null;var N=G(C);if(N)N.fragmentSpreads.add(A.name.value)}},FragmentDefinition:{enter:function(A,F,T,w){W.set(JSON.stringify(w),A)},leave:function(A,F,T,w){var C=W.get(JSON.stringify(w));if(A===C)return A;if($>0&&A.selectionSet.selections.every(function(N){return N.kind===R.FIELD&&N.name.value==="__typename"}))return J(A.name.value).removed=!0,U=!0,null}},Directive:{leave:function(A){if(B(A))return U=!0,null}}});if(!U)return Y;var V=function(A){if(!A.transitiveVars){if(A.transitiveVars=new Set(A.variables),!A.removed)A.fragmentSpreads.forEach(function(F){V(J(F)).transitiveVars.forEach(function(T){A.transitiveVars.add(T)})})}return A},q=new Set;P.definitions.forEach(function(A){if(A.kind===R.OPERATION_DEFINITION)V(Z(A.name&&A.name.value)).fragmentSpreads.forEach(function(F){q.add(F)});else if(A.kind===R.FRAGMENT_DEFINITION&&$===0&&!J(A.name.value).removed)q.add(A.name.value)}),q.forEach(function(A){V(J(A)).fragmentSpreads.forEach(function(F){q.add(F)})});var D=function(A){return!!(!q.has(A)||J(A).removed)},M={enter:function(A){if(D(A.name.value))return null}};return P0(a(P,{FragmentSpread:M,FragmentDefinition:M,OperationDefinition:{leave:function(A){if(A.variableDefinitions){var F=V(Z(A.name&&A.name.value)).transitiveVars;if(F.size<A.variableDefinitions.length)return E(E({},A),{variableDefinitions:A.variableDefinitions.filter(function(T){return F.has(T.variable.name.value)})})}}}}))}var tY=Object.assign(function(X){return a(X,{SelectionSet:{enter:function(Y,Z,J){if(J&&J.kind===R.OPERATION_DEFINITION)return;var G=Y.selections;if(!G)return;var $=G.some(function(B){return JY(B)&&(B.name.value==="__typename"||B.name.value.lastIndexOf("__",0)===0)});if($)return;var H=J;if(JY(H)&&H.directives&&H.directives.some(function(B){return B.name.value==="export"}))return;return E(E({},Y),{selections:m(m([],G,!0),[E8],!1)})}}})},{added:function(X){return X===E8}});function O5(X){var Y=LY(X),Z=Y.operation;if(Z==="query")return X;var J=a(X,{OperationDefinition:{enter:function(G){return E(E({},G),{operation:"query"})}}});return J}function mX(X){OY(X);var Y=KZ([{test:function(Z){return Z.name.value==="client"},remove:!0}],X);return Y}function j5(X){return OY(X),a(X,{FragmentSpread:function(Y){var Z;if((Z=Y.directives)===null||Z===void 0?void 0:Z.some(function(J){return J.name.value==="unmask"}))return;return E(E({},Y),{directives:m(m([],Y.directives||[],!0),[{kind:R.DIRECTIVE,name:{kind:R.NAME,value:"nonreactive"}}],!1)})}})}var E0=Object.prototype.hasOwnProperty;function S5(){var X=[];for(var Y=0;Y<arguments.length;Y++)X[Y]=arguments[Y];return eY(X)}function eY(X){var Y=X[0]||{},Z=X.length;if(Z>1){var J=new GY;for(var G=1;G<Z;++G)Y=J.merge(Y,X[G])}return Y}var A0=function(X,Y,Z){return this.merge(X[Z],Y[Z])},GY=function(){function X(Y){if(Y===void 0)Y=A0;this.reconciler=Y,this.isObject=h,this.pastCopies=new Set}return X.prototype.merge=function(Y,Z){var J=this,G=[];for(var $=2;$<arguments.length;$++)G[$-2]=arguments[$];if(h(Z)&&h(Y))return Object.keys(Z).forEach(function(H){if(E0.call(Y,H)){var B=Y[H];if(Z[H]!==B){var z=J.reconciler.apply(J,m([Y,Z,H],G,!1));if(z!==B)Y=J.shallowCopyForMerge(Y),Y[H]=z}}else Y=J.shallowCopyForMerge(Y),Y[H]=Z[H]}),Y;return Z},X.prototype.shallowCopyForMerge=function(Y){if(h(Y)){if(!this.pastCopies.has(Y)){if(Array.isArray(Y))Y=Y.slice(0);else Y=E({__proto__:Object.getPrototypeOf(Y)},Y);this.pastCopies.add(Y)}}return Y},X}();function q0(X,Y){var Z=typeof Symbol!=="undefined"&&X[Symbol.iterator]||X["@@iterator"];if(Z)return(Z=Z.call(X)).next.bind(Z);if(Array.isArray(X)||(Z=D0(X))||Y&&X&&typeof X.length==="number"){if(Z)X=Z;var J=0;return function(){if(J>=X.length)return{done:!0};return{done:!1,value:X[J++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function D0(X,Y){if(!X)return;if(typeof X==="string")return D8(X,Y);var Z=Object.prototype.toString.call(X).slice(8,-1);if(Z==="Object"&&X.constructor)Z=X.constructor.name;if(Z==="Map"||Z==="Set")return Array.from(X);if(Z==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Z))return D8(X,Y)}function D8(X,Y){if(Y==null||Y>X.length)Y=X.length;for(var Z=0,J=new Array(Y);Z<Y;Z++)J[Z]=X[Z];return J}function M8(X,Y){for(var Z=0;Z<Y.length;Z++){var J=Y[Z];if(J.enumerable=J.enumerable||!1,J.configurable=!0,"value"in J)J.writable=!0;Object.defineProperty(X,J.key,J)}}function b5(X,Y,Z){if(Y)M8(X.prototype,Y);if(Z)M8(X,Z);return Object.defineProperty(X,"prototype",{writable:!1}),X}var _5=function(){return typeof Symbol==="function"},v5=function(X){return _5()&&Boolean(Symbol[X])},f5=function(X){return v5(X)?Symbol[X]:"@@"+X};if(_5()&&!v5("observable"))Symbol.observable=Symbol("observable");var M0=f5("iterator"),k5=f5("observable"),L8=f5("species");function CZ(X,Y){var Z=X[Y];if(Z==null)return;if(typeof Z!=="function")throw new TypeError(Z+" is not a function");return Z}function uX(X){var Y=X.constructor;if(Y!==void 0){if(Y=Y[L8],Y===null)Y=void 0}return Y!==void 0?Y:S}function L0(X){return X instanceof S}function EX(X){if(EX.log)EX.log(X);else setTimeout(function(){throw X})}function wZ(X){Promise.resolve().then(function(){try{X()}catch(Y){EX(Y)}})}function T8(X){var Y=X._cleanup;if(Y===void 0)return;if(X._cleanup=void 0,!Y)return;try{if(typeof Y==="function")Y();else{var Z=CZ(Y,"unsubscribe");if(Z)Z.call(Y)}}catch(J){EX(J)}}function h5(X){X._observer=void 0,X._queue=void 0,X._state="closed"}function T0(X){var Y=X._queue;if(!Y)return;X._queue=void 0,X._state="ready";for(var Z=0;Z<Y.length;++Z)if(F8(X,Y[Z].type,Y[Z].value),X._state==="closed")break}function F8(X,Y,Z){X._state="running";var J=X._observer;try{var G=CZ(J,Y);switch(Y){case"next":if(G)G.call(J,Z);break;case"error":if(h5(X),G)G.call(J,Z);else throw Z;break;case"complete":if(h5(X),G)G.call(J);break}}catch($){EX($)}if(X._state==="closed")T8(X);else if(X._state==="running")X._state="ready"}function x5(X,Y,Z){if(X._state==="closed")return;if(X._state==="buffering"){X._queue.push({type:Y,value:Z});return}if(X._state!=="ready"){X._state="buffering",X._queue=[{type:Y,value:Z}],wZ(function(){return T0(X)});return}F8(X,Y,Z)}var F0=function(){function X(Z,J){this._cleanup=void 0,this._observer=Z,this._queue=void 0,this._state="initializing";var G=new K0(this);try{this._cleanup=J.call(void 0,G)}catch($){G.error($)}if(this._state==="initializing")this._state="ready"}var Y=X.prototype;return Y.unsubscribe=function Z(){if(this._state!=="closed")h5(this),T8(this)},b5(X,[{key:"closed",get:function(){return this._state==="closed"}}]),X}(),K0=function(){function X(Z){this._subscription=Z}var Y=X.prototype;return Y.next=function Z(J){x5(this._subscription,"next",J)},Y.error=function Z(J){x5(this._subscription,"error",J)},Y.complete=function Z(){x5(this._subscription,"complete")},b5(X,[{key:"closed",get:function(){return this._subscription._state==="closed"}}]),X}(),S=function(){function X(Z){if(!(this instanceof X))throw new TypeError("Observable cannot be called as a function");if(typeof Z!=="function")throw new TypeError("Observable initializer must be a function");this._subscriber=Z}var Y=X.prototype;return Y.subscribe=function Z(J){if(typeof J!=="object"||J===null)J={next:J,error:arguments[1],complete:arguments[2]};return new F0(J,this._subscriber)},Y.forEach=function Z(J){var G=this;return new Promise(function($,H){if(typeof J!=="function"){H(new TypeError(J+" is not a function"));return}function B(){z.unsubscribe(),$()}var z=G.subscribe({next:function(W){try{J(W,B)}catch(U){H(U),z.unsubscribe()}},error:H,complete:$})})},Y.map=function Z(J){var G=this;if(typeof J!=="function")throw new TypeError(J+" is not a function");var $=uX(this);return new $(function(H){return G.subscribe({next:function(B){try{B=J(B)}catch(z){return H.error(z)}H.next(B)},error:function(B){H.error(B)},complete:function(){H.complete()}})})},Y.filter=function Z(J){var G=this;if(typeof J!=="function")throw new TypeError(J+" is not a function");var $=uX(this);return new $(function(H){return G.subscribe({next:function(B){try{if(!J(B))return}catch(z){return H.error(z)}H.next(B)},error:function(B){H.error(B)},complete:function(){H.complete()}})})},Y.reduce=function Z(J){var G=this;if(typeof J!=="function")throw new TypeError(J+" is not a function");var $=uX(this),H=arguments.length>1,B=!1,z=arguments[1],W=z;return new $(function(U){return G.subscribe({next:function(Q){var P=!B;if(B=!0,!P||H)try{W=J(W,Q)}catch(V){return U.error(V)}else W=Q},error:function(Q){U.error(Q)},complete:function(){if(!B&&!H)return U.error(new TypeError("Cannot reduce an empty sequence"));U.next(W),U.complete()}})})},Y.concat=function Z(){var J=this;for(var G=arguments.length,$=new Array(G),H=0;H<G;H++)$[H]=arguments[H];var B=uX(this);return new B(function(z){var W,U=0;function Q(P){W=P.subscribe({next:function(V){z.next(V)},error:function(V){z.error(V)},complete:function(){if(U===$.length)W=void 0,z.complete();else Q(B.from($[U++]))}})}return Q(J),function(){if(W)W.unsubscribe(),W=void 0}})},Y.flatMap=function Z(J){var G=this;if(typeof J!=="function")throw new TypeError(J+" is not a function");var $=uX(this);return new $(function(H){var B=[],z=G.subscribe({next:function(U){if(J)try{U=J(U)}catch(P){return H.error(P)}var Q=$.from(U).subscribe({next:function(P){H.next(P)},error:function(P){H.error(P)},complete:function(){var P=B.indexOf(Q);if(P>=0)B.splice(P,1);W()}});B.push(Q)},error:function(U){H.error(U)},complete:function(){W()}});function W(){if(z.closed&&B.length===0)H.complete()}return function(){B.forEach(function(U){return U.unsubscribe()}),z.unsubscribe()}})},Y[k5]=function(){return this},X.from=function Z(J){var G=typeof this==="function"?this:X;if(J==null)throw new TypeError(J+" is not an object");var $=CZ(J,k5);if($){var H=$.call(J);if(Object(H)!==H)throw new TypeError(H+" is not an object");if(L0(H)&&H.constructor===G)return H;return new G(function(B){return H.subscribe(B)})}if(v5("iterator")){if($=CZ(J,M0),$)return new G(function(B){wZ(function(){if(B.closed)return;for(var z=q0($.call(J)),W;!(W=z()).done;){var U=W.value;if(B.next(U),B.closed)return}B.complete()})})}if(Array.isArray(J))return new G(function(B){wZ(function(){if(B.closed)return;for(var z=0;z<J.length;++z)if(B.next(J[z]),B.closed)return;B.complete()})});throw new TypeError(J+" is not observable")},X.of=function Z(){for(var J=arguments.length,G=new Array(J),$=0;$<J;$++)G[$]=arguments[$];var H=typeof this==="function"?this:X;return new H(function(B){wZ(function(){if(B.closed)return;for(var z=0;z<G.length;++z)if(B.next(G[z]),B.closed)return;B.complete()})})},b5(X,null,[{key:L8,get:function(){return this}}]),X}();if(_5())Object.defineProperty(S,Symbol("extensions"),{value:{symbol:k5,hostReportError:EX},configurable:!0});function g5(X){var Y,Z=X.Symbol;if(typeof Z==="function")if(Z.observable)Y=Z.observable;else{if(typeof Z.for==="function")Y=Z.for("https://github.com/benlesh/symbol-observable");else Y=Z("https://github.com/benlesh/symbol-observable");try{Z.observable=Y}catch(J){}}else Y="@@observable";return Y}var AX;if(typeof self!=="undefined")AX=self;else if(typeof window!=="undefined")AX=window;else if(typeof global!=="undefined")AX=global;else if(typeof K8!=="undefined")AX=K8;else AX=Function("return this")();var TG=g5(AX);var w8=S.prototype,C8="@@observable";if(!w8[C8])w8[C8]=function(){return this};function y5(X){return X.catch(function(){}),X}var w0=Object.prototype.toString;function RZ(X){return m5(X)}function m5(X,Y){switch(w0.call(X)){case"[object Array]":{if(Y=Y||new Map,Y.has(X))return Y.get(X);var Z=X.slice(0);return Y.set(X,Z),Z.forEach(function(G,$){Z[$]=m5(G,Y)}),Z}case"[object Object]":{if(Y=Y||new Map,Y.has(X))return Y.get(X);var J=Object.create(Object.getPrototypeOf(X));return Y.set(X,J),Object.keys(X).forEach(function(G){J[G]=m5(X[G],Y)}),J}default:return X}}function C0(X){var Y=new Set([X]);return Y.forEach(function(Z){if(h(Z)&&R0(Z)===Z)Object.getOwnPropertyNames(Z).forEach(function(J){if(h(Z[J]))Y.add(Z[J])})}),X}function R0(X){if(globalThis.__DEV__!==!1&&!Object.isFrozen(X))try{Object.freeze(X)}catch(Y){if(Y instanceof TypeError)return null;throw Y}return X}function uY(X){if(globalThis.__DEV__!==!1)C0(X);return X}function YX(X,Y,Z){var J=[];X.forEach(function(G){return G[Y]&&J.push(G)}),J.forEach(function(G){return G[Y](Z)})}function NZ(X,Y,Z){return new S(function(J){var G={then:function(z){return new Promise(function(W){return W(z())})}};function $(z,W){return function(U){if(z){var Q=function(){return J.closed?0:z(U)};G=G.then(Q,Q).then(function(P){return J.next(P)},function(P){return J.error(P)})}else J[W](U)}}var H={next:$(Y,"next"),error:$(Z,"error"),complete:function(){G.then(function(){return J.complete()})}},B=X.subscribe(H);return function(){return B.unsubscribe()}})}function IZ(X){function Y(Z){Object.defineProperty(X,Z,{value:S})}if(A5&&Symbol.species)Y(Symbol.species);return Y("@@species"),X}function R8(X){return X&&typeof X.then==="function"}var XX=function(X){o(Y,X);function Y(Z){var J=X.call(this,function(G){return J.addObserver(G),function(){return J.removeObserver(G)}})||this;if(J.observers=new Set,J.promise=new Promise(function(G,$){J.resolve=G,J.reject=$}),J.handlers={next:function(G){if(J.sub!==null)J.latest=["next",G],J.notify("next",G),YX(J.observers,"next",G)},error:function(G){var $=J.sub;if($!==null){if($)setTimeout(function(){return $.unsubscribe()});J.sub=null,J.latest=["error",G],J.reject(G),J.notify("error",G),YX(J.observers,"error",G)}},complete:function(){var G=J,$=G.sub,H=G.sources,B=H===void 0?[]:H;if($!==null){var z=B.shift();if(!z){if($)setTimeout(function(){return $.unsubscribe()});if(J.sub=null,J.latest&&J.latest[0]==="next")J.resolve(J.latest[1]);else J.resolve();J.notify("complete"),YX(J.observers,"complete")}else if(R8(z))z.then(function(W){return J.sub=W.subscribe(J.handlers)},J.handlers.error);else J.sub=z.subscribe(J.handlers)}}},J.nextResultListeners=new Set,J.cancel=function(G){J.reject(G),J.sources=[],J.handlers.error(G)},J.promise.catch(function(G){}),typeof Z==="function")Z=[new S(Z)];if(R8(Z))Z.then(function(G){return J.start(G)},J.handlers.error);else J.start(Z);return J}return Y.prototype.start=function(Z){if(this.sub!==void 0)return;this.sources=Array.from(Z),this.handlers.complete()},Y.prototype.deliverLastMessage=function(Z){if(this.latest){var J=this.latest[0],G=Z[J];if(G)G.call(Z,this.latest[1]);if(this.sub===null&&J==="next"&&Z.complete)Z.complete()}},Y.prototype.addObserver=function(Z){if(!this.observers.has(Z))this.deliverLastMessage(Z),this.observers.add(Z)},Y.prototype.removeObserver=function(Z){if(this.observers.delete(Z)&&this.observers.size<1)this.handlers.complete()},Y.prototype.notify=function(Z,J){var G=this.nextResultListeners;if(G.size)this.nextResultListeners=new Set,G.forEach(function($){return $(Z,J)})},Y.prototype.beforeNext=function(Z){var J=!1;this.nextResultListeners.add(function(G,$){if(!J)J=!0,Z(G,$)})},Y}(S);IZ(XX);function pY(X){return"incremental"in X}function N0(X){return"hasNext"in X&&"data"in X}function N8(X){return pY(X)||N0(X)}function I8(X){return h(X)&&"payload"in X}function OZ(X,Y){var Z=X,J=new GY;if(pY(Y)&&i(Y.incremental))Y.incremental.forEach(function(G){var{data:$,path:H}=G;for(var B=H.length-1;B>=0;--B){var z=H[B],W=!isNaN(+z),U=W?[]:{};U[z]=$,$=U}Z=J.merge(Z,$)});return Z}function qX(X){var Y=jZ(X);return i(Y)}function jZ(X){var Y=i(X.errors)?X.errors.slice(0):[];if(pY(X)&&i(X.incremental))X.incremental.forEach(function(Z){if(Z.errors)Y.push.apply(Y,Z.errors)});return Y}function KY(){var X=[];for(var Y=0;Y<arguments.length;Y++)X[Y]=arguments[Y];var Z=Object.create(null);return X.forEach(function(J){if(!J)return;Object.keys(J).forEach(function(G){var $=J[G];if($!==void 0)Z[G]=$})}),Z}function pX(X,Y){return KY(X,Y,Y.variables&&{variables:KY(E(E({},X&&X.variables),Y.variables))})}function dX(X){return new S(function(Y){Y.error(X)})}var SZ=function(X,Y,Z){var J=new Error(Z);throw J.name="ServerError",J.response=X,J.statusCode=X.status,J.result=Y,J};function u5(X){var Y=["query","operationName","variables","extensions","context"];for(var Z=0,J=Object.keys(X);Z<J.length;Z++){var G=J[Z];if(Y.indexOf(G)<0)throw f(58,G)}return X}function p5(X,Y){var Z=E({},X),J=function($){if(typeof $==="function")Z=E(E({},Z),$(Z));else Z=E(E({},Z),$)},G=function(){return E({},Z)};return Object.defineProperty(Y,"setContext",{enumerable:!1,value:J}),Object.defineProperty(Y,"getContext",{enumerable:!1,value:G}),Y}function d5(X){var Y={variables:X.variables||{},extensions:X.extensions||{},operationName:X.operationName,query:X.query};if(!Y.operationName)Y.operationName=typeof Y.query!=="string"?yY(Y.query)||void 0:"";return Y}function c5(X,Y){var Z=E({},X),J=new Set(Object.keys(X));return a(Y,{Variable:function(G,$,H){if(H&&H.kind!=="VariableDefinition")J.delete(G.name.value)}}),J.forEach(function(G){delete Z[G]}),Z}var I0=Symbol.for("apollo.deprecations"),O0=bY,l5=new QY;function j0(X){return O0[I0]||(l5.getValue()||[]).includes(X)}function d(X){var Y=[];for(var Z=1;Z<arguments.length;Z++)Y[Z-1]=arguments[Z];return l5.withValue.apply(l5,m([Array.isArray(X)?X:[X]],Y,!1))}function y(X,Y,Z,J){if(J===void 0)J="Please remove this option.";SY(Y,function(){if(Y in X)globalThis.__DEV__!==!1&&K.warn(104,Z,Y,J)})}function SY(X,Y){if(!j0(X))Y()}function O8(X,Y){return Y?Y(X):S.of()}function cX(X){return typeof X==="function"?new PY(X):X}function xZ(X){return X.request.length<=1}var PY=function(){function X(Y){if(Y)this.request=Y}return X.empty=function(){return new X(function(){return S.of()})},X.from=function(Y){if(Y.length===0)return X.empty();return Y.map(cX).reduce(function(Z,J){return Z.concat(J)})},X.split=function(Y,Z,J){var G=cX(Z),$=cX(J||new X(O8)),H;if(xZ(G)&&xZ($))H=new X(function(B){return Y(B)?G.request(B)||S.of():$.request(B)||S.of()});else H=new X(function(B,z){return Y(B)?G.request(B,z)||S.of():$.request(B,z)||S.of()});return Object.assign(H,{left:G,right:$})},X.execute=function(Y,Z){return Y.request(p5(Z.context,d5(u5(Z))))||S.of()},X.concat=function(Y,Z){var J=cX(Y);if(xZ(J))return globalThis.__DEV__!==!1&&K.warn(47,J),J;var G=cX(Z),$;if(xZ(G))$=new X(function(H){return J.request(H,function(B){return G.request(B)||S.of()})||S.of()});else $=new X(function(H,B){return J.request(H,function(z){return G.request(z,B)||S.of()})||S.of()});return Object.assign($,{left:J,right:G})},X.prototype.split=function(Y,Z,J){return this.concat(X.split(Y,Z,J||new X(O8)))},X.prototype.concat=function(Y){return X.concat(this,Y)},X.prototype.request=function(Y,Z){throw f(48)},X.prototype.onError=function(Y,Z){if(globalThis.__DEV__!==!1)SY("onError",function(){globalThis.__DEV__!==!1&&K.warn(49)});if(Z&&Z.error)return Z.error(Y),!1;throw Y},X.prototype.setOnError=function(Y){if(globalThis.__DEV__!==!1)globalThis.__DEV__!==!1&&K.warn(50);return this.onError=Y,this},X}();var DX=PY.execute;function s5(X){var Y,Z=X[Symbol.asyncIterator]();return Y={next:function(){return Z.next()}},Y[Symbol.asyncIterator]=function(){return this},Y}function a5(X){var Y=null,Z=null,J=!1,G=[],$=[];function H(Q){if(Z)return;if($.length){var P=$.shift();if(Array.isArray(P)&&P[0])return P[0]({value:Q,done:!1})}G.push(Q)}function B(Q){Z=Q;var P=$.slice();P.forEach(function(V){V[1](Q)}),!Y||Y()}function z(){J=!0;var Q=$.slice();Q.forEach(function(P){P[0]({value:void 0,done:!0})}),!Y||Y()}Y=function(){Y=null,X.removeListener("data",H),X.removeListener("error",B),X.removeListener("end",z),X.removeListener("finish",z),X.removeListener("close",z)},X.on("data",H),X.on("error",B),X.on("end",z),X.on("finish",z),X.on("close",z);function W(){return new Promise(function(Q,P){if(Z)return P(Z);if(G.length)return Q({value:G.shift(),done:!1});if(J)return Q({value:void 0,done:!0});$.push([Q,P])})}var U={next:function(){return W()}};if(vY)U[Symbol.asyncIterator]=function(){return this};return U}function n5(X){var Y=!1,Z={next:function(){if(Y)return Promise.resolve({value:void 0,done:!0});return Y=!0,new Promise(function(J,G){X.then(function($){J({value:$,done:!1})}).catch(G)})}};if(vY)Z[Symbol.asyncIterator]=function(){return this};return Z}function kZ(X){var Y={next:function(){return X.read()}};if(vY)Y[Symbol.asyncIterator]=function(){return this};return Y}function S0(X){return!!X.body}function x0(X){return!!X.getReader}function k0(X){return!!(vY&&X[Symbol.asyncIterator])}function h0(X){return!!X.stream}function b0(X){return!!X.arrayBuffer}function _0(X){return!!X.pipe}function j8(X){var Y=X;if(S0(X))Y=X.body;if(k0(Y))return s5(Y);if(x0(Y))return kZ(Y.getReader());if(h0(Y))return kZ(Y.stream().getReader());if(b0(Y))return n5(Y.arrayBuffer());if(_0(Y))return a5(Y);throw new Error("Unknown body type for responseIterator. Please pass a streamable response.")}var lX=Symbol();function S8(X){if(X.extensions)return Array.isArray(X.extensions[lX]);return!1}function hZ(X){return X.hasOwnProperty("graphQLErrors")}var v0=function(X){var Y=m(m(m([],X.graphQLErrors,!0),X.clientErrors,!0),X.protocolErrors,!0);if(X.networkError)Y.push(X.networkError);return Y.map(function(Z){return h(Z)&&Z.message||"Error message not found."}).join("\n")},xY=function(X){o(Y,X);function Y(Z){var{graphQLErrors:J,protocolErrors:G,clientErrors:$,networkError:H,errorMessage:B,extraInfo:z}=Z,W=X.call(this,B)||this;return W.name="ApolloError",W.graphQLErrors=J||[],W.protocolErrors=G||[],W.clientErrors=$||[],W.networkError=H||null,W.message=B||v0(W),W.extraInfo=z,W.cause=m(m(m([H],J||[],!0),G||[],!0),$||[],!0).find(function(U){return!!U})||null,W.__proto__=Y.prototype,W}return Y}(Error);var x8=Object.prototype.hasOwnProperty;function k8(X,Y){return EY(this,void 0,void 0,function(){var Z,J,G,$,H,B,z,W,U,Q,P,V,q,D,M,A,F,T,w,C,N,O,j,g;return AY(this,function(p){switch(p.label){case 0:if(TextDecoder===void 0)throw new Error("TextDecoder must be defined in the environment: please import a polyfill.");Z=new TextDecoder("utf-8"),J=(g=X.headers)===null||g===void 0?void 0:g.get("content-type"),G="boundary=",$=(J===null||J===void 0?void 0:J.includes(G))?J===null||J===void 0?void 0:J.substring((J===null||J===void 0?void 0:J.indexOf(G))+G.length).replace(/['"]/g,"").replace(/\;(.*)/gm,"").trim():"-",H="\r\n--".concat($),B="",z=j8(X),W=!0,p.label=1;case 1:if(!W)return[3,3];return[4,z.next()];case 2:U=p.sent(),Q=U.value,P=U.done,V=typeof Q==="string"?Q:Z.decode(Q),q=B.length-H.length+1,W=!P,B+=V,D=B.indexOf(H,q);while(D>-1){if(M=void 0,O=[B.slice(0,D),B.slice(D+H.length)],M=O[0],B=O[1],A=M.indexOf("\r\n\r\n"),F=f0(M.slice(0,A)),T=F["content-type"],T&&T.toLowerCase().indexOf("application/json")===-1)throw new Error("Unsupported patch content type: application/json is required.");if(w=M.slice(A),w){if(C=h8(X,w),Object.keys(C).length>1||"data"in C||"incremental"in C||"errors"in C||"payload"in C)if(I8(C)){if(N={},"payload"in C){if(Object.keys(C).length===1&&C.payload===null)return[2];N=E({},C.payload)}if("errors"in C)N=E(E({},N),{extensions:E(E({},"extensions"in N?N.extensions:null),(j={},j[lX]=C.errors,j))});Y(N)}else Y(C);else if(Object.keys(C).length===1&&"hasNext"in C&&!C.hasNext)return[2]}D=B.indexOf(H)}return[3,1];case 3:return[2]}})})}function f0(X){var Y={};return X.split("\n").forEach(function(Z){var J=Z.indexOf(":");if(J>-1){var G=Z.slice(0,J).trim().toLowerCase(),$=Z.slice(J+1).trim();Y[G]=$}}),Y}function h8(X,Y){if(X.status>=300){var Z=function(){try{return JSON.parse(Y)}catch(G){return Y}};SZ(X,Z(),"Response not successful: Received status code ".concat(X.status))}try{return JSON.parse(Y)}catch(G){var J=G;throw J.name="ServerParseError",J.response=X,J.statusCode=X.status,J.bodyText=Y,J}}function b8(X,Y){if(X.result&&X.result.errors&&X.result.data)Y.next(X.result);Y.error(X)}function _8(X){return function(Y){return Y.text().then(function(Z){return h8(Y,Z)}).then(function(Z){if(!Array.isArray(Z)&&!x8.call(Z,"data")&&!x8.call(Z,"errors"))SZ(Y,Z,"Server response was missing for query '".concat(Array.isArray(X)?X.map(function(J){return J.operationName}):X.operationName,"'."));return Z})}}var sX=function(X,Y){var Z;try{Z=JSON.stringify(X)}catch(G){var J=f(54,Y,G.message);throw J.parseError=G,J}return Z};var g0={includeQuery:!0,includeExtensions:!1,preserveHeaderCase:!1},y0={accept:"*/*","content-type":"application/json"},m0={method:"POST"},v8={http:g0,headers:y0,options:m0},f8=function(X,Y){return Y(X)};function g8(X,Y){var Z=[];for(var J=2;J<arguments.length;J++)Z[J-2]=arguments[J];var G={},$={};if(Z.forEach(function(Q){if(G=E(E(E({},G),Q.options),{headers:E(E({},G.headers),Q.headers)}),Q.credentials)G.credentials=Q.credentials;$=E(E({},$),Q.http)}),G.headers)G.headers=u0(G.headers,$.preserveHeaderCase);var{operationName:H,extensions:B,variables:z,query:W}=X,U={operationName:H,variables:z};if($.includeExtensions)U.extensions=B;if($.includeQuery)U.query=Y(W,TY);return{options:G,body:U}}function u0(X,Y){if(!Y){var Z={};return Object.keys(Object(X)).forEach(function($){Z[$.toLowerCase()]=X[$]}),Z}var J={};Object.keys(Object(X)).forEach(function($){J[$.toLowerCase()]={originalName:$,value:X[$]}});var G={};return Object.keys(J).forEach(function($){G[J[$].originalName]=J[$].value}),G}var y8=function(X){if(!X&&typeof fetch==="undefined")throw f(51)};var m8=function(X,Y){var Z=X.getContext(),J=Z.uri;if(J)return J;else if(typeof Y==="function")return Y(X);else return Y||"/graphql"};function u8(X,Y){var Z=[],J=function(Q,P){Z.push("".concat(Q,"=").concat(encodeURIComponent(P)))};if("query"in Y)J("query",Y.query);if(Y.operationName)J("operationName",Y.operationName);if(Y.variables){var G=void 0;try{G=sX(Y.variables,"Variables map")}catch(Q){return{parseError:Q}}J("variables",G)}if(Y.extensions){var $=void 0;try{$=sX(Y.extensions,"Extensions map")}catch(Q){return{parseError:Q}}J("extensions",$)}var H="",B=X,z=X.indexOf("#");if(z!==-1)H=X.substr(z),B=X.substr(0,z);var W=B.indexOf("?")===-1?"?":"&",U=B+W+Z.join("&")+H;return{newURI:U}}var p8=e(function(){return fetch}),d8=function(X){if(X===void 0)X={};var Y=X.uri,Z=Y===void 0?"/graphql":Y,J=X.fetch,G=X.print,$=G===void 0?f8:G,H=X.includeExtensions,B=X.preserveHeaderCase,z=X.useGETForQueries,W=X.includeUnusedVariables,U=W===void 0?!1:W,Q=t(X,["uri","fetch","print","includeExtensions","preserveHeaderCase","useGETForQueries","includeUnusedVariables"]);if(globalThis.__DEV__!==!1)y8(J||p8);var P={http:{includeExtensions:H,preserveHeaderCase:B},options:Q.fetchOptions,credentials:Q.credentials,headers:Q.headers};return new PY(function(V){var q=m8(V,Z),D=V.getContext(),M={};if(D.clientAwareness){var A=D.clientAwareness,F=A.name,T=A.version;if(F)M["apollographql-client-name"]=F;if(T)M["apollographql-client-version"]=T}var w=E(E({},M),D.headers),C={http:D.http,options:D.fetchOptions,credentials:D.credentials,headers:w};if(CY(["client"],V.query)){if(globalThis.__DEV__!==!1)globalThis.__DEV__!==!1&&K.warn(52);var N=mX(V.query);if(!N)return dX(new Error("HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`."));V.query=N}var O=g8(V,$,v8,P,C),j=O.options,g=O.body;if(g.variables&&!U)g.variables=c5(g.variables,V.query);var p;if(!j.signal&&typeof AbortController!=="undefined")p=new AbortController,j.signal=p.signal;var kY=function(UY){return UY.kind==="OperationDefinition"&&UY.operation==="mutation"},VY=function(UY){return UY.kind==="OperationDefinition"&&UY.operation==="subscription"},s=VY(LY(V.query)),zY=CY(["defer"],V.query);if(z&&!V.query.definitions.some(kY))j.method="GET";if(zY||s){j.headers=j.headers||{};var Y5="multipart/mixed;";if(s&&zY)globalThis.__DEV__!==!1&&K.warn(53);if(s)Y5+="boundary=graphql;subscriptionSpec=1.0,application/json";else if(zY)Y5+="deferSpec=20220824,application/json";j.headers.accept=Y5}if(j.method==="GET"){var q6=u8(q,g),b9=q6.newURI,D6=q6.parseError;if(D6)return dX(D6);q=b9}else try{j.body=sX(g,"Payload")}catch(UY){return dX(UY)}return new S(function(UY){var _9=J||e(function(){return fetch})||p8,M6=UY.next.bind(UY);return _9(q,j).then(function(JX){var X5;V.setContext({response:JX});var L6=(X5=JX.headers)===null||X5===void 0?void 0:X5.get("content-type");if(L6!==null&&/^multipart\/mixed/i.test(L6))return k8(JX,M6);else return _8(V)(JX).then(M6)}).then(function(){p=void 0,UY.complete()}).catch(function(JX){p=void 0,b8(JX,UY)}),function(){if(p)p.abort()}})})};var aX=function(X){o(Y,X);function Y(Z){if(Z===void 0)Z={};var J=X.call(this,d8(Z).request)||this;return J.options=Z,J}return Y}(PY);var{toString:c8,hasOwnProperty:p0}=Object.prototype,l8=Function.prototype.toString,o5=new Map;function _(X,Y){try{return r5(X,Y)}finally{o5.clear()}}var nX=_;function r5(X,Y){if(X===Y)return!0;let Z=c8.call(X),J=c8.call(Y);if(Z!==J)return!1;switch(Z){case"[object Array]":if(X.length!==Y.length)return!1;case"[object Object]":{if(a8(X,Y))return!0;let G=s8(X),$=s8(Y),H=G.length;if(H!==$.length)return!1;for(let B=0;B<H;++B)if(!p0.call(Y,G[B]))return!1;for(let B=0;B<H;++B){let z=G[B];if(!r5(X[z],Y[z]))return!1}return!0}case"[object Error]":return X.name===Y.name&&X.message===Y.message;case"[object Number]":if(X!==X)return Y!==Y;case"[object Boolean]":case"[object Date]":return+X===+Y;case"[object RegExp]":case"[object String]":return X==`${Y}`;case"[object Map]":case"[object Set]":{if(X.size!==Y.size)return!1;if(a8(X,Y))return!0;let G=X.entries(),$=Z==="[object Map]";while(!0){let H=G.next();if(H.done)break;let[B,z]=H.value;if(!Y.has(B))return!1;if($&&!r5(z,Y.get(B)))return!1}return!0}case"[object Uint16Array]":case"[object Uint8Array]":case"[object Uint32Array]":case"[object Int32Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object ArrayBuffer]":X=new Uint8Array(X),Y=new Uint8Array(Y);case"[object DataView]":{let G=X.byteLength;if(G===Y.byteLength)while(G--&&X[G]===Y[G]);return G===-1}case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":{let G=l8.call(X);if(G!==l8.call(Y))return!1;return!l0(G,c0)}}return!1}function s8(X){return Object.keys(X).filter(d0,X)}function d0(X){return this[X]!==void 0}var c0="{ [native code] }";function l0(X,Y){let Z=X.length-Y.length;return Z>=0&&X.indexOf(Y,Z)===Z}function a8(X,Y){let Z=o5.get(X);if(Z){if(Z.has(Y))return!0}else o5.set(X,Z=new Set);return Z.add(Y),!1}function _Z(X,Y,Z,J){var G=Y.data,$=t(Y,["data"]),H=Z.data,B=t(Z,["data"]);return nX($,B)&&bZ(LY(X).selectionSet,G,H,{fragmentMap:HY(WY(X)),variables:J})}function bZ(X,Y,Z,J){if(Y===Z)return!0;var G=new Set;return X.selections.every(function($){if(G.has($))return!0;if(G.add($),!DY($,J.variables))return!0;if(n8($))return!0;if(JY($)){var H=YY($),B=Y&&Y[H],z=Z&&Z[H],W=$.selectionSet;if(!W)return nX(B,z);var U=Array.isArray(B),Q=Array.isArray(z);if(U!==Q)return!1;if(U&&Q){var P=B.length;if(z.length!==P)return!1;for(var V=0;V<P;++V)if(!bZ(W,B[V],z[V],J))return!1;return!0}return bZ(W,B,z,J)}else{var q=RY($,J.fragmentMap);if(q){if(n8(q))return!0;return bZ(q.selectionSet,Y,Z,J)}}})}function n8(X){return!!X.directives&&X.directives.some(s0)}function s0(X){return X.name.value==="nonreactive"}var vZ=$Y?WeakMap:Map,fZ=zX?WeakSet:Set,MX=new QY,o8=!1;function gZ(){if(!o8)o8=!0,globalThis.__DEV__!==!1&&K.warn(64)}function yZ(X,Y,Z){return MX.withValue(!0,function(){var J=oX(X,Y,Z,!1);if(Object.isFrozen(X))uY(J);return J})}function a0(X,Y){if(Y.has(X))return Y.get(X);var Z=Array.isArray(X)?[]:Object.create(null);return Y.set(X,Z),Z}function oX(X,Y,Z,J,G){var $,H=Z.knownChanged,B=a0(X,Z.mutableTargets);if(Array.isArray(X)){for(var z=0,W=Array.from(X.entries());z<W.length;z++){var U=W[z],Q=U[0],P=U[1];if(P===null){B[Q]=null;continue}var V=oX(P,Y,Z,J,globalThis.__DEV__!==!1?"".concat(G||"","[").concat(Q,"]"):void 0);if(H.has(V))H.add(B);B[Q]=V}return H.has(B)?B:X}for(var q=0,D=Y.selections;q<D.length;q++){var M=D[q],A=void 0;if(J)H.add(B);if(M.kind===R.FIELD){var F=YY(M),T=M.selectionSet;if(A=B[F]||X[F],A===void 0)continue;if(T&&A!==null){var V=oX(X[F],T,Z,J,globalThis.__DEV__!==!1?"".concat(G||"",".").concat(F):void 0);if(H.has(V))A=V}if(globalThis.__DEV__===!1)B[F]=A;if(globalThis.__DEV__!==!1)if(J&&F!=="__typename"&&!(($=Object.getOwnPropertyDescriptor(B,F))===null||$===void 0?void 0:$.value))Object.defineProperty(B,F,n0(F,A,G||"",Z.operationName,Z.operationType));else delete B[F],B[F]=A}if(M.kind===R.INLINE_FRAGMENT&&(!M.typeCondition||Z.cache.fragmentMatches(M,X.__typename)))A=oX(X,M.selectionSet,Z,J,G);if(M.kind===R.FRAGMENT_SPREAD){var w=M.name.value,C=Z.fragmentMap[w]||(Z.fragmentMap[w]=Z.cache.lookupFragment(w));K(C,59,w);var N=E5(M);if(N!=="mask")A=oX(X,C.selectionSet,Z,N==="migrate",G)}if(H.has(A))H.add(B)}if("__typename"in X&&!("__typename"in B))B.__typename=X.__typename;if(Object.keys(B).length!==Object.keys(X).length)H.add(B);return H.has(B)?B:X}function n0(X,Y,Z,J,G){var $=function(){if(MX.getValue())return Y;return globalThis.__DEV__!==!1&&K.warn(60,J?"".concat(G," '").concat(J,"'"):"anonymous ".concat(G),"".concat(Z,".").concat(X).replace(/^\./,"")),$=function(){return Y},Y};return{get:function(){return $()},set:function(H){$=function(){return H}},enumerable:!0,configurable:!0}}function rX(X,Y,Z,J){if(!Z.fragmentMatches){if(globalThis.__DEV__!==!1)gZ();return X}var G=Y.definitions.filter(function(H){return H.kind===R.FRAGMENT_DEFINITION});if(typeof J==="undefined")K(G.length===1,61,G.length),J=G[0].name.value;var $=G.find(function(H){return H.name.value===J});if(K(!!$,62,J),X==null)return X;if(nX(X,{}))return X;return yZ(X,$.selectionSet,{operationType:"fragment",operationName:$.name.value,fragmentMap:HY(WY(Y)),cache:Z,mutableTargets:new vZ,knownChanged:new fZ})}function i5(X,Y,Z){var J;if(!Z.fragmentMatches){if(globalThis.__DEV__!==!1)gZ();return X}var G=BY(Y);if(K(G,63),X==null)return X;return yZ(X,G.selectionSet,{operationType:G.operation,operationName:(J=G.name)===null||J===void 0?void 0:J.value,fragmentMap:HY(WY(Y)),cache:Z,mutableTargets:new vZ,knownChanged:new fZ})}var mZ=function(){function X(){this.assumeImmutableResults=!1,this.getFragmentDoc=jY(q5,{max:n["cache.fragmentQueryDocuments"]||1000,cache:NY})}return X.prototype.lookupFragment=function(Y){return null},X.prototype.batch=function(Y){var Z=this,J=typeof Y.optimistic==="string"?Y.optimistic:Y.optimistic===!1?null:void 0,G;return this.performTransaction(function(){return G=Y.update(Z)},J),G},X.prototype.recordOptimisticTransaction=function(Y,Z){this.performTransaction(Y,Z)},X.prototype.transformDocument=function(Y){return Y},X.prototype.transformForLink=function(Y){return Y},X.prototype.identify=function(Y){return},X.prototype.gc=function(){return[]},X.prototype.modify=function(Y){return!1},X.prototype.readQuery=function(Y,Z){var J=this;if(Z===void 0)Z=!!Y.optimistic;if(globalThis.__DEV__!==!1)y(Y,"canonizeResults","cache.readQuery");return d("canonizeResults",function(){return J.read(E(E({},Y),{rootId:Y.id||"ROOT_QUERY",optimistic:Z}))})},X.prototype.watchFragment=function(Y){var Z=this,J=Y.fragment,G=Y.fragmentName,$=Y.from,H=Y.optimistic,B=H===void 0?!0:H,z=t(Y,["fragment","fragmentName","from","optimistic"]),W=this.getFragmentDoc(J,G),U=typeof $==="undefined"||typeof $==="string"?$:this.identify($),Q=!!Y[Symbol.for("apollo.dataMasking")];if(globalThis.__DEV__!==!1){var P=G||hX(J).name.value;if(!U)globalThis.__DEV__!==!1&&K.warn(1,P)}var V=E(E({},z),{returnPartialData:!0,id:U,query:W,optimistic:B}),q;return new S(function(D){return Z.watch(E(E({},V),{immediate:!0,callback:function(M){var A=Q?rX(M.result,J,Z,G):M.result;if(q&&_Z(W,{data:q.result},{data:A},Y.variables))return;var F={data:A,complete:!!M.complete};if(M.missing)F.missing=eY(M.missing.map(function(T){return T.missing}));q=E(E({},M),{result:A}),D.next(F)}}))})},X.prototype.readFragment=function(Y,Z){var J=this;if(Z===void 0)Z=!!Y.optimistic;if(globalThis.__DEV__!==!1)y(Y,"canonizeResults","cache.readFragment");return d("canonizeResults",function(){return J.read(E(E({},Y),{query:J.getFragmentDoc(Y.fragment,Y.fragmentName),rootId:Y.id,optimistic:Z}))})},X.prototype.writeQuery=function(Y){var{id:Z,data:J}=Y,G=t(Y,["id","data"]);return this.write(Object.assign(G,{dataId:Z||"ROOT_QUERY",result:J}))},X.prototype.writeFragment=function(Y){var{id:Z,data:J,fragment:G,fragmentName:$}=Y,H=t(Y,["id","data","fragment","fragmentName"]);return this.write(Object.assign(H,{query:this.getFragmentDoc(G,$),dataId:Z,result:J}))},X.prototype.updateQuery=function(Y,Z){if(globalThis.__DEV__!==!1)y(Y,"canonizeResults","cache.updateQuery");return this.batch({update:function(J){var G=d("canonizeResults",function(){return J.readQuery(Y)}),$=Z(G);if($===void 0||$===null)return G;return J.writeQuery(E(E({},Y),{data:$})),$}})},X.prototype.updateFragment=function(Y,Z){if(globalThis.__DEV__!==!1)y(Y,"canonizeResults","cache.updateFragment");return this.batch({update:function(J){var G=d("canonizeResults",function(){return J.readFragment(Y)}),$=Z(G);if($===void 0||$===null)return G;return J.writeFragment(E(E({},Y),{data:$})),$}})},X}();if(globalThis.__DEV__!==!1)mZ.prototype.getMemoryInternals=n6;var iX=function(X){o(Y,X);function Y(Z,J,G,$){var H,B=X.call(this,Z)||this;if(B.message=Z,B.path=J,B.query=G,B.variables=$,Array.isArray(B.path)){B.missing=B.message;for(var z=B.path.length-1;z>=0;--z)B.missing=(H={},H[B.path[z]]=B.missing,H)}else B.missing=B.path;return B.__proto__=Y.prototype,B}return Y}(Error);var u=Object.prototype.hasOwnProperty;function tX(X){return X===null||X===void 0}function pZ(X,Y){var{__typename:Z,id:J,_id:G}=X;if(typeof Z==="string"){if(Y)Y.keyObject=!tX(J)?{id:J}:!tX(G)?{_id:G}:void 0;if(tX(J)&&!tX(G))J=G;if(!tX(J))return"".concat(Z,":").concat(typeof J==="number"||typeof J==="string"?J:JSON.stringify(J))}}var r8={dataIdFromObject:pZ,addTypename:!0,resultCaching:!0,canonizeResults:!1};function i8(X){return KY(r8,X)}function dZ(X){var Y=X.canonizeResults;return Y===void 0?r8.canonizeResults:Y}function t8(X,Y){return x(Y)?X.get(Y.__ref,"__typename"):Y&&Y.__typename}var t5=/^[_a-z][_0-9a-z]*/i;function FY(X){var Y=X.match(t5);return Y?Y[0]:X}function uZ(X,Y,Z){if(h(Y))return v(Y)?Y.every(function(J){return uZ(X,J,Z)}):X.selections.every(function(J){if(JY(J)&&DY(J,Z)){var G=YY(J);return u.call(Y,G)&&(!J.selectionSet||uZ(J.selectionSet,Y[G],Z))}return!0});return!1}function dY(X){return h(X)&&!x(X)&&!v(X)}function e8(){return new GY}function cZ(X,Y){var Z=HY(WY(X));return{fragmentMap:Z,lookupFragment:function(J){var G=Z[J];if(!G&&Y)G=Y.lookup(J);return G||null}}}var lZ=Object.create(null),e5=function(){return lZ},Y9=Object.create(null),LX=function(){function X(Y,Z){var J=this;this.policies=Y,this.group=Z,this.data=Object.create(null),this.rootIds=Object.create(null),this.refs=Object.create(null),this.getFieldValue=function(G,$){return uY(x(G)?J.get(G.__ref,$):G&&G[$])},this.canRead=function(G){return x(G)?J.has(G.__ref):typeof G==="object"},this.toReference=function(G,$){if(typeof G==="string")return MY(G);if(x(G))return G;var H=J.policies.identify(G)[0];if(H){var B=MY(H);if($)J.merge(H,G);return B}}}return X.prototype.toObject=function(){return E({},this.data)},X.prototype.has=function(Y){return this.lookup(Y,!0)!==void 0},X.prototype.get=function(Y,Z){if(this.group.depend(Y,Z),u.call(this.data,Y)){var J=this.data[Y];if(J&&u.call(J,Z))return J[Z]}if(Z==="__typename"&&u.call(this.policies.rootTypenamesById,Y))return this.policies.rootTypenamesById[Y];if(this instanceof cY)return this.parent.get(Y,Z)},X.prototype.lookup=function(Y,Z){if(Z)this.group.depend(Y,"__exists");if(u.call(this.data,Y))return this.data[Y];if(this instanceof cY)return this.parent.lookup(Y,Z);if(this.policies.rootTypenamesById[Y])return Object.create(null)},X.prototype.merge=function(Y,Z){var J=this,G;if(x(Y))Y=Y.__ref;if(x(Z))Z=Z.__ref;var $=typeof Y==="string"?this.lookup(G=Y):Y,H=typeof Z==="string"?this.lookup(G=Z):Z;if(!H)return;K(typeof G==="string",2);var B=new GY(r0).merge($,H);if(this.data[G]=B,B!==$){if(delete this.refs[G],this.group.caching){var z=Object.create(null);if(!$)z.__exists=1;if(Object.keys(H).forEach(function(W){if(!$||$[W]!==B[W]){z[W]=1;var U=FY(W);if(U!==W&&!J.policies.hasKeyArgs(B.__typename,U))z[U]=1;if(B[W]===void 0&&!(J instanceof cY))delete B[W]}}),z.__typename&&!($&&$.__typename)&&this.policies.rootTypenamesById[G]===B.__typename)delete z.__typename;Object.keys(z).forEach(function(W){return J.group.dirty(G,W)})}}},X.prototype.modify=function(Y,Z){var J=this,G=this.lookup(Y);if(G){var $=Object.create(null),H=!1,B=!0,z={DELETE:lZ,INVALIDATE:Y9,isReference:x,toReference:this.toReference,canRead:this.canRead,readField:function(W,U){return J.policies.readField(typeof W==="string"?{fieldName:W,from:U||MY(Y)}:W,{store:J})}};if(Object.keys(G).forEach(function(W){var U=FY(W),Q=G[W];if(Q===void 0)return;var P=typeof Z==="function"?Z:Z[W]||Z[U];if(P){var V=P===e5?lZ:P(uY(Q),E(E({},z),{fieldName:U,storeFieldName:W,storage:J.getStorage(Y,W)}));if(V===Y9)J.group.dirty(Y,W);else{if(V===lZ)V=void 0;if(V!==Q){if($[W]=V,H=!0,Q=V,globalThis.__DEV__!==!1){var q=function(C){if(J.lookup(C.__ref)===void 0)return globalThis.__DEV__!==!1&&K.warn(3,C),!0};if(x(V))q(V);else if(Array.isArray(V)){var D=!1,M=void 0;for(var A=0,F=V;A<F.length;A++){var T=F[A];if(x(T)){if(D=!0,q(T))break}else if(typeof T==="object"&&!!T){var w=J.policies.identify(T)[0];if(w)M=T}if(D&&M!==void 0){globalThis.__DEV__!==!1&&K.warn(4,M);break}}}}}}}if(Q!==void 0)B=!1}),H){if(this.merge(Y,$),B){if(this instanceof cY)this.data[Y]=void 0;else delete this.data[Y];this.group.dirty(Y,"__exists")}return!0}}return!1},X.prototype.delete=function(Y,Z,J){var G,$=this.lookup(Y);if($){var H=this.getFieldValue($,"__typename"),B=Z&&J?this.policies.getStoreFieldName({typename:H,fieldName:Z,args:J}):Z;return this.modify(Y,B?(G={},G[B]=e5,G):e5)}return!1},X.prototype.evict=function(Y,Z){var J=!1;if(Y.id){if(u.call(this.data,Y.id))J=this.delete(Y.id,Y.fieldName,Y.args);if(this instanceof cY&&this!==Z)J=this.parent.evict(Y,Z)||J;if(Y.fieldName||J)this.group.dirty(Y.id,Y.fieldName||"__exists")}return J},X.prototype.clear=function(){this.replace(null)},X.prototype.extract=function(){var Y=this,Z=this.toObject(),J=[];if(this.getRootIdSet().forEach(function(G){if(!u.call(Y.policies.rootTypenamesById,G))J.push(G)}),J.length)Z.__META={extraRootIds:J.sort()};return Z},X.prototype.replace=function(Y){var Z=this;if(Object.keys(this.data).forEach(function($){if(!(Y&&u.call(Y,$)))Z.delete($)}),Y){var J=Y.__META,G=t(Y,["__META"]);if(Object.keys(G).forEach(function($){Z.merge($,G[$])}),J)J.extraRootIds.forEach(this.retain,this)}},X.prototype.retain=function(Y){return this.rootIds[Y]=(this.rootIds[Y]||0)+1},X.prototype.release=function(Y){if(this.rootIds[Y]>0){var Z=--this.rootIds[Y];if(!Z)delete this.rootIds[Y];return Z}return 0},X.prototype.getRootIdSet=function(Y){if(Y===void 0)Y=new Set;if(Object.keys(this.rootIds).forEach(Y.add,Y),this instanceof cY)this.parent.getRootIdSet(Y);else Object.keys(this.policies.rootTypenamesById).forEach(Y.add,Y);return Y},X.prototype.gc=function(){var Y=this,Z=this.getRootIdSet(),J=this.toObject();Z.forEach(function(H){if(u.call(J,H))Object.keys(Y.findChildRefIds(H)).forEach(Z.add,Z),delete J[H]});var G=Object.keys(J);if(G.length){var $=this;while($ instanceof cY)$=$.parent;G.forEach(function(H){return $.delete(H)})}return G},X.prototype.findChildRefIds=function(Y){if(!u.call(this.refs,Y)){var Z=this.refs[Y]=Object.create(null),J=this.data[Y];if(!J)return Z;var G=new Set([J]);G.forEach(function($){if(x($))Z[$.__ref]=!0;if(h($))Object.keys($).forEach(function(H){var B=$[H];if(h(B))G.add(B)})})}return this.refs[Y]},X.prototype.makeCacheKey=function(){return this.group.keyMaker.lookupArray(arguments)},X}();var X9=function(){function X(Y,Z){if(Z===void 0)Z=null;this.caching=Y,this.parent=Z,this.d=null,this.resetCaching()}return X.prototype.resetCaching=function(){this.d=this.caching?fX():null,this.keyMaker=new XY($Y)},X.prototype.depend=function(Y,Z){if(this.d){this.d(Y6(Y,Z));var J=FY(Z);if(J!==Z)this.d(Y6(Y,J));if(this.parent)this.parent.depend(Y,Z)}},X.prototype.dirty=function(Y,Z){if(this.d)this.d.dirty(Y6(Y,Z),Z==="__exists"?"forget":"setDirty")},X}();function Y6(X,Y){return Y+"#"+X}function X6(X,Y){if(ZX(X))X.group.depend(Y,"__exists")}(function(X){var Y=function(Z){o(J,Z);function J(G){var{policies:$,resultCaching:H}=G,B=H===void 0?!0:H,z=G.seed,W=Z.call(this,$,new X9(B))||this;if(W.stump=new o0(W),W.storageTrie=new XY($Y),z)W.replace(z);return W}return J.prototype.addLayer=function(G,$){return this.stump.addLayer(G,$)},J.prototype.removeLayer=function(){return this},J.prototype.getStorage=function(){return this.storageTrie.lookupArray(arguments)},J}(X);X.Root=Y})(LX||(LX={}));var cY=function(X){o(Y,X);function Y(Z,J,G,$){var H=X.call(this,J.policies,$)||this;return H.id=Z,H.parent=J,H.replay=G,H.group=$,G(H),H}return Y.prototype.addLayer=function(Z,J){return new Y(Z,this,J,this.group)},Y.prototype.removeLayer=function(Z){var J=this,G=this.parent.removeLayer(Z);if(Z===this.id){if(this.group.caching)Object.keys(this.data).forEach(function($){var H=J.data[$],B=G.lookup($);if(!B)J.delete($);else if(!H)J.group.dirty($,"__exists"),Object.keys(B).forEach(function(z){J.group.dirty($,z)});else if(H!==B)Object.keys(H).forEach(function(z){if(!_(H[z],B[z]))J.group.dirty($,z)})});return G}if(G===this.parent)return this;return G.addLayer(this.id,this.replay)},Y.prototype.toObject=function(){return E(E({},this.parent.toObject()),this.data)},Y.prototype.findChildRefIds=function(Z){var J=this.parent.findChildRefIds(Z);return u.call(this.data,Z)?E(E({},J),X.prototype.findChildRefIds.call(this,Z)):J},Y.prototype.getStorage=function(){var Z=this.parent;while(Z.parent)Z=Z.parent;return Z.getStorage.apply(Z,arguments)},Y}(LX),o0=function(X){o(Y,X);function Y(Z){return X.call(this,"EntityStore.Stump",Z,function(){},new X9(Z.group.caching,Z.group))||this}return Y.prototype.removeLayer=function(){return this},Y.prototype.merge=function(Z,J){return this.parent.merge(Z,J)},Y}(cY);function r0(X,Y,Z){var J=X[Z],G=Y[Z];return _(J,G)?J:G}function ZX(X){return!!(X instanceof LX&&X.group.caching)}function i0(X){if(h(X))return v(X)?X.slice(0):E({__proto__:Object.getPrototypeOf(X)},X);return X}var Z6=function(){function X(){this.known=new(zX?WeakSet:Set),this.pool=new XY($Y),this.passes=new WeakMap,this.keysByJSON=new Map,this.empty=this.admit({})}return X.prototype.isKnown=function(Y){return h(Y)&&this.known.has(Y)},X.prototype.pass=function(Y){if(h(Y)){var Z=i0(Y);return this.passes.set(Z,Y),Z}return Y},X.prototype.admit=function(Y){var Z=this;if(h(Y)){var J=this.passes.get(Y);if(J)return J;var G=Object.getPrototypeOf(Y);switch(G){case Array.prototype:{if(this.known.has(Y))return Y;var $=Y.map(this.admit,this),H=this.pool.lookupArray($);if(!H.array){if(this.known.add(H.array=$),globalThis.__DEV__!==!1)Object.freeze($)}return H.array}case null:case Object.prototype:{if(this.known.has(Y))return Y;var B=Object.getPrototypeOf(Y),z=[B],W=this.sortedKeys(Y);z.push(W.json);var U=z.length;W.sorted.forEach(function(V){z.push(Z.admit(Y[V]))});var H=this.pool.lookupArray(z);if(!H.object){var Q=H.object=Object.create(B);if(this.known.add(Q),W.sorted.forEach(function(V,q){Q[V]=z[U+q]}),globalThis.__DEV__!==!1)Object.freeze(Q)}return H.object}}}return Y},X.prototype.sortedKeys=function(Y){var Z=Object.keys(Y),J=this.pool.lookupArray(Z);if(!J.keys){Z.sort();var G=JSON.stringify(Z);if(!(J.keys=this.keysByJSON.get(G)))this.keysByJSON.set(G,J.keys={sorted:Z,json:G})}return J.keys},X}();function Z9(X){return[X.selectionSet,X.objectOrReference,X.context,X.context.canonizeResults]}var J9=function(){function X(Y){var Z=this;this.knownResults=new($Y?WeakMap:Map),this.config=KY(Y,{addTypename:Y.addTypename!==!1,canonizeResults:dZ(Y)}),this.canon=Y.canon||new Z6,this.executeSelectionSet=jY(function(J){var G,$=J.context.canonizeResults,H=Z9(J);H[3]=!$;var B=(G=Z.executeSelectionSet).peek.apply(G,H);if(B){if($)return E(E({},B),{result:Z.canon.admit(B.result)});return B}return X6(J.context.store,J.enclosingRef.__ref),Z.execSelectionSetImpl(J)},{max:this.config.resultCacheMaxSize||n["inMemoryCache.executeSelectionSet"]||50000,keyArgs:Z9,makeCacheKey:function(J,G,$,H){if(ZX($.store))return $.store.makeCacheKey(J,x(G)?G.__ref:G,$.varString,H)}}),this.executeSubSelectedArray=jY(function(J){return X6(J.context.store,J.enclosingRef.__ref),Z.execSubSelectedArrayImpl(J)},{max:this.config.resultCacheMaxSize||n["inMemoryCache.executeSubSelectedArray"]||1e4,makeCacheKey:function(J){var{field:G,array:$,context:H}=J;if(ZX(H.store))return H.store.makeCacheKey(G,$,H.varString)}})}return X.prototype.resetCanon=function(){this.canon=new Z6},X.prototype.diffQueryAgainstStore=function(Y){var{store:Z,query:J,rootId:G}=Y,$=G===void 0?"ROOT_QUERY":G,H=Y.variables,B=Y.returnPartialData,z=B===void 0?!0:B,W=Y.canonizeResults,U=W===void 0?this.config.canonizeResults:W,Q=this.config.cache.policies;H=E(E({},rY(kX(J))),H);var P=MY($),V=this.executeSelectionSet({selectionSet:LY(J).selectionSet,objectOrReference:P,enclosingRef:P,context:E({store:Z,query:J,policies:Q,variables:H,varString:ZY(H),canonizeResults:U},cZ(J,this.config.fragments))}),q;if(V.missing){if(q=[new iX(t0(V.missing),V.missing,J,H)],!z)throw q[0]}return{result:V.result,complete:!q,missing:q}},X.prototype.isFresh=function(Y,Z,J,G){if(ZX(G.store)&&this.knownResults.get(Y)===J){var $=this.executeSelectionSet.peek(J,Z,G,this.canon.isKnown(Y));if($&&Y===$.result)return!0}return!1},X.prototype.execSelectionSetImpl=function(Y){var Z=this,J=Y.selectionSet,G=Y.objectOrReference,$=Y.enclosingRef,H=Y.context;if(x(G)&&!H.policies.rootTypenamesById[G.__ref]&&!H.store.has(G.__ref))return{result:this.canon.empty,missing:"Dangling reference to missing ".concat(G.__ref," object")};var{variables:B,policies:z,store:W}=H,U=W.getFieldValue(G,"__typename"),Q=[],P,V=new GY;if(this.config.addTypename&&typeof U==="string"&&!z.rootIdsByTypename[U])Q.push({__typename:U});function q(T,w){var C;if(T.missing)P=V.merge(P,(C={},C[w]=T.missing,C));return T.result}var D=new Set(J.selections);D.forEach(function(T){var w,C;if(!DY(T,B))return;if(JY(T)){var N=z.readField({fieldName:T.name.value,field:T,variables:H.variables,from:G},H),O=YY(T);if(N===void 0){if(!tY.added(T))P=V.merge(P,(w={},w[O]="Can't find field '".concat(T.name.value,"' on ").concat(x(G)?G.__ref+" object":"object "+JSON.stringify(G,null,2)),w))}else if(v(N)){if(N.length>0)N=q(Z.executeSubSelectedArray({field:T,array:N,enclosingRef:$,context:H}),O)}else if(!T.selectionSet){if(H.canonizeResults)N=Z.canon.pass(N)}else if(N!=null)N=q(Z.executeSelectionSet({selectionSet:T.selectionSet,objectOrReference:N,enclosingRef:x(N)?N:$,context:H}),O);if(N!==void 0)Q.push((C={},C[O]=N,C))}else{var j=RY(T,H.lookupFragment);if(!j&&T.kind===R.FRAGMENT_SPREAD)throw f(10,T.name.value);if(j&&z.fragmentMatches(j,U))j.selectionSet.selections.forEach(D.add,D)}});var M=eY(Q),A={result:M,missing:P},F=H.canonizeResults?this.canon.admit(A):uY(A);if(F.result)this.knownResults.set(F.result,J);return F},X.prototype.execSubSelectedArrayImpl=function(Y){var Z=this,J=Y.field,G=Y.array,$=Y.enclosingRef,H=Y.context,B,z=new GY;function W(U,Q){var P;if(U.missing)B=z.merge(B,(P={},P[Q]=U.missing,P));return U.result}if(J.selectionSet)G=G.filter(H.store.canRead);return G=G.map(function(U,Q){if(U===null)return null;if(v(U))return W(Z.executeSubSelectedArray({field:J,array:U,enclosingRef:$,context:H}),Q);if(J.selectionSet)return W(Z.executeSelectionSet({selectionSet:J.selectionSet,objectOrReference:U,enclosingRef:x(U)?U:$,context:H}),Q);if(globalThis.__DEV__!==!1)e0(H.store,J,U);return U}),{result:H.canonizeResults?this.canon.admit(G):G,missing:B}},X}();function t0(X){try{JSON.stringify(X,function(Y,Z){if(typeof Z==="string")throw Z;return Z})}catch(Y){return Y}}function e0(X,Y,Z){if(!Y.selectionSet){var J=new Set([Z]);J.forEach(function(G){if(h(G))K(!x(G),11,t8(X,G),Y.name.value),Object.values(G).forEach(J.add,J)})}}var TX=new QY,G9=new WeakMap;function eX(X){var Y=G9.get(X);if(!Y)G9.set(X,Y={vars:new Set,dep:fX()});return Y}function J6(X){eX(X).vars.forEach(function(Y){return Y.forgetCache(X)})}function $9(X){eX(X).vars.forEach(function(Y){return Y.attachCache(X)})}function sZ(X){var Y=new Set,Z=new Set,J=function($){if(arguments.length>0){if(X!==$){X=$,Y.forEach(function(z){eX(z).dep.dirty(J),Y1(z)});var H=Array.from(Z);Z.clear(),H.forEach(function(z){return z(X)})}}else{var B=TX.getValue();if(B)G(B),eX(B).dep(J)}return X};J.onNextChange=function($){return Z.add($),function(){Z.delete($)}};var G=J.attachCache=function($){return Y.add($),eX($).vars.add(J),J};return J.forgetCache=function($){return Y.delete($)},J}function Y1(X){if(X.broadcastWatches)X.broadcastWatches()}var H9=Object.create(null);function G6(X){var Y=JSON.stringify(X);return H9[Y]||(H9[Y]=Object.create(null))}function $6(X){var Y=G6(X);return Y.keyFieldsFn||(Y.keyFieldsFn=function(Z,J){var G=function(H,B){return J.readField(B,H)},$=J.keyObject=B6(X,function(H){var B=FX(J.storeObject,H,G);if(B===void 0&&Z!==J.storeObject&&u.call(Z,H[0]))B=FX(Z,H,W9);return K(B!==void 0,5,H.join("."),Z),B});return"".concat(J.typename,":").concat(JSON.stringify($))})}function H6(X){var Y=G6(X);return Y.keyArgsFn||(Y.keyArgsFn=function(Z,J){var{field:G,variables:$,fieldName:H}=J,B=B6(X,function(W){var U=W[0],Q=U.charAt(0);if(Q==="@"){if(G&&i(G.directives)){var P=U.slice(1),V=G.directives.find(function(A){return A.name.value===P}),q=V&&IY(V,$);return q&&FX(q,W.slice(1))}return}if(Q==="$"){var D=U.slice(1);if($&&u.call($,D)){var M=W.slice(0);return M[0]=D,FX($,M)}return}if(Z)return FX(Z,W)}),z=JSON.stringify(B);if(Z||z!=="{}")H+=":"+z;return H})}function B6(X,Y){var Z=new GY;return B9(X).reduce(function(J,G){var $,H=Y(G);if(H!==void 0){for(var B=G.length-1;B>=0;--B)H=($={},$[G[B]]=H,$);J=Z.merge(J,H)}return J},Object.create(null))}function B9(X){var Y=G6(X);if(!Y.paths){var Z=Y.paths=[],J=[];X.forEach(function(G,$){if(v(G))B9(G).forEach(function(H){return Z.push(J.concat(H))}),J.length=0;else if(J.push(G),!v(X[$+1]))Z.push(J.slice(0)),J.length=0})}return Y.paths}function W9(X,Y){return X[Y]}function FX(X,Y,Z){return Z=Z||W9,z9(Y.reduce(function J(G,$){return v(G)?G.map(function(H){return J(H,$)}):G&&Z(G,$)},X))}function z9(X){if(h(X)){if(v(X))return X.map(z9);return B6(Object.keys(X).sort(),function(Y){return FX(X,Y)})}return X}function W6(X){return X.args!==void 0?X.args:X.field?IY(X.field,X.variables):null}var X1=function(){return},U9=function(X,Y){return Y.fieldName},Q9=function(X,Y,Z){var J=Z.mergeObjects;return J(X,Y)},P9=function(X,Y){return Y},E9=function(){function X(Y){if(this.config=Y,this.typePolicies=Object.create(null),this.toBeAdded=Object.create(null),this.supertypeMap=new Map,this.fuzzySubtypes=new Map,this.rootIdsByTypename=Object.create(null),this.rootTypenamesById=Object.create(null),this.usingPossibleTypes=!1,this.config=E({dataIdFromObject:pZ},Y),this.cache=this.config.cache,this.setRootTypename("Query"),this.setRootTypename("Mutation"),this.setRootTypename("Subscription"),Y.possibleTypes)this.addPossibleTypes(Y.possibleTypes);if(Y.typePolicies)this.addTypePolicies(Y.typePolicies)}return X.prototype.identify=function(Y,Z){var J,G=this,$=Z&&(Z.typename||((J=Z.storeObject)===null||J===void 0?void 0:J.__typename))||Y.__typename;if($===this.rootTypenamesById.ROOT_QUERY)return["ROOT_QUERY"];var H=Z&&Z.storeObject||Y,B=E(E({},Z),{typename:$,storeObject:H,readField:Z&&Z.readField||function(){var Q=aZ(arguments,H);return G.readField(Q,{store:G.cache.data,variables:Q.variables})}}),z,W=$&&this.getTypePolicy($),U=W&&W.keyFn||this.config.dataIdFromObject;return MX.withValue(!0,function(){while(U){var Q=U(E(E({},Y),H),B);if(v(Q))U=$6(Q);else{z=Q;break}}}),z=z?String(z):void 0,B.keyObject?[z,B.keyObject]:[z]},X.prototype.addTypePolicies=function(Y){var Z=this;Object.keys(Y).forEach(function(J){var G=Y[J],$=G.queryType,H=G.mutationType,B=G.subscriptionType,z=t(G,["queryType","mutationType","subscriptionType"]);if($)Z.setRootTypename("Query",J);if(H)Z.setRootTypename("Mutation",J);if(B)Z.setRootTypename("Subscription",J);if(u.call(Z.toBeAdded,J))Z.toBeAdded[J].push(z);else Z.toBeAdded[J]=[z]})},X.prototype.updateTypePolicy=function(Y,Z,J){var G=this.getTypePolicy(Y),$=Z.keyFields,H=Z.fields;function B(z,W){z.merge=typeof W==="function"?W:W===!0?Q9:W===!1?P9:z.merge}if(B(G,Z.merge),G.keyFn=$===!1?X1:v($)?$6($):typeof $==="function"?$:G.keyFn,H)Object.keys(H).forEach(function(z){var W=J[z];if(!W||(W===null||W===void 0?void 0:W.typename)!==Y)W=J[z]={typename:Y};var U=H[z];if(typeof U==="function")W.read=U;else{var{keyArgs:Q,read:P,merge:V}=U;if(W.keyFn=Q===!1?U9:v(Q)?H6(Q):typeof Q==="function"?Q:W.keyFn,typeof P==="function")W.read=P;B(W,V)}if(W.read&&W.merge)W.keyFn=W.keyFn||U9})},X.prototype.setRootTypename=function(Y,Z){if(Z===void 0)Z=Y;var J="ROOT_"+Y.toUpperCase(),G=this.rootTypenamesById[J];if(Z!==G){if(K(!G||G===Y,6,Y),G)delete this.rootIdsByTypename[G];this.rootIdsByTypename[Z]=J,this.rootTypenamesById[J]=Z}},X.prototype.addPossibleTypes=function(Y){var Z=this;this.usingPossibleTypes=!0,Object.keys(Y).forEach(function(J){Z.getSupertypeSet(J,!0),Y[J].forEach(function(G){Z.getSupertypeSet(G,!0).add(J);var $=G.match(t5);if(!$||$[0]!==G)Z.fuzzySubtypes.set(G,new RegExp(G))})})},X.prototype.getTypePolicy=function(Y){var Z=this;if(!u.call(this.typePolicies,Y)){var J=this.typePolicies[Y]=Object.create(null);J.fields=Object.create(null);var G=this.supertypeMap.get(Y);if(!G&&this.fuzzySubtypes.size)G=this.getSupertypeSet(Y,!0),this.fuzzySubtypes.forEach(function(H,B){if(H.test(Y)){var z=Z.supertypeMap.get(B);if(z)z.forEach(function(W){return G.add(W)})}});if(G&&G.size)G.forEach(function(H){var B=Z.getTypePolicy(H),z=B.fields,W=t(B,["fields"]);Object.assign(J,W),Object.assign(J.fields,z)})}var $=this.toBeAdded[Y];if($&&$.length)$.splice(0).forEach(function(H){Z.updateTypePolicy(Y,H,Z.typePolicies[Y].fields)});return this.typePolicies[Y]},X.prototype.getFieldPolicy=function(Y,Z){if(Y)return this.getTypePolicy(Y).fields[Z]},X.prototype.getSupertypeSet=function(Y,Z){var J=this.supertypeMap.get(Y);if(!J&&Z)this.supertypeMap.set(Y,J=new Set);return J},X.prototype.fragmentMatches=function(Y,Z,J,G){var $=this;if(!Y.typeCondition)return!0;if(!Z)return!1;var H=Y.typeCondition.name.value;if(Z===H)return!0;if(this.usingPossibleTypes&&this.supertypeMap.has(H)){var B=this.getSupertypeSet(Z,!0),z=[B],W=function(q){var D=$.getSupertypeSet(q,!1);if(D&&D.size&&z.indexOf(D)<0)z.push(D)},U=!!(J&&this.fuzzySubtypes.size),Q=!1;for(var P=0;P<z.length;++P){var V=z[P];if(V.has(H)){if(!B.has(H)){if(Q)globalThis.__DEV__!==!1&&K.warn(7,Z,H);B.add(H)}return!0}if(V.forEach(W),U&&P===z.length-1&&uZ(Y.selectionSet,J,G))U=!1,Q=!0,this.fuzzySubtypes.forEach(function(q,D){var M=Z.match(q);if(M&&M[0]===Z)W(D)})}}return!1},X.prototype.hasKeyArgs=function(Y,Z){var J=this.getFieldPolicy(Y,Z);return!!(J&&J.keyFn)},X.prototype.getStoreFieldName=function(Y){var{typename:Z,fieldName:J}=Y,G=this.getFieldPolicy(Z,J),$,H=G&&G.keyFn;if(H&&Z){var B={typename:Z,fieldName:J,field:Y.field||null,variables:Y.variables},z=W6(Y);while(H){var W=H(z,B);if(v(W))H=H6(W);else{$=W||J;break}}}if($===void 0)$=Y.field?w5(Y.field,Y.variables):FZ(J,W6(Y));if($===!1)return J;return J===FY($)?$:J+":"+$},X.prototype.readField=function(Y,Z){var J=Y.from;if(!J)return;var G=Y.field||Y.fieldName;if(!G)return;if(Y.typename===void 0){var $=Z.store.getFieldValue(J,"__typename");if($)Y.typename=$}var H=this.getStoreFieldName(Y),B=FY(H),z=Z.store.getFieldValue(J,H),W=this.getFieldPolicy(Y.typename,B),U=W&&W.read;if(U){var Q=V9(this,J,Y,Z,Z.store.getStorage(x(J)?J.__ref:J,H));return TX.withValue(this.cache,U,[z,Q])}return z},X.prototype.getReadFunction=function(Y,Z){var J=this.getFieldPolicy(Y,Z);return J&&J.read},X.prototype.getMergeFunction=function(Y,Z,J){var G=this.getFieldPolicy(Y,Z),$=G&&G.merge;if(!$&&J)G=this.getTypePolicy(J),$=G&&G.merge;return $},X.prototype.runMergeFunction=function(Y,Z,J,G,$){var{field:H,typename:B,merge:z}=J;if(z===Q9)return A9(G.store)(Y,Z);if(z===P9)return Z;if(G.overwrite)Y=void 0;return z(Y,Z,V9(this,void 0,{typename:B,fieldName:H.name.value,field:H,variables:G.variables},G,$||Object.create(null)))},X}();function V9(X,Y,Z,J,G){var $=X.getStoreFieldName(Z),H=FY($),B=Z.variables||J.variables,z=J.store,W=z.toReference,U=z.canRead;return{args:W6(Z),field:Z.field||null,fieldName:H,storeFieldName:$,variables:B,isReference:x,toReference:W,storage:G,cache:X.cache,canRead:U,readField:function(){return X.readField(aZ(arguments,Y,B),J)},mergeObjects:A9(J.store)}}function aZ(X,Y,Z){var J=X[0],G=X[1],$=X.length,H;if(typeof J==="string")H={fieldName:J,from:$>1?G:Y};else if(H=E({},J),!u.call(H,"from"))H.from=Y;if(globalThis.__DEV__!==!1&&H.from===void 0)globalThis.__DEV__!==!1&&K.warn(8,HZ(Array.from(X)));if(H.variables===void 0)H.variables=Z;return H}function A9(X){return function Y(Z,J){if(v(Z)||v(J))throw f(9);if(h(Z)&&h(J)){var G=X.getFieldValue(Z,"__typename"),$=X.getFieldValue(J,"__typename"),H=G&&$&&G!==$;if(H)return J;if(x(Z)&&dY(J))return X.merge(Z.__ref,J),Z;if(dY(Z)&&x(J))return X.merge(Z,J.__ref),J;if(dY(Z)&&dY(J))return E(E({},Z),J)}return J}}function z6(X,Y,Z){var J="".concat(Y).concat(Z),G=X.flavors.get(J);if(!G)X.flavors.set(J,G=X.clientOnly===Y&&X.deferred===Z?X:E(E({},X),{clientOnly:Y,deferred:Z}));return G}var L9=function(){function X(Y,Z,J){this.cache=Y,this.reader=Z,this.fragments=J}return X.prototype.writeToStore=function(Y,Z){var J=this,G=Z.query,$=Z.result,H=Z.dataId,B=Z.variables,z=Z.overwrite,W=BY(G),U=e8();B=E(E({},rY(W)),B);var Q=E(E({store:Y,written:Object.create(null),merge:function(V,q){return U.merge(V,q)},variables:B,varString:ZY(B)},cZ(G,this.fragments)),{overwrite:!!z,incomingById:new Map,clientOnly:!1,deferred:!1,flavors:new Map}),P=this.processSelectionSet({result:$||Object.create(null),dataId:H,selectionSet:W.selectionSet,mergeTree:{map:new Map},context:Q});if(!x(P))throw f(12,$);return Q.incomingById.forEach(function(V,q){var{storeObject:D,mergeTree:M,fieldNodeSet:A}=V,F=MY(q);if(M&&M.map.size){var T=J.applyMerges(M,F,D,Q);if(x(T))return;D=T}if(globalThis.__DEV__!==!1&&!Q.overwrite){var w=Object.create(null);A.forEach(function(O){if(O.selectionSet)w[O.name.value]=!0});var C=function(O){return w[FY(O)]===!0},N=function(O){var j=M&&M.map.get(O);return Boolean(j&&j.info&&j.info.merge)};Object.keys(D).forEach(function(O){if(C(O)&&!N(O))Z1(F,D,O,Q.store)})}Y.merge(q,D)}),Y.retain(P.__ref),P},X.prototype.processSelectionSet=function(Y){var Z=this,J=Y.dataId,G=Y.result,$=Y.selectionSet,H=Y.context,B=Y.mergeTree,z=this.cache.policies,W=Object.create(null),U=J&&z.rootTypenamesById[J]||xX(G,$,H.fragmentMap)||J&&H.store.get(J,"__typename");if(typeof U==="string")W.__typename=U;var Q=function(){var T=aZ(arguments,W,H.variables);if(x(T.from)){var w=H.incomingById.get(T.from.__ref);if(w){var C=z.readField(E(E({},T),{from:w.storeObject}),H);if(C!==void 0)return C}}return z.readField(T,H)},P=new Set;this.flattenFields($,G,H,U).forEach(function(T,w){var C,N=YY(w),O=G[N];if(P.add(w),O!==void 0){var j=z.getStoreFieldName({typename:U,fieldName:w.name.value,field:w,variables:T.variables}),g=q9(B,j),p=Z.processFieldValue(O,w,w.selectionSet?z6(T,!1,!1):T,g),kY=void 0;if(w.selectionSet&&(x(p)||dY(p)))kY=Q("__typename",p);var VY=z.getMergeFunction(U,w.name.value,kY);if(VY)g.info={field:w,typename:U,merge:VY};else D9(B,j);W=T.merge(W,(C={},C[j]=p,C))}else if(globalThis.__DEV__!==!1&&!T.clientOnly&&!T.deferred&&!tY.added(w)&&!z.getReadFunction(U,w.name.value))globalThis.__DEV__!==!1&&K.error(13,YY(w),G)});try{var V=z.identify(G,{typename:U,selectionSet:$,fragmentMap:H.fragmentMap,storeObject:W,readField:Q}),q=V[0],D=V[1];if(J=J||q,D)W=H.merge(W,D)}catch(T){if(!J)throw T}if(typeof J==="string"){var M=MY(J),A=H.written[J]||(H.written[J]=[]);if(A.indexOf($)>=0)return M;if(A.push($),this.reader&&this.reader.isFresh(G,M,$,H))return M;var F=H.incomingById.get(J);if(F)F.storeObject=H.merge(F.storeObject,W),F.mergeTree=U6(F.mergeTree,B),P.forEach(function(T){return F.fieldNodeSet.add(T)});else H.incomingById.set(J,{storeObject:W,mergeTree:nZ(B)?void 0:B,fieldNodeSet:P});return M}return W},X.prototype.processFieldValue=function(Y,Z,J,G){var $=this;if(!Z.selectionSet||Y===null)return globalThis.__DEV__!==!1?RZ(Y):Y;if(v(Y))return Y.map(function(H,B){var z=$.processFieldValue(H,Z,J,q9(G,B));return D9(G,B),z});return this.processSelectionSet({result:Y,selectionSet:Z.selectionSet,context:J,mergeTree:G})},X.prototype.flattenFields=function(Y,Z,J,G){if(G===void 0)G=xX(Z,Y,J.fragmentMap);var $=new Map,H=this.cache.policies,B=new XY(!1);return function z(W,U){var Q=B.lookup(W,U.clientOnly,U.deferred);if(Q.visited)return;Q.visited=!0,W.selections.forEach(function(P){if(!DY(P,J.variables))return;var{clientOnly:V,deferred:q}=U;if(!(V&&q)&&i(P.directives))P.directives.forEach(function(A){var F=A.name.value;if(F==="client")V=!0;if(F==="defer"){var T=IY(A,J.variables);if(!T||T.if!==!1)q=!0}});if(JY(P)){var D=$.get(P);if(D)V=V&&D.clientOnly,q=q&&D.deferred;$.set(P,z6(J,V,q))}else{var M=RY(P,J.lookupFragment);if(!M&&P.kind===R.FRAGMENT_SPREAD)throw f(14,P.name.value);if(M&&H.fragmentMatches(M,G,Z,J.variables))z(M.selectionSet,z6(J,V,q))}})}(Y,J),$},X.prototype.applyMerges=function(Y,Z,J,G,$){var H,B=this;if(Y.map.size&&!x(J)){var z=!v(J)&&(x(Z)||dY(Z))?Z:void 0,W=J;if(z&&!$)$=[x(z)?z.__ref:z];var U,Q=function(P,V){return v(P)?typeof V==="number"?P[V]:void 0:G.store.getFieldValue(P,String(V))};if(Y.map.forEach(function(P,V){var q=Q(z,V),D=Q(W,V);if(D===void 0)return;if($)$.push(V);var M=B.applyMerges(P,q,D,G,$);if(M!==D)U=U||new Map,U.set(V,M);if($)K($.pop()===V)}),U)J=v(W)?W.slice(0):E({},W),U.forEach(function(P,V){J[V]=P})}if(Y.info)return this.cache.policies.runMergeFunction(Z,J,Y.info,G,$&&(H=G.store).getStorage.apply(H,$));return J},X}();var T9=[];function q9(X,Y){var Z=X.map;if(!Z.has(Y))Z.set(Y,T9.pop()||{map:new Map});return Z.get(Y)}function U6(X,Y){if(X===Y||!Y||nZ(Y))return X;if(!X||nZ(X))return Y;var Z=X.info&&Y.info?E(E({},X.info),Y.info):X.info||Y.info,J=X.map.size&&Y.map.size,G=J?new Map:X.map.size?X.map:Y.map,$={info:Z,map:G};if(J){var H=new Set(Y.map.keys());X.map.forEach(function(B,z){$.map.set(z,U6(B,Y.map.get(z))),H.delete(z)}),H.forEach(function(B){$.map.set(B,U6(Y.map.get(B),X.map.get(B)))})}return $}function nZ(X){return!X||!(X.info||X.map.size)}function D9(X,Y){var Z=X.map,J=Z.get(Y);if(J&&nZ(J))T9.push(J),Z.delete(Y)}var M9=new Set;function Z1(X,Y,Z,J){var G=function(Q){var P=J.getFieldValue(Q,Z);return typeof P==="object"&&P},$=G(X);if(!$)return;var H=G(Y);if(!H)return;if(x($))return;if(_($,H))return;if(Object.keys($).every(function(Q){return J.getFieldValue(H,Q)!==void 0}))return;var B=J.getFieldValue(X,"__typename")||J.getFieldValue(Y,"__typename"),z=FY(Z),W="".concat(B,".").concat(z);if(M9.has(W))return;M9.add(W);var U=[];if(!v($)&&!v(H))[$,H].forEach(function(Q){var P=J.getFieldValue(Q,"__typename");if(typeof P==="string"&&!U.includes(P))U.push(P)});globalThis.__DEV__!==!1&&K.warn(15,z,B,U.length?"either ensure all objects of type "+U.join(" and ")+" have an ID or a custom merge function, or ":"",W,E({},$),E({},H))}var YZ=function(X){o(Y,X);function Y(Z){if(Z===void 0)Z={};var J=X.call(this)||this;if(J.watches=new Set,J.addTypenameTransform=new gX(tY),J.assumeImmutableResults=!0,J.makeVar=sZ,J.txCount=0,globalThis.__DEV__!==!1)y(Z,"addTypename","InMemoryCache","Please remove the `addTypename` option when initializing `InMemoryCache`."),y(Z,"canonizeResults","InMemoryCache","Please remove the `canonizeResults` option when initializing `InMemoryCache`.");return J.config=i8(Z),J.addTypename=!!J.config.addTypename,J.policies=new E9({cache:J,dataIdFromObject:J.config.dataIdFromObject,possibleTypes:J.config.possibleTypes,typePolicies:J.config.typePolicies}),J.init(),J}return Y.prototype.init=function(){var Z=this.data=new LX.Root({policies:this.policies,resultCaching:this.config.resultCaching});this.optimisticData=Z.stump,this.resetResultCache()},Y.prototype.resetResultCache=function(Z){var J=this,G=this.storeReader,$=this.config.fragments;this.addTypenameTransform.resetCache(),$===null||$===void 0||$.resetCaches(),this.storeWriter=new L9(this,this.storeReader=new J9({cache:this,addTypename:this.addTypename,resultCacheMaxSize:this.config.resultCacheMaxSize,canonizeResults:dZ(this.config),canon:Z?void 0:G&&G.canon,fragments:$}),$),this.maybeBroadcastWatch=jY(function(H,B){return J.broadcastWatch(H,B)},{max:this.config.resultCacheMaxSize||n["inMemoryCache.maybeBroadcastWatch"]||5000,makeCacheKey:function(H){var B=H.optimistic?J.optimisticData:J.data;if(ZX(B)){var{optimistic:z,id:W,variables:U}=H;return B.makeCacheKey(H.query,H.callback,ZY({optimistic:z,id:W,variables:U}))}}}),new Set([this.data.group,this.optimisticData.group]).forEach(function(H){return H.resetCaching()})},Y.prototype.restore=function(Z){if(this.init(),Z)this.data.replace(Z);return this},Y.prototype.extract=function(Z){if(Z===void 0)Z=!1;return(Z?this.optimisticData:this.data).extract()},Y.prototype.read=function(Z){if(globalThis.__DEV__!==!1)y(Z,"canonizeResults","cache.read");var J=Z.returnPartialData,G=J===void 0?!1:J;try{return this.storeReader.diffQueryAgainstStore(E(E({},Z),{store:Z.optimistic?this.optimisticData:this.data,config:this.config,returnPartialData:G})).result||null}catch($){if($ instanceof iX)return null;throw $}},Y.prototype.write=function(Z){try{return++this.txCount,this.storeWriter.writeToStore(this.data,Z)}finally{if(!--this.txCount&&Z.broadcast!==!1)this.broadcastWatches()}},Y.prototype.modify=function(Z){if(u.call(Z,"id")&&!Z.id)return!1;var J=Z.optimistic?this.optimisticData:this.data;try{return++this.txCount,J.modify(Z.id||"ROOT_QUERY",Z.fields)}finally{if(!--this.txCount&&Z.broadcast!==!1)this.broadcastWatches()}},Y.prototype.diff=function(Z){if(globalThis.__DEV__!==!1)y(Z,"canonizeResults","cache.diff");return this.storeReader.diffQueryAgainstStore(E(E({},Z),{store:Z.optimistic?this.optimisticData:this.data,rootId:Z.id||"ROOT_QUERY",config:this.config}))},Y.prototype.watch=function(Z){var J=this;if(!this.watches.size)$9(this);if(this.watches.add(Z),Z.immediate)this.maybeBroadcastWatch(Z);return function(){if(J.watches.delete(Z)&&!J.watches.size)J6(J);J.maybeBroadcastWatch.forget(Z)}},Y.prototype.gc=function(Z){if(globalThis.__DEV__!==!1)y(Z||{},"resetResultIdentities","cache.gc","First ensure all usages of `canonizeResults` are removed, then remove this option.");ZY.reset(),TY.reset();var J=this.optimisticData.gc();if(Z&&!this.txCount){if(Z.resetResultCache)this.resetResultCache(Z.resetResultIdentities);else if(Z.resetResultIdentities)this.storeReader.resetCanon()}return J},Y.prototype.retain=function(Z,J){return(J?this.optimisticData:this.data).retain(Z)},Y.prototype.release=function(Z,J){return(J?this.optimisticData:this.data).release(Z)},Y.prototype.identify=function(Z){if(x(Z))return Z.__ref;try{return this.policies.identify(Z)[0]}catch(J){globalThis.__DEV__!==!1&&K.warn(J)}},Y.prototype.evict=function(Z){if(!Z.id){if(u.call(Z,"id"))return!1;Z=E(E({},Z),{id:"ROOT_QUERY"})}try{return++this.txCount,this.optimisticData.evict(Z,this.data)}finally{if(!--this.txCount&&Z.broadcast!==!1)this.broadcastWatches()}},Y.prototype.reset=function(Z){var J=this;if(this.init(),ZY.reset(),Z&&Z.discardWatches)this.watches.forEach(function(G){return J.maybeBroadcastWatch.forget(G)}),this.watches.clear(),J6(this);else this.broadcastWatches();return Promise.resolve()},Y.prototype.removeOptimistic=function(Z){var J=this.optimisticData.removeLayer(Z);if(J!==this.optimisticData)this.optimisticData=J,this.broadcastWatches()},Y.prototype.batch=function(Z){var J=this,G=Z.update,$=Z.optimistic,H=$===void 0?!0:$,B=Z.removeOptimistic,z=Z.onWatchUpdated,W,U=function(P){var V=J,q=V.data,D=V.optimisticData;if(++J.txCount,P)J.data=J.optimisticData=P;try{return W=G(J)}finally{--J.txCount,J.data=q,J.optimisticData=D}},Q=new Set;if(z&&!this.txCount)this.broadcastWatches(E(E({},Z),{onWatchUpdated:function(P){return Q.add(P),!1}}));if(typeof H==="string")this.optimisticData=this.optimisticData.addLayer(H,U);else if(H===!1)U(this.data);else U();if(typeof B==="string")this.optimisticData=this.optimisticData.removeLayer(B);if(z&&Q.size){if(this.broadcastWatches(E(E({},Z),{onWatchUpdated:function(P,V){var q=z.call(this,P,V);if(q!==!1)Q.delete(P);return q}})),Q.size)Q.forEach(function(P){return J.maybeBroadcastWatch.dirty(P)})}else this.broadcastWatches(Z);return W},Y.prototype.performTransaction=function(Z,J){return this.batch({update:Z,optimistic:J||J!==null})},Y.prototype.transformDocument=function(Z){return this.addTypenameToDocument(this.addFragmentsToDocument(Z))},Y.prototype.fragmentMatches=function(Z,J){return this.policies.fragmentMatches(Z,J)},Y.prototype.lookupFragment=function(Z){var J;return((J=this.config.fragments)===null||J===void 0?void 0:J.lookup(Z))||null},Y.prototype.broadcastWatches=function(Z){var J=this;if(!this.txCount)this.watches.forEach(function(G){return J.maybeBroadcastWatch(G,Z)})},Y.prototype.addFragmentsToDocument=function(Z){var J=this.config.fragments;return J?J.transform(Z):Z},Y.prototype.addTypenameToDocument=function(Z){if(this.addTypename)return this.addTypenameTransform.transformDocument(Z);return Z},Y.prototype.broadcastWatch=function(Z,J){var G=this,$=Z.lastDiff,H=d("canonizeResults",function(){return G.diff(Z)});if(J){if(Z.optimistic&&typeof J.optimistic==="string")H.fromOptimisticTransaction=!0;if(J.onWatchUpdated&&J.onWatchUpdated.call(this,Z,H,$)===!1)return}if(!$||!_($.result,H.result))Z.callback(Z.lastDiff=H,$)},Y}(mZ);if(globalThis.__DEV__!==!1)YZ.prototype.getMemoryInternals=a6;var b;(function(X){X[X.loading=1]="loading",X[X.setVariables=2]="setVariables",X[X.fetchMore=3]="fetchMore",X[X.refetch=4]="refetch",X[X.poll=6]="poll",X[X.ready=7]="ready",X[X.error=8]="error"})(b||(b={}));function lY(X){return X?X<7:!1}var{assign:F9,hasOwnProperty:J1}=Object,XZ=function(X){o(Y,X);function Y(Z){var{queryManager:J,queryInfo:G,options:$}=Z,H=this,B=Y.inactiveOnCreation.getValue();H=X.call(this,function(A){H._getOrCreateQuery();try{var F=A._subscription._observer;if(F&&!F.error)F.error=G1}catch(C){}var T=!H.observers.size;H.observers.add(A);var w=H.last;if(w&&w.error)A.error&&A.error(w.error);else if(w&&w.result)A.next&&A.next(H.maskResult(w.result));if(T)H.reobserve().catch(function(){});return function(){if(H.observers.delete(A)&&!H.observers.size)H.tearDownQuery()}})||this,H.observers=new Set,H.subscriptions=new Set,H.dirty=!1,H._getOrCreateQuery=function(){if(B)J.queries.set(H.queryId,G),B=!1;return H.queryManager.getOrCreateQuery(H.queryId)},H.queryInfo=G,H.queryManager=J,H.waitForOwnResult=Q6($.fetchPolicy),H.isTornDown=!1,H.subscribeToMore=H.subscribeToMore.bind(H),H.maskResult=H.maskResult.bind(H);var z=J.defaultOptions.watchQuery,W=z===void 0?{}:z,U=W.fetchPolicy,Q=U===void 0?"cache-first":U,P=$.fetchPolicy,V=P===void 0?Q:P,q=$.initialFetchPolicy,D=q===void 0?V==="standby"?Q:V:q;H.options=E(E({},$),{initialFetchPolicy:D,fetchPolicy:V}),H.queryId=G.queryId||J.generateQueryId();var M=BY(H.query);return H.queryName=M&&M.name&&M.name.value,H}return Object.defineProperty(Y.prototype,"query",{get:function(){return this.lastQuery||this.options.query},enumerable:!1,configurable:!0}),Object.defineProperty(Y.prototype,"variables",{get:function(){return this.options.variables},enumerable:!1,configurable:!0}),Y.prototype.result=function(){var Z=this;if(globalThis.__DEV__!==!1)SY("observableQuery.result",function(){globalThis.__DEV__!==!1&&K.warn(23)});return new Promise(function(J,G){var $={next:function(B){if(J(B),Z.observers.delete($),!Z.observers.size)Z.queryManager.removeQuery(Z.queryId);setTimeout(function(){H.unsubscribe()},0)},error:G},H=Z.subscribe($)})},Y.prototype.resetDiff=function(){this.queryInfo.resetDiff()},Y.prototype.getCurrentFullResult=function(Z){var J=this;if(Z===void 0)Z=!0;var G=d("getLastResult",function(){return J.getLastResult(!0)}),$=this.queryInfo.networkStatus||G&&G.networkStatus||b.ready,H=E(E({},G),{loading:lY($),networkStatus:$}),B=this.options.fetchPolicy,z=B===void 0?"cache-first":B;if(Q6(z)||this.queryManager.getDocumentInfo(this.query).hasForcedResolvers);else if(this.waitForOwnResult)this.queryInfo.updateWatch();else{var W=this.queryInfo.getDiff();if(W.complete||this.options.returnPartialData)H.data=W.result;if(_(H.data,{}))H.data=void 0;if(W.complete){if(delete H.partial,W.complete&&H.networkStatus===b.loading&&(z==="cache-first"||z==="cache-only"))H.networkStatus=b.ready,H.loading=!1}else H.partial=!0;if(H.networkStatus===b.ready&&(H.error||H.errors))H.networkStatus=b.error;if(globalThis.__DEV__!==!1&&!W.complete&&!this.options.partialRefetch&&!H.loading&&!H.data&&!H.error)P6(W.missing)}if(Z)this.updateLastResult(H);return H},Y.prototype.getCurrentResult=function(Z){if(Z===void 0)Z=!0;return this.maskResult(this.getCurrentFullResult(Z))},Y.prototype.isDifferentFromLastResult=function(Z,J){if(!this.last)return!0;var G=this.queryManager.getDocumentInfo(this.query),$=this.queryManager.dataMasking,H=$?G.nonReactiveQuery:this.query,B=$||G.hasNonreactiveDirective?!_Z(H,this.last.result,Z,this.variables):!_(this.last.result,Z);return B||J&&!_(this.last.variables,J)},Y.prototype.getLast=function(Z,J){var G=this.last;if(G&&G[Z]&&(!J||_(G.variables,this.variables)))return G[Z]},Y.prototype.getLastResult=function(Z){if(globalThis.__DEV__!==!1)SY("getLastResult",function(){globalThis.__DEV__!==!1&&K.warn(24)});return this.getLast("result",Z)},Y.prototype.getLastError=function(Z){if(globalThis.__DEV__!==!1)SY("getLastError",function(){globalThis.__DEV__!==!1&&K.warn(25)});return this.getLast("error",Z)},Y.prototype.resetLastResults=function(){if(globalThis.__DEV__!==!1)SY("resetLastResults",function(){globalThis.__DEV__!==!1&&K.warn(26)});delete this.last,this.isTornDown=!1},Y.prototype.resetQueryStoreErrors=function(){if(globalThis.__DEV__!==!1)globalThis.__DEV__!==!1&&K.warn(27);this.queryManager.resetErrors(this.queryId)},Y.prototype.refetch=function(Z){var J,G={pollInterval:0},$=this.options.fetchPolicy;if($==="no-cache")G.fetchPolicy="no-cache";else G.fetchPolicy="network-only";if(globalThis.__DEV__!==!1&&Z&&J1.call(Z,"variables")){var H=kX(this.query),B=H.variableDefinitions;if(!B||!B.some(function(z){return z.variable.name.value==="variables"}))globalThis.__DEV__!==!1&&K.warn(28,Z,((J=H.name)===null||J===void 0?void 0:J.value)||H)}if(Z&&!_(this.options.variables,Z))G.variables=this.options.variables=E(E({},this.options.variables),Z);return this.queryInfo.resetLastWrite(),this.reobserve(G,b.refetch)},Y.prototype.fetchMore=function(Z){var J=this,G=E(E({},Z.query?Z:E(E(E(E({},this.options),{query:this.options.query}),Z),{variables:E(E({},this.options.variables),Z.variables)})),{fetchPolicy:"no-cache"});G.query=this.transformDocument(G.query);var $=this.queryManager.generateQueryId();this.lastQuery=Z.query?this.transformDocument(this.options.query):G.query;var H=this.queryInfo,B=H.networkStatus;if(H.networkStatus=b.fetchMore,G.notifyOnNetworkStatusChange)this.observe();var z=new Set,W=Z===null||Z===void 0?void 0:Z.updateQuery,U=this.options.fetchPolicy!=="no-cache";if(!U)K(W,29);return this.queryManager.fetchQuery($,G,b.fetchMore).then(function(Q){if(J.queryManager.removeQuery($),H.networkStatus===b.fetchMore)H.networkStatus=B;if(U)J.queryManager.cache.batch({update:function(q){var D=Z.updateQuery;if(D)q.updateQuery({query:J.query,variables:J.variables,returnPartialData:!0,optimistic:!1},function(M){return D(M,{fetchMoreResult:Q.data,variables:G.variables})});else q.writeQuery({query:G.query,variables:G.variables,data:Q.data})},onWatchUpdated:function(q){z.add(q.query)}});else{var P=J.getLast("result"),V=W(P.data,{fetchMoreResult:Q.data,variables:G.variables});J.reportResult(E(E({},P),{networkStatus:B,loading:lY(B),data:V}),J.variables)}return J.maskResult(Q)}).finally(function(){if(U&&!z.has(J.query))J.reobserveCacheFirst()})},Y.prototype.subscribeToMore=function(Z){var J=this,G=this.queryManager.startGraphQLSubscription({query:Z.document,variables:Z.variables,context:Z.context}).subscribe({next:function($){var H=Z.updateQuery;if(H)J.updateQuery(function(B,z){return H(B,E({subscriptionData:$},z))})},error:function($){if(Z.onError){Z.onError($);return}globalThis.__DEV__!==!1&&K.error(30,$)}});return this.subscriptions.add(G),function(){if(J.subscriptions.delete(G))G.unsubscribe()}},Y.prototype.setOptions=function(Z){if(globalThis.__DEV__!==!1)y(Z,"canonizeResults","setOptions"),SY("setOptions",function(){globalThis.__DEV__!==!1&&K.warn(31)});return this.reobserve(Z)},Y.prototype.silentSetOptions=function(Z){var J=KY(this.options,Z||{});F9(this.options,J)},Y.prototype.setVariables=function(Z){var J=this;if(_(this.variables,Z))return this.observers.size?d("observableQuery.result",function(){return J.result()}):Promise.resolve();if(this.options.variables=Z,!this.observers.size)return Promise.resolve();return this.reobserve({fetchPolicy:this.options.initialFetchPolicy,variables:Z},b.setVariables)},Y.prototype.updateQuery=function(Z){var J=this.queryManager,G=J.cache.diff({query:this.options.query,variables:this.variables,returnPartialData:!0,optimistic:!1}),$=G.result,H=G.complete,B=Z($,{variables:this.variables,complete:!!H,previousData:$});if(B)J.cache.writeQuery({query:this.options.query,data:B,variables:this.variables}),J.broadcastQueries()},Y.prototype.startPolling=function(Z){this.options.pollInterval=Z,this.updatePolling()},Y.prototype.stopPolling=function(){this.options.pollInterval=0,this.updatePolling()},Y.prototype.applyNextFetchPolicy=function(Z,J){if(J.nextFetchPolicy){var G=J.fetchPolicy,$=G===void 0?"cache-first":G,H=J.initialFetchPolicy,B=H===void 0?$:H;if($==="standby");else if(typeof J.nextFetchPolicy==="function")J.fetchPolicy=J.nextFetchPolicy($,{reason:Z,options:J,observable:this,initialFetchPolicy:B});else if(Z==="variables-changed")J.fetchPolicy=B;else J.fetchPolicy=J.nextFetchPolicy}return J.fetchPolicy},Y.prototype.fetch=function(Z,J,G){var $=this._getOrCreateQuery();return $.setObservableQuery(this),this.queryManager.fetchConcastWithInfo($,Z,J,G)},Y.prototype.updatePolling=function(){var Z=this;if(this.queryManager.ssrMode)return;var J=this,G=J.pollingInfo,$=J.options.pollInterval;if(!$||!this.hasObservers()){if(G)clearTimeout(G.timeout),delete this.pollingInfo;return}if(G&&G.interval===$)return;K($,32);var H=G||(this.pollingInfo={});H.interval=$;var B=function(){var W,U;if(Z.pollingInfo)if(!lY(Z.queryInfo.networkStatus)&&!((U=(W=Z.options).skipPollAttempt)===null||U===void 0?void 0:U.call(W)))Z.reobserve({fetchPolicy:Z.options.initialFetchPolicy==="no-cache"?"no-cache":"network-only"},b.poll).then(z,z);else z()},z=function(){var W=Z.pollingInfo;if(W)clearTimeout(W.timeout),W.timeout=setTimeout(B,W.interval)};z()},Y.prototype.updateLastResult=function(Z,J){var G=this;if(J===void 0)J=this.variables;var $=d("getLastError",function(){return G.getLastError()});if($&&this.last&&!_(J,this.last.variables))$=void 0;return this.last=E({result:this.queryManager.assumeImmutableResults?Z:RZ(Z),variables:J},$?{error:$}:null)},Y.prototype.reobserveAsConcast=function(Z,J){var G=this;this.isTornDown=!1;var $=J===b.refetch||J===b.fetchMore||J===b.poll,H=this.options.variables,B=this.options.fetchPolicy,z=KY(this.options,Z||{}),W=$?z:F9(this.options,z),U=this.transformDocument(W.query);if(this.lastQuery=U,!$){if(this.updatePolling(),Z&&Z.variables&&!_(Z.variables,H)&&W.fetchPolicy!=="standby"&&(W.fetchPolicy===B||typeof W.nextFetchPolicy==="function")){if(this.applyNextFetchPolicy("variables-changed",W),J===void 0)J=b.setVariables}}this.waitForOwnResult&&(this.waitForOwnResult=Q6(W.fetchPolicy));var Q=function(){if(G.concast===q)G.waitForOwnResult=!1},P=W.variables&&E({},W.variables),V=this.fetch(W,J,U),q=V.concast,D=V.fromLink,M={next:function(A){if(_(G.variables,P))Q(),G.reportResult(A,P)},error:function(A){if(_(G.variables,P)){if(!hZ(A))A=new xY({networkError:A});Q(),G.reportError(A,P)}}};if(!$&&(D||!this.concast)){if(this.concast&&this.observer)this.concast.removeObserver(this.observer);this.concast=q,this.observer=M}return q.addObserver(M),q},Y.prototype.reobserve=function(Z,J){return y5(this.reobserveAsConcast(Z,J).promise.then(this.maskResult))},Y.prototype.resubscribeAfterError=function(){var Z=this,J=[];for(var G=0;G<arguments.length;G++)J[G]=arguments[G];var $=this.last;d("resetLastResults",function(){return Z.resetLastResults()});var H=this.subscribe.apply(this,J);return this.last=$,H},Y.prototype.observe=function(){this.reportResult(this.getCurrentFullResult(!1),this.variables)},Y.prototype.reportResult=function(Z,J){var G=this,$=d("getLastError",function(){return G.getLastError()}),H=this.isDifferentFromLastResult(Z,J);if($||!Z.partial||this.options.returnPartialData)this.updateLastResult(Z,J);if($||H)YX(this.observers,"next",this.maskResult(Z))},Y.prototype.reportError=function(Z,J){var G=this,$=E(E({},d("getLastResult",function(){return G.getLastResult()})),{error:Z,errors:Z.graphQLErrors,networkStatus:b.error,loading:!1});this.updateLastResult($,J),YX(this.observers,"error",this.last.error=Z)},Y.prototype.hasObservers=function(){return this.observers.size>0},Y.prototype.tearDownQuery=function(){if(this.isTornDown)return;if(this.concast&&this.observer)this.concast.removeObserver(this.observer),delete this.concast,delete this.observer;this.stopPolling(),this.subscriptions.forEach(function(Z){return Z.unsubscribe()}),this.subscriptions.clear(),this.queryManager.stopQuery(this.queryId),this.observers.clear(),this.isTornDown=!0},Y.prototype.transformDocument=function(Z){return this.queryManager.transform(Z)},Y.prototype.maskResult=function(Z){return Z&&"data"in Z?E(E({},Z),{data:this.queryManager.maskOperation({document:this.query,data:Z.data,fetchPolicy:this.options.fetchPolicy,id:this.queryId})}):Z},Y.prototype.resetNotifications=function(){this.cancelNotifyTimeout(),this.dirty=!1},Y.prototype.cancelNotifyTimeout=function(){if(this.notifyTimeout)clearTimeout(this.notifyTimeout),this.notifyTimeout=void 0},Y.prototype.scheduleNotify=function(){var Z=this;if(this.dirty)return;if(this.dirty=!0,!this.notifyTimeout)this.notifyTimeout=setTimeout(function(){return Z.notify()},0)},Y.prototype.notify=function(){if(this.cancelNotifyTimeout(),this.dirty){if(this.options.fetchPolicy=="cache-only"||this.options.fetchPolicy=="cache-and-network"||!lY(this.queryInfo.networkStatus)){var Z=this.queryInfo.getDiff();if(Z.fromOptimisticTransaction)this.observe();else this.reobserveCacheFirst()}}this.dirty=!1},Y.prototype.reobserveCacheFirst=function(){var Z=this.options,J=Z.fetchPolicy,G=Z.nextFetchPolicy;if(J==="cache-and-network"||J==="network-only")return this.reobserve({fetchPolicy:"cache-first",nextFetchPolicy:function($,H){if(this.nextFetchPolicy=G,typeof this.nextFetchPolicy==="function")return this.nextFetchPolicy($,H);return J}});return this.reobserve()},Y.inactiveOnCreation=new QY,Y}(S);IZ(XZ);function G1(X){globalThis.__DEV__!==!1&&K.error(33,X.message,X.stack)}function P6(X){if(globalThis.__DEV__!==!1&&X)globalThis.__DEV__!==!1&&K.debug(34,X)}function Q6(X){return X==="network-only"||X==="no-cache"||X==="standby"}var KX=new($Y?WeakMap:Map);function V6(X,Y){var Z=X[Y];if(typeof Z==="function")X[Y]=function(){return KX.set(X,(KX.get(X)+1)%1000000000000000),Z.apply(this,arguments)}}var oZ=function(){function X(Y,Z){if(Z===void 0)Z=Y.generateQueryId();this.queryId=Z,this.document=null,this.lastRequestId=1,this.stopped=!1,this.observableQuery=null;var J=this.cache=Y.cache;if(!KX.has(J))KX.set(J,0),V6(J,"evict"),V6(J,"modify"),V6(J,"reset")}return X.prototype.init=function(Y){var Z=Y.networkStatus||b.loading;if(this.variables&&this.networkStatus!==b.loading&&!_(this.variables,Y.variables))Z=b.setVariables;if(!_(Y.variables,this.variables))this.lastDiff=void 0,this.cancel();if(Object.assign(this,{document:Y.document,variables:Y.variables,networkError:null,graphQLErrors:this.graphQLErrors||[],networkStatus:Z}),Y.observableQuery)this.setObservableQuery(Y.observableQuery);if(Y.lastRequestId)this.lastRequestId=Y.lastRequestId;return this},X.prototype.resetDiff=function(){this.lastDiff=void 0},X.prototype.getDiff=function(){var Y=this,Z=this.getDiffOptions();if(this.lastDiff&&_(Z,this.lastDiff.options))return this.lastDiff.diff;this.updateWatch(this.variables);var J=this.observableQuery;if(J&&J.options.fetchPolicy==="no-cache")return{complete:!1};var G=d("canonizeResults",function(){return Y.cache.diff(Z)});return this.updateLastDiff(G,Z),G},X.prototype.updateLastDiff=function(Y,Z){this.lastDiff=Y?{diff:Y,options:Z||this.getDiffOptions()}:void 0},X.prototype.getDiffOptions=function(Y){var Z;if(Y===void 0)Y=this.variables;return{query:this.document,variables:Y,returnPartialData:!0,optimistic:!0,canonizeResults:(Z=this.observableQuery)===null||Z===void 0?void 0:Z.options.canonizeResults}},X.prototype.setDiff=function(Y){var Z=this,J,G=this.lastDiff&&this.lastDiff.diff;if(Y&&!Y.complete&&d("getLastError",function(){var $;return($=Z.observableQuery)===null||$===void 0?void 0:$.getLastError()}))return;if(this.updateLastDiff(Y),!_(G&&G.result,Y&&Y.result))(J=this.observableQuery)===null||J===void 0||J.scheduleNotify()},X.prototype.setObservableQuery=function(Y){if(Y===this.observableQuery)return;if(this.observableQuery=Y,Y)Y.queryInfo=this},X.prototype.stop=function(){var Y;if(!this.stopped){this.stopped=!0,(Y=this.observableQuery)===null||Y===void 0||Y.resetNotifications(),this.cancel();var Z=this.observableQuery;if(Z)Z.stopPolling()}},X.prototype.cancel=function(){var Y;(Y=this.cancelWatch)===null||Y===void 0||Y.call(this),this.cancelWatch=void 0},X.prototype.updateWatch=function(Y){var Z=this;if(Y===void 0)Y=this.variables;var J=this.observableQuery;if(J&&J.options.fetchPolicy==="no-cache")return;var G=E(E({},this.getDiffOptions(Y)),{watcher:this,callback:function($){return Z.setDiff($)}});if(!this.lastWatch||!_(G,this.lastWatch))this.cancel(),this.cancelWatch=this.cache.watch(this.lastWatch=G)},X.prototype.resetLastWrite=function(){this.lastWrite=void 0},X.prototype.shouldWrite=function(Y,Z){var J=this.lastWrite;return!(J&&J.dmCount===KX.get(this.cache)&&_(Z,J.variables)&&_(Y.data,J.result.data))},X.prototype.markResult=function(Y,Z,J,G){var $=this,H,B=new GY,z=i(Y.errors)?Y.errors.slice(0):[];if((H=this.observableQuery)===null||H===void 0||H.resetNotifications(),"incremental"in Y&&i(Y.incremental)){var W=OZ(this.getDiff().result,Y);Y.data=W}else if("hasNext"in Y&&Y.hasNext){var U=this.getDiff();Y.data=B.merge(U.result,Y.data)}if(this.graphQLErrors=z,J.fetchPolicy==="no-cache")this.updateLastDiff({result:Y.data,complete:!0},this.getDiffOptions(J.variables));else if(G!==0)if(rZ(Y,J.errorPolicy))this.cache.performTransaction(function(Q){if($.shouldWrite(Y,J.variables))Q.writeQuery({query:Z,data:Y.data,variables:J.variables,overwrite:G===1}),$.lastWrite={result:Y,variables:J.variables,dmCount:KX.get($.cache)};else if($.lastDiff&&$.lastDiff.diff.complete){Y.data=$.lastDiff.diff.result;return}var P=$.getDiffOptions(J.variables),V=d("canonizeResults",function(){return Q.diff(P)});if(!$.stopped&&_($.variables,J.variables))$.updateWatch(J.variables);if($.updateLastDiff(V,P),V.complete)Y.data=V.result});else this.lastWrite=void 0},X.prototype.markReady=function(){return this.networkError=null,this.networkStatus=b.ready},X.prototype.markError=function(Y){var Z;if(this.networkStatus=b.error,this.lastWrite=void 0,(Z=this.observableQuery)===null||Z===void 0||Z.resetNotifications(),Y.graphQLErrors)this.graphQLErrors=Y.graphQLErrors;if(Y.networkError)this.networkError=Y.networkError;return Y},X}();function rZ(X,Y){if(Y===void 0)Y="none";var Z=Y==="ignore"||Y==="all",J=!qX(X);if(!J&&Z&&X.data)J=!0;return J}var $1=Object.prototype.hasOwnProperty,K9=Object.create(null),w9=function(){function X(Y){var Z=this;this.clientAwareness={},this.queries=new Map,this.fetchCancelFns=new Map,this.transformCache=new UX(n["queryManager.getDocumentInfo"]||2000),this.queryIdCounter=1,this.requestIdCounter=1,this.mutationIdCounter=1,this.inFlightLinkObservables=new XY(!1),this.noCacheWarningsByQueryId=new Set;var J=new gX(function($){return Z.cache.transformDocument($)},{cache:!1});this.cache=Y.cache,this.link=Y.link,this.defaultOptions=Y.defaultOptions,this.queryDeduplication=Y.queryDeduplication,this.clientAwareness=Y.clientAwareness,this.localState=Y.localState,this.ssrMode=Y.ssrMode,this.assumeImmutableResults=Y.assumeImmutableResults,this.dataMasking=Y.dataMasking;var G=Y.documentTransform;if(this.documentTransform=G?J.concat(G).concat(J):J,this.defaultContext=Y.defaultContext||Object.create(null),this.onBroadcast=Y.onBroadcast)this.mutationStore=Object.create(null)}return X.prototype.stop=function(){var Y=this;this.queries.forEach(function(Z,J){Y.stopQueryNoBroadcast(J)}),this.cancelPendingFetches(f(35))},X.prototype.cancelPendingFetches=function(Y){this.fetchCancelFns.forEach(function(Z){return Z(Y)}),this.fetchCancelFns.clear()},X.prototype.mutate=function(Y){return EY(this,arguments,void 0,function(Z){var J,G,$,H,B,z,W,U=Z.mutation,Q=Z.variables,P=Z.optimisticResponse,V=Z.updateQueries,q=Z.refetchQueries,D=q===void 0?[]:q,M=Z.awaitRefetchQueries,A=M===void 0?!1:M,F=Z.update,T=Z.onQueryUpdated,w=Z.fetchPolicy,C=w===void 0?((z=this.defaultOptions.mutate)===null||z===void 0?void 0:z.fetchPolicy)||"network-only":w,N=Z.errorPolicy,O=N===void 0?((W=this.defaultOptions.mutate)===null||W===void 0?void 0:W.errorPolicy)||"none":N,j=Z.keepRootFields,g=Z.context;return AY(this,function(p){switch(p.label){case 0:if(K(U,36),K(C==="network-only"||C==="no-cache",37),J=this.generateMutationId(),U=this.cache.transformForLink(this.transform(U)),G=this.getDocumentInfo(U).hasClientExports,Q=this.getVariables(U,Q),!G)return[3,2];return[4,this.localState.addExportedVariables(U,Q,g)];case 1:Q=p.sent(),p.label=2;case 2:return $=this.mutationStore&&(this.mutationStore[J]={mutation:U,variables:Q,loading:!0,error:null}),H=P&&this.markMutationOptimistic(P,{mutationId:J,document:U,variables:Q,fetchPolicy:C,errorPolicy:O,context:g,updateQueries:V,update:F,keepRootFields:j}),this.broadcastQueries(),B=this,[2,new Promise(function(kY,VY){return NZ(B.getObservableFromLink(U,E(E({},g),{optimisticResponse:H?P:void 0}),Q,{},!1),function(s){if(qX(s)&&O==="none")throw new xY({graphQLErrors:jZ(s)});if($)$.loading=!1,$.error=null;var zY=E({},s);if(typeof D==="function")D=D(zY);if(O==="ignore"&&qX(zY))delete zY.errors;return B.markMutationResult({mutationId:J,result:zY,document:U,variables:Q,fetchPolicy:C,errorPolicy:O,context:g,update:F,updateQueries:V,awaitRefetchQueries:A,refetchQueries:D,removeOptimistic:H?J:void 0,onQueryUpdated:T,keepRootFields:j})}).subscribe({next:function(s){if(B.broadcastQueries(),!("hasNext"in s)||s.hasNext===!1)kY(E(E({},s),{data:B.maskOperation({document:U,data:s.data,fetchPolicy:C,id:J})}))},error:function(s){if($)$.loading=!1,$.error=s;if(H)B.cache.removeOptimistic(J);B.broadcastQueries(),VY(s instanceof xY?s:new xY({networkError:s}))}})})]}})})},X.prototype.markMutationResult=function(Y,Z){var J=this;if(Z===void 0)Z=this.cache;var G=Y.result,$=[],H=Y.fetchPolicy==="no-cache";if(!H&&rZ(G,Y.errorPolicy)){if(!pY(G))$.push({result:G.data,dataId:"ROOT_MUTATION",query:Y.document,variables:Y.variables});if(pY(G)&&i(G.incremental)){var B=Z.diff({id:"ROOT_MUTATION",query:this.getDocumentInfo(Y.document).asQuery,variables:Y.variables,optimistic:!1,returnPartialData:!0}),z=void 0;if(B.result)z=OZ(B.result,G);if(typeof z!=="undefined")G.data=z,$.push({result:z,dataId:"ROOT_MUTATION",query:Y.document,variables:Y.variables})}var W=Y.updateQueries;if(W)this.queries.forEach(function(Q,P){var V=Q.observableQuery,q=V&&V.queryName;if(!q||!$1.call(W,q))return;var D=W[q],M=J.queries.get(P),A=M.document,F=M.variables,T=Z.diff({query:A,variables:F,returnPartialData:!0,optimistic:!1}),w=T.result,C=T.complete;if(C&&w){var N=D(w,{mutationResult:G,queryName:A&&yY(A)||void 0,queryVariables:F});if(N)$.push({result:N,dataId:"ROOT_QUERY",query:A,variables:F})}})}if($.length>0||(Y.refetchQueries||"").length>0||Y.update||Y.onQueryUpdated||Y.removeOptimistic){var U=[];if(this.refetchQueries({updateCache:function(Q){if(!H)$.forEach(function(D){return Q.write(D)});var P=Y.update,V=!N8(G)||pY(G)&&!G.hasNext;if(P){if(!H){var q=Q.diff({id:"ROOT_MUTATION",query:J.getDocumentInfo(Y.document).asQuery,variables:Y.variables,optimistic:!1,returnPartialData:!0});if(q.complete){if(G=E(E({},G),{data:q.result}),"incremental"in G)delete G.incremental;if("hasNext"in G)delete G.hasNext}}if(V)P(Q,G,{context:Y.context,variables:Y.variables})}if(!H&&!Y.keepRootFields&&V)Q.modify({id:"ROOT_MUTATION",fields:function(D,M){var{fieldName:A,DELETE:F}=M;return A==="__typename"?D:F}})},include:Y.refetchQueries,optimistic:!1,removeOptimistic:Y.removeOptimistic,onQueryUpdated:Y.onQueryUpdated||null}).forEach(function(Q){return U.push(Q)}),Y.awaitRefetchQueries||Y.onQueryUpdated)return Promise.all(U).then(function(){return G})}return Promise.resolve(G)},X.prototype.markMutationOptimistic=function(Y,Z){var J=this,G=typeof Y==="function"?Y(Z.variables,{IGNORE:K9}):Y;if(G===K9)return!1;return this.cache.recordOptimisticTransaction(function($){try{J.markMutationResult(E(E({},Z),{result:{data:G}}),$)}catch(H){globalThis.__DEV__!==!1&&K.error(H)}},Z.mutationId),!0},X.prototype.fetchQuery=function(Y,Z,J){return this.fetchConcastWithInfo(this.getOrCreateQuery(Y),Z,J).concast.promise},X.prototype.getQueryStore=function(){var Y=Object.create(null);return this.queries.forEach(function(Z,J){Y[J]={variables:Z.variables,networkStatus:Z.networkStatus,networkError:Z.networkError,graphQLErrors:Z.graphQLErrors}}),Y},X.prototype.resetErrors=function(Y){var Z=this.queries.get(Y);if(Z)Z.networkError=void 0,Z.graphQLErrors=[]},X.prototype.transform=function(Y){return this.documentTransform.transformDocument(Y)},X.prototype.getDocumentInfo=function(Y){var Z=this.transformCache;if(!Z.has(Y)){var J={hasClientExports:V5(Y),hasForcedResolvers:this.localState.shouldForceResolvers(Y),hasNonreactiveDirective:CY(["nonreactive"],Y),nonReactiveQuery:j5(Y),clientQuery:this.localState.clientQuery(Y),serverQuery:KZ([{name:"client",remove:!0},{name:"connection"},{name:"nonreactive"},{name:"unmask"}],Y),defaultVars:rY(BY(Y)),asQuery:E(E({},Y),{definitions:Y.definitions.map(function(G){if(G.kind==="OperationDefinition"&&G.operation!=="query")return E(E({},G),{operation:"query"});return G})})};Z.set(Y,J)}return Z.get(Y)},X.prototype.getVariables=function(Y,Z){return E(E({},this.getDocumentInfo(Y).defaultVars),Z)},X.prototype.watchQuery=function(Y){var Z=this.transform(Y.query);if(Y=E(E({},Y),{variables:this.getVariables(Z,Y.variables)}),typeof Y.notifyOnNetworkStatusChange==="undefined")Y.notifyOnNetworkStatusChange=!1;var J=new oZ(this),G=new XZ({queryManager:this,queryInfo:J,options:Y});if(G.lastQuery=Z,!XZ.inactiveOnCreation.getValue())this.queries.set(G.queryId,J);return J.init({document:Z,observableQuery:G,variables:G.variables}),G},X.prototype.query=function(Y,Z){var J=this;if(Z===void 0)Z=this.generateQueryId();K(Y.query,38),K(Y.query.kind==="Document",39),K(!Y.returnPartialData,40),K(!Y.pollInterval,41);var G=this.transform(Y.query);return this.fetchQuery(Z,E(E({},Y),{query:G})).then(function($){return $&&E(E({},$),{data:J.maskOperation({document:G,data:$.data,fetchPolicy:Y.fetchPolicy,id:Z})})}).finally(function(){return J.stopQuery(Z)})},X.prototype.generateQueryId=function(){return String(this.queryIdCounter++)},X.prototype.generateRequestId=function(){return this.requestIdCounter++},X.prototype.generateMutationId=function(){return String(this.mutationIdCounter++)},X.prototype.stopQueryInStore=function(Y){this.stopQueryInStoreNoBroadcast(Y),this.broadcastQueries()},X.prototype.stopQueryInStoreNoBroadcast=function(Y){var Z=this.queries.get(Y);if(Z)Z.stop()},X.prototype.clearStore=function(Y){if(Y===void 0)Y={discardWatches:!0};if(this.cancelPendingFetches(f(42)),this.queries.forEach(function(Z){if(Z.observableQuery)Z.networkStatus=b.loading;else Z.stop()}),this.mutationStore)this.mutationStore=Object.create(null);return this.cache.reset(Y)},X.prototype.getObservableQueries=function(Y){var Z=this;if(Y===void 0)Y="active";var J=new Map,G=new Map,$=new Map,H=new Set;if(Array.isArray(Y))Y.forEach(function(B){if(typeof B==="string")G.set(B,B),$.set(B,!1);else if(K5(B)){var z=TY(Z.transform(B));G.set(z,yY(B)),$.set(z,!1)}else if(h(B)&&B.query)H.add(B)});if(this.queries.forEach(function(B,z){var{observableQuery:W,document:U}=B;if(W){if(Y==="all"){J.set(z,W);return}var Q=W.queryName,P=W.options.fetchPolicy;if(P==="standby"||Y==="active"&&!W.hasObservers())return;if(Y==="active"||Q&&$.has(Q)||U&&$.has(TY(U))){if(J.set(z,W),Q)$.set(Q,!0);if(U)$.set(TY(U),!0)}}}),H.size)H.forEach(function(B){var z=CX("legacyOneTimeQuery"),W=Z.getOrCreateQuery(z).init({document:B.query,variables:B.variables}),U=new XZ({queryManager:Z,queryInfo:W,options:E(E({},B),{fetchPolicy:"network-only"})});K(U.queryId===z),W.setObservableQuery(U),J.set(z,U)});if(globalThis.__DEV__!==!1&&$.size)$.forEach(function(B,z){if(!B){var W=G.get(z);if(W)globalThis.__DEV__!==!1&&K.warn(43,W);else globalThis.__DEV__!==!1&&K.warn(44)}});return J},X.prototype.reFetchObservableQueries=function(Y){var Z=this;if(Y===void 0)Y=!1;var J=[];return this.getObservableQueries(Y?"all":"active").forEach(function(G,$){var H=G.options.fetchPolicy;if(d("resetLastResults",function(){return G.resetLastResults()}),Y||H!=="standby"&&H!=="cache-only")J.push(G.refetch());(Z.queries.get($)||G.queryInfo).setDiff(null)}),this.broadcastQueries(),Promise.all(J)},X.prototype.startGraphQLSubscription=function(Y){var Z=this,J=Y.query,G=Y.variables,$=Y.fetchPolicy,H=Y.errorPolicy,B=H===void 0?"none":H,z=Y.context,W=z===void 0?{}:z,U=Y.extensions,Q=U===void 0?{}:U;J=this.transform(J),G=this.getVariables(J,G);var P=function(q){return Z.getObservableFromLink(J,W,q,Q).map(function(D){if($!=="no-cache"){if(rZ(D,B))Z.cache.write({query:J,result:D.data,dataId:"ROOT_SUBSCRIPTION",variables:q});Z.broadcastQueries()}var M=qX(D),A=S8(D);if(M||A){var F={};if(M)F.graphQLErrors=D.errors;if(A)F.protocolErrors=D.extensions[lX];if(B==="none"||A)throw new xY(F)}if(B==="ignore")delete D.errors;return D})};if(this.getDocumentInfo(J).hasClientExports){var V=this.localState.addExportedVariables(J,G,W).then(P);return new S(function(q){var D=null;return V.then(function(M){return D=M.subscribe(q)},q.error),function(){return D&&D.unsubscribe()}})}return P(G)},X.prototype.stopQuery=function(Y){this.stopQueryNoBroadcast(Y),this.broadcastQueries()},X.prototype.stopQueryNoBroadcast=function(Y){this.stopQueryInStoreNoBroadcast(Y),this.removeQuery(Y)},X.prototype.removeQuery=function(Y){var Z;if(this.fetchCancelFns.delete(Y),this.queries.has(Y))(Z=this.queries.get(Y))===null||Z===void 0||Z.stop(),this.queries.delete(Y)},X.prototype.broadcastQueries=function(){if(this.onBroadcast)this.onBroadcast();this.queries.forEach(function(Y){var Z;return(Z=Y.observableQuery)===null||Z===void 0?void 0:Z.notify()})},X.prototype.getLocalState=function(){return this.localState},X.prototype.getObservableFromLink=function(Y,Z,J,G,$){var H=this,B;if($===void 0)$=(B=Z===null||Z===void 0?void 0:Z.queryDeduplication)!==null&&B!==void 0?B:this.queryDeduplication;var z,W=this.getDocumentInfo(Y),U=W.serverQuery,Q=W.clientQuery;if(U){var P=this,V=P.inFlightLinkObservables,q=P.link,D={query:U,variables:J,operationName:yY(U)||void 0,context:this.prepareContext(E(E({},Z),{forceFetch:!$})),extensions:G};if(Z=D.context,$){var M=TY(U),A=ZY(J),F=V.lookup(M,A);if(z=F.observable,!z){var T=new XX([DX(q,D)]);z=F.observable=T,T.beforeNext(function w(C,N){if(C==="next"&&"hasNext"in N&&N.hasNext)T.beforeNext(w);else V.remove(M,A)})}}else z=new XX([DX(q,D)])}else z=new XX([S.of({data:{}})]),Z=this.prepareContext(Z);if(Q)z=NZ(z,function(w){return H.localState.runResolvers({document:Q,remoteResult:w,context:Z,variables:J})});return z},X.prototype.getResultsFromLink=function(Y,Z,J){var G=Y.lastRequestId=this.generateRequestId(),$=this.cache.transformForLink(J.query);return NZ(this.getObservableFromLink($,J.context,J.variables),function(H){var B=jZ(H),z=B.length>0,W=J.errorPolicy;if(G>=Y.lastRequestId){if(z&&W==="none")throw Y.markError(new xY({graphQLErrors:B}));Y.markResult(H,$,J,Z),Y.markReady()}var U={data:H.data,loading:!1,networkStatus:b.ready};if(z&&W==="none")U.data=void 0;if(z&&W!=="ignore")U.errors=B,U.networkStatus=b.error;return U},function(H){var B=hZ(H)?H:new xY({networkError:H});if(G>=Y.lastRequestId)Y.markError(B);throw B})},X.prototype.fetchConcastWithInfo=function(Y,Z,J,G){var $=this;if(J===void 0)J=b.loading;if(G===void 0)G=Z.query;var H=this.getVariables(G,Z.variables),B=this.defaultOptions.watchQuery,z=Z.fetchPolicy,W=z===void 0?B&&B.fetchPolicy||"cache-first":z,U=Z.errorPolicy,Q=U===void 0?B&&B.errorPolicy||"none":U,P=Z.returnPartialData,V=P===void 0?!1:P,q=Z.notifyOnNetworkStatusChange,D=q===void 0?!1:q,M=Z.context,A=M===void 0?{}:M,F=Object.assign({},Z,{query:G,variables:H,fetchPolicy:W,errorPolicy:Q,returnPartialData:V,notifyOnNetworkStatusChange:D,context:A}),T=function(j){F.variables=j;var g=$.fetchQueryByPolicy(Y,F,J);if(F.fetchPolicy!=="standby"&&g.sources.length>0&&Y.observableQuery)Y.observableQuery.applyNextFetchPolicy("after-fetch",Z);return g},w=function(){return $.fetchCancelFns.delete(Y.queryId)};this.fetchCancelFns.set(Y.queryId,function(j){w(),setTimeout(function(){return C.cancel(j)})});var C,N;if(this.getDocumentInfo(F.query).hasClientExports)C=new XX(this.localState.addExportedVariables(F.query,F.variables,F.context).then(T).then(function(j){return j.sources})),N=!0;else{var O=T(F.variables);N=O.fromLink,C=new XX(O.sources)}return C.promise.then(w,w),{concast:C,fromLink:N}},X.prototype.refetchQueries=function(Y){var Z=this,J=Y.updateCache,G=Y.include,$=Y.optimistic,H=$===void 0?!1:$,B=Y.removeOptimistic,z=B===void 0?H?CX("refetchQueries"):void 0:B,W=Y.onQueryUpdated,U=new Map;if(G)this.getObservableQueries(G).forEach(function(P,V){U.set(V,{oq:P,lastDiff:(Z.queries.get(V)||P.queryInfo).getDiff()})});var Q=new Map;if(J)this.cache.batch({update:J,optimistic:H&&z||!1,removeOptimistic:z,onWatchUpdated:function(P,V,q){var D=P.watcher instanceof oZ&&P.watcher.observableQuery;if(D){if(W){U.delete(D.queryId);var M=W(D,V,q);if(M===!0)M=D.refetch();if(M!==!1)Q.set(D,M);return M}if(W!==null)U.set(D.queryId,{oq:D,lastDiff:q,diff:V})}}});if(U.size)U.forEach(function(P,V){var{oq:q,lastDiff:D,diff:M}=P,A;if(W){if(!M)M=d("canonizeResults",function(){return Z.cache.diff(q.queryInfo.getDiffOptions())});A=W(q,M,D)}if(!W||A===!0)A=q.refetch();if(A!==!1)Q.set(q,A);if(V.indexOf("legacyOneTimeQuery")>=0)Z.stopQueryNoBroadcast(V)});if(z)this.cache.removeOptimistic(z);return Q},X.prototype.maskOperation=function(Y){var Z,J,G,$=Y.document,H=Y.data;if(globalThis.__DEV__!==!1){var{fetchPolicy:B,id:z}=Y,W=(Z=BY($))===null||Z===void 0?void 0:Z.operation,U=((J=W===null||W===void 0?void 0:W[0])!==null&&J!==void 0?J:"o")+z;if(this.dataMasking&&B==="no-cache"&&!D5($)&&!this.noCacheWarningsByQueryId.has(U))this.noCacheWarningsByQueryId.add(U),globalThis.__DEV__!==!1&&K.warn(45,(G=yY($))!==null&&G!==void 0?G:"Unnamed ".concat(W!==null&&W!==void 0?W:"operation"))}return this.dataMasking?i5(H,$,this.cache):H},X.prototype.maskFragment=function(Y){var{data:Z,fragment:J,fragmentName:G}=Y;return this.dataMasking?rX(Z,J,this.cache,G):Z},X.prototype.fetchQueryByPolicy=function(Y,Z,J){var G=this,$=Z.query,H=Z.variables,B=Z.fetchPolicy,z=Z.refetchWritePolicy,W=Z.errorPolicy,U=Z.returnPartialData,Q=Z.context,P=Z.notifyOnNetworkStatusChange,V=Y.networkStatus;Y.init({document:$,variables:H,networkStatus:J});var q=function(){return Y.getDiff()},D=function(w,C){if(C===void 0)C=Y.networkStatus||b.loading;var N=w.result;if(globalThis.__DEV__!==!1&&!U&&!_(N,{}))P6(w.missing);var O=function(j){return S.of(E({data:j,loading:lY(C),networkStatus:C},w.complete?null:{partial:!0}))};if(N&&G.getDocumentInfo($).hasForcedResolvers)return G.localState.runResolvers({document:$,remoteResult:{data:N},context:Q,variables:H,onlyRunForcedResolvers:!0}).then(function(j){return O(j.data||void 0)});if(W==="none"&&C===b.refetch&&Array.isArray(w.missing))return O(void 0);return O(N)},M=B==="no-cache"?0:J===b.refetch&&z!=="merge"?1:2,A=function(){return G.getResultsFromLink(Y,M,{query:$,variables:H,context:Q,fetchPolicy:B,errorPolicy:W})},F=P&&typeof V==="number"&&V!==J&&lY(J);switch(B){default:case"cache-first":{var T=q();if(T.complete)return{fromLink:!1,sources:[D(T,Y.markReady())]};if(U||F)return{fromLink:!0,sources:[D(T),A()]};return{fromLink:!0,sources:[A()]}}case"cache-and-network":{var T=q();if(T.complete||U||F)return{fromLink:!0,sources:[D(T),A()]};return{fromLink:!0,sources:[A()]}}case"cache-only":return{fromLink:!1,sources:[D(q(),Y.markReady())]};case"network-only":if(F)return{fromLink:!0,sources:[D(q()),A()]};return{fromLink:!0,sources:[A()]};case"no-cache":if(F)return{fromLink:!0,sources:[D(Y.getDiff()),A()]};return{fromLink:!0,sources:[A()]};case"standby":return{fromLink:!1,sources:[]}}},X.prototype.getOrCreateQuery=function(Y){if(Y&&!this.queries.has(Y))this.queries.set(Y,new oZ(this,Y));return this.queries.get(Y)},X.prototype.prepareContext=function(Y){if(Y===void 0)Y={};var Z=this.localState.prepareContext(Y);return E(E(E({},this.defaultContext),Z),{clientAwareness:this.clientAwareness})},X}();var C9=function(){function X(Y){var{cache:Z,client:J,resolvers:G,fragmentMatcher:$}=Y;if(this.selectionsToResolveCache=new WeakMap,this.cache=Z,J)this.client=J;if(G)this.addResolvers(G);if($)this.setFragmentMatcher($)}return X.prototype.addResolvers=function(Y){var Z=this;if(this.resolvers=this.resolvers||{},Array.isArray(Y))Y.forEach(function(J){Z.resolvers=S5(Z.resolvers,J)});else this.resolvers=S5(this.resolvers,Y)},X.prototype.setResolvers=function(Y){this.resolvers={},this.addResolvers(Y)},X.prototype.getResolvers=function(){return this.resolvers||{}},X.prototype.runResolvers=function(Y){return EY(this,arguments,void 0,function(Z){var{document:J,remoteResult:G,context:$,variables:H,onlyRunForcedResolvers:B}=Z,z=B===void 0?!1:B;return AY(this,function(W){if(J)return[2,this.resolveDocument(J,G.data,$,H,this.fragmentMatcher,z).then(function(U){return E(E({},G),{data:U.result})})];return[2,G]})})},X.prototype.setFragmentMatcher=function(Y){this.fragmentMatcher=Y},X.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},X.prototype.clientQuery=function(Y){if(CY(["client"],Y)){if(this.resolvers)return Y}return null},X.prototype.serverQuery=function(Y){return mX(Y)},X.prototype.prepareContext=function(Y){var Z=this.cache;return E(E({},Y),{cache:Z,getCacheKey:function(J){return Z.identify(J)}})},X.prototype.addExportedVariables=function(Y){return EY(this,arguments,void 0,function(Z,J,G){if(J===void 0)J={};if(G===void 0)G={};return AY(this,function($){if(Z)return[2,this.resolveDocument(Z,this.buildRootValueFromCache(Z,J)||{},this.prepareContext(G),J).then(function(H){return E(E({},J),H.exportedVariables)})];return[2,E({},J)]})})},X.prototype.shouldForceResolvers=function(Y){var Z=!1;return a(Y,{Directive:{enter:function(J){if(J.name.value==="client"&&J.arguments){if(Z=J.arguments.some(function(G){return G.name.value==="always"&&G.value.kind==="BooleanValue"&&G.value.value===!0}),Z)return wY}}}}),Z},X.prototype.buildRootValueFromCache=function(Y,Z){return this.cache.diff({query:O5(Y),variables:Z,returnPartialData:!0,optimistic:!1}).result},X.prototype.resolveDocument=function(Y,Z){return EY(this,arguments,void 0,function(J,G,$,H,B,z){var W,U,Q,P,V,q,D,M,A,F,T;if($===void 0)$={};if(H===void 0)H={};if(B===void 0)B=function(){return!0};if(z===void 0)z=!1;return AY(this,function(w){return W=LY(J),U=WY(J),Q=HY(U),P=this.collectSelectionsToResolve(W,Q),V=W.operation,q=V?V.charAt(0).toUpperCase()+V.slice(1):"Query",D=this,M=D.cache,A=D.client,F={fragmentMap:Q,context:E(E({},$),{cache:M,client:A}),variables:H,fragmentMatcher:B,defaultOperationType:q,exportedVariables:{},selectionsToResolve:P,onlyRunForcedResolvers:z},T=!1,[2,this.resolveSelectionSet(W.selectionSet,T,G,F).then(function(C){return{result:C,exportedVariables:F.exportedVariables}})]})})},X.prototype.resolveSelectionSet=function(Y,Z,J,G){return EY(this,void 0,void 0,function(){var $,H,B,z,W,U=this;return AY(this,function(Q){return $=G.fragmentMap,H=G.context,B=G.variables,z=[J],W=function(P){return EY(U,void 0,void 0,function(){var V,q;return AY(this,function(D){if(!Z&&!G.selectionsToResolve.has(P))return[2];if(!DY(P,B))return[2];if(JY(P))return[2,this.resolveField(P,Z,J,G).then(function(M){var A;if(typeof M!=="undefined")z.push((A={},A[YY(P)]=M,A))})];if(C5(P))V=P;else V=$[P.name.value],K(V,21,P.name.value);if(V&&V.typeCondition){if(q=V.typeCondition.name.value,G.fragmentMatcher(J,q,H))return[2,this.resolveSelectionSet(V.selectionSet,Z,J,G).then(function(M){z.push(M)})]}return[2]})})},[2,Promise.all(Y.selections.map(W)).then(function(){return eY(z)})]})})},X.prototype.resolveField=function(Y,Z,J,G){return EY(this,void 0,void 0,function(){var $,H,B,z,W,U,Q,P,V,q=this;return AY(this,function(D){if(!J)return[2,null];if($=G.variables,H=Y.name.value,B=YY(Y),z=H!==B,W=J[B]||J[H],U=Promise.resolve(W),!G.onlyRunForcedResolvers||this.shouldForceResolvers(Y)){if(Q=J.__typename||G.defaultOperationType,P=this.resolvers&&this.resolvers[Q],P){if(V=P[z?H:B],V)U=Promise.resolve(TX.withValue(this.cache,V,[J,IY(Y,$),G.context,{field:Y,fragmentMap:G.fragmentMap}]))}}return[2,U.then(function(M){var A,F;if(M===void 0)M=W;if(Y.directives)Y.directives.forEach(function(w){if(w.name.value==="export"&&w.arguments)w.arguments.forEach(function(C){if(C.name.value==="as"&&C.value.kind==="StringValue")G.exportedVariables[C.value.value]=M})});if(!Y.selectionSet)return M;if(M==null)return M;var T=(F=(A=Y.directives)===null||A===void 0?void 0:A.some(function(w){return w.name.value==="client"}))!==null&&F!==void 0?F:!1;if(Array.isArray(M))return q.resolveSubSelectedArray(Y,Z||T,M,G);if(Y.selectionSet)return q.resolveSelectionSet(Y.selectionSet,Z||T,M,G)})]})})},X.prototype.resolveSubSelectedArray=function(Y,Z,J,G){var $=this;return Promise.all(J.map(function(H){if(H===null)return null;if(Array.isArray(H))return $.resolveSubSelectedArray(Y,Z,H,G);if(Y.selectionSet)return $.resolveSelectionSet(Y.selectionSet,Z,H,G)}))},X.prototype.collectSelectionsToResolve=function(Y,Z){var J=function(H){return!Array.isArray(H)},G=this.selectionsToResolveCache;function $(H){if(!G.has(H)){var B=new Set;G.set(H,B),a(H,{Directive:function(z,W,U,Q,P){if(z.name.value==="client")P.forEach(function(V){if(J(V)&&jX(V))B.add(V)})},FragmentSpread:function(z,W,U,Q,P){var V=Z[z.name.value];K(V,22,z.name.value);var q=$(V);if(q.size>0)P.forEach(function(D){if(J(D)&&jX(D))B.add(D)}),B.add(z),q.forEach(function(D){B.add(D)})}})}return G.get(H)}return $(Y)},X}();var R9=!1;var iZ=function(){function X(Y){var Z=this,J,G,$;if(this.resetStoreCallbacks=[],this.clearStoreCallbacks=[],!Y.cache)throw f(16);var{uri:H,credentials:B,headers:z,cache:W,documentTransform:U,ssrMode:Q}=Y,P=Q===void 0?!1:Q,V=Y.ssrForceFetchDelay,q=V===void 0?0:V,D=Y.connectToDevTools,M=Y.queryDeduplication,A=M===void 0?!0:M,F=Y.defaultOptions,T=Y.defaultContext,w=Y.assumeImmutableResults,C=w===void 0?W.assumeImmutableResults:w,N=Y.resolvers,O=Y.typeDefs,j=Y.fragmentMatcher,g=Y.clientAwareness,p=Y.name,kY=Y.version,VY=Y.devtools,s=Y.dataMasking;if(globalThis.__DEV__!==!1){if(y(Y,"connectToDevTools","ApolloClient","Please use `devtools.enabled` instead."),y(Y,"uri","ApolloClient","Please initialize an instance of `HttpLink` with `uri` instead."),y(Y,"credentials","ApolloClient","Please initialize an instance of `HttpLink` with `credentials` instead."),y(Y,"headers","ApolloClient","Please initialize an instance of `HttpLink` with `headers` instead."),y(Y,"name","ApolloClient","Please use the `clientAwareness.name` option instead."),y(Y,"version","ApolloClient","Please use the `clientAwareness.version` option instead."),y(Y,"typeDefs","ApolloClient"),!Y.link)globalThis.__DEV__!==!1&&K.warn(17)}var zY=Y.link;if(!zY)zY=H?new aX({uri:H,credentials:B,headers:z}):PY.empty();if(this.link=zY,this.cache=W,this.disableNetworkFetches=P||q>0,this.queryDeduplication=A,this.defaultOptions=F||Object.create(null),this.typeDefs=O,this.devtoolsConfig=E(E({},VY),{enabled:(J=VY===null||VY===void 0?void 0:VY.enabled)!==null&&J!==void 0?J:D}),this.devtoolsConfig.enabled===void 0)this.devtoolsConfig.enabled=globalThis.__DEV__!==!1;if(q)setTimeout(function(){return Z.disableNetworkFetches=!1},q);if(this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.watchFragment=this.watchFragment.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this),this.version=wX,this.localState=new C9({cache:W,client:this,resolvers:N,fragmentMatcher:j}),this.queryManager=new w9({cache:this.cache,link:this.link,defaultOptions:this.defaultOptions,defaultContext:T,documentTransform:U,queryDeduplication:A,ssrMode:P,dataMasking:!!s,clientAwareness:{name:(G=g===null||g===void 0?void 0:g.name)!==null&&G!==void 0?G:p,version:($=g===null||g===void 0?void 0:g.version)!==null&&$!==void 0?$:kY},localState:this.localState,assumeImmutableResults:C,onBroadcast:this.devtoolsConfig.enabled?function(){if(Z.devToolsHookCb)Z.devToolsHookCb({action:{},state:{queries:Z.queryManager.getQueryStore(),mutations:Z.queryManager.mutationStore||{}},dataWithOptimisticResults:Z.cache.extract(!0)})}:void 0}),this.devtoolsConfig.enabled)this.connectToDevTools()}return Object.defineProperty(X.prototype,"prioritizeCacheValues",{get:function(){return this.disableNetworkFetches},set:function(Y){this.disableNetworkFetches=Y},enumerable:!1,configurable:!0}),X.prototype.connectToDevTools=function(){if(typeof window==="undefined")return;var Y=window,Z=Symbol.for("apollo.devtools");if((Y[Z]=Y[Z]||[]).push(this),Y.__APOLLO_CLIENT__=this,!R9&&globalThis.__DEV__!==!1){if(R9=!0,window.document&&window.top===window.self&&/^(https?|file):$/.test(window.location.protocol))setTimeout(function(){if(!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__){var J=window.navigator,G=J&&J.userAgent,$=void 0;if(typeof G==="string"){if(G.indexOf("Chrome/")>-1)$="https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";else if(G.indexOf("Firefox/")>-1)$="https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/"}if($)globalThis.__DEV__!==!1&&K.log("Download the Apollo DevTools for a better development experience: %s",$)}},1e4)}},Object.defineProperty(X.prototype,"documentTransform",{get:function(){return this.queryManager.documentTransform},enumerable:!1,configurable:!0}),X.prototype.stop=function(){this.queryManager.stop()},X.prototype.watchQuery=function(Y){if(this.defaultOptions.watchQuery)Y=pX(this.defaultOptions.watchQuery,Y);if(this.disableNetworkFetches&&(Y.fetchPolicy==="network-only"||Y.fetchPolicy==="cache-and-network"))Y=E(E({},Y),{fetchPolicy:"cache-first"});if(globalThis.__DEV__!==!1)y(Y,"canonizeResults","client.watchQuery"),y(Y,"partialRefetch","client.watchQuery");return this.queryManager.watchQuery(Y)},X.prototype.query=function(Y){if(this.defaultOptions.query)Y=pX(this.defaultOptions.query,Y);if(K(Y.fetchPolicy!=="cache-and-network",18),this.disableNetworkFetches&&Y.fetchPolicy==="network-only")Y=E(E({},Y),{fetchPolicy:"cache-first"});if(globalThis.__DEV__!==!1){if(y(Y,"canonizeResults","client.query"),y(Y,"notifyOnNetworkStatusChange","client.query","This option does not affect `client.query` and can be safely removed."),Y.fetchPolicy==="standby")globalThis.__DEV__!==!1&&K.warn(19)}return this.queryManager.query(Y)},X.prototype.mutate=function(Y){if(this.defaultOptions.mutate)Y=pX(this.defaultOptions.mutate,Y);return this.queryManager.mutate(Y)},X.prototype.subscribe=function(Y){var Z=this,J=this.queryManager.generateQueryId();return this.queryManager.startGraphQLSubscription(Y).map(function(G){return E(E({},G),{data:Z.queryManager.maskOperation({document:Y.query,data:G.data,fetchPolicy:Y.fetchPolicy,id:J})})})},X.prototype.readQuery=function(Y,Z){if(Z===void 0)Z=!1;return this.cache.readQuery(Y,Z)},X.prototype.watchFragment=function(Y){var Z;return this.cache.watchFragment(E(E({},Y),(Z={},Z[Symbol.for("apollo.dataMasking")]=this.queryManager.dataMasking,Z)))},X.prototype.readFragment=function(Y,Z){if(Z===void 0)Z=!1;return this.cache.readFragment(Y,Z)},X.prototype.writeQuery=function(Y){var Z=this.cache.writeQuery(Y);if(Y.broadcast!==!1)this.queryManager.broadcastQueries();return Z},X.prototype.writeFragment=function(Y){var Z=this.cache.writeFragment(Y);if(Y.broadcast!==!1)this.queryManager.broadcastQueries();return Z},X.prototype.__actionHookForDevTools=function(Y){this.devToolsHookCb=Y},X.prototype.__requestRaw=function(Y){return DX(this.link,Y)},X.prototype.resetStore=function(){var Y=this;return Promise.resolve().then(function(){return Y.queryManager.clearStore({discardWatches:!1})}).then(function(){return Promise.all(Y.resetStoreCallbacks.map(function(Z){return Z()}))}).then(function(){return Y.reFetchObservableQueries()})},X.prototype.clearStore=function(){var Y=this;return Promise.resolve().then(function(){return Y.queryManager.clearStore({discardWatches:!0})}).then(function(){return Promise.all(Y.clearStoreCallbacks.map(function(Z){return Z()}))})},X.prototype.onResetStore=function(Y){var Z=this;return this.resetStoreCallbacks.push(Y),function(){Z.resetStoreCallbacks=Z.resetStoreCallbacks.filter(function(J){return J!==Y})}},X.prototype.onClearStore=function(Y){var Z=this;return this.clearStoreCallbacks.push(Y),function(){Z.clearStoreCallbacks=Z.clearStoreCallbacks.filter(function(J){return J!==Y})}},X.prototype.reFetchObservableQueries=function(Y){return this.queryManager.reFetchObservableQueries(Y)},X.prototype.refetchQueries=function(Y){var Z=this.queryManager.refetchQueries(Y),J=[],G=[];Z.forEach(function(H,B){J.push(B),G.push(H)});var $=Promise.all(G);return $.queries=J,$.results=G,$.catch(function(H){globalThis.__DEV__!==!1&&K.debug(20,H)}),$},X.prototype.getObservableQueries=function(Y){if(Y===void 0)Y="active";return this.queryManager.getObservableQueries(Y)},X.prototype.extract=function(Y){return this.cache.extract(Y)},X.prototype.restore=function(Y){return this.cache.restore(Y)},X.prototype.addResolvers=function(Y){this.localState.addResolvers(Y)},X.prototype.setResolvers=function(Y){this.localState.setResolvers(Y)},X.prototype.getResolvers=function(){return this.localState.getResolvers()},X.prototype.setLocalStateFragmentMatcher=function(Y){this.localState.setFragmentMatcher(Y)},X.prototype.setLink=function(Y){this.link=this.queryManager.link=Y},Object.defineProperty(X.prototype,"defaultContext",{get:function(){return this.queryManager.defaultContext},enumerable:!1,configurable:!0}),X}();if(globalThis.__DEV__!==!1)iZ.prototype.getMemoryInternals=s6;var tZ=new Map,E6=new Map,N9=!0,eZ=!1;function I9(X){return X.replace(/[\s,]+/g," ").trim()}function H1(X){return I9(X.source.body.substring(X.start,X.end))}function B1(X){var Y=new Set,Z=[];return X.definitions.forEach(function(J){if(J.kind==="FragmentDefinition"){var G=J.name.value,$=H1(J.loc),H=E6.get(G);if(H&&!H.has($)){if(N9)console.warn("Warning: fragment with name "+G+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names")}else if(!H)E6.set(G,H=new Set);if(H.add($),!Y.has($))Y.add($),Z.push(J)}else Z.push(J)}),E(E({},X),{definitions:Z})}function W1(X){var Y=new Set(X.definitions);Y.forEach(function(J){if(J.loc)delete J.loc;Object.keys(J).forEach(function(G){var $=J[G];if($&&typeof $==="object")Y.add($)})});var Z=X.loc;if(Z)delete Z.startToken,delete Z.endToken;return X}function z1(X){var Y=I9(X);if(!tZ.has(Y)){var Z=qZ(X,{experimentalFragmentVariables:eZ,allowLegacyFragmentVariables:eZ});if(!Z||Z.kind!=="Document")throw new Error("Not a valid GraphQL document.");tZ.set(Y,W1(B1(Z)))}return tZ.get(Y)}function sY(X){var Y=[];for(var Z=1;Z<arguments.length;Z++)Y[Z-1]=arguments[Z];if(typeof X==="string")X=[X];var J=X[0];return Y.forEach(function(G,$){if(G&&G.kind==="Document")J+=G.loc.source.body;else J+=G;J+=X[$+1]}),z1(J)}function O9(){tZ.clear(),E6.clear()}function j9(){N9=!1}function S9(){eZ=!0}function x9(){eZ=!1}var ZZ={gql:sY,resetCaches:O9,disableFragmentWarnings:j9,enableExperimentalFragmentVariables:S9,disableExperimentalFragmentVariables:x9};(function(X){X.gql=ZZ.gql,X.resetCaches=ZZ.resetCaches,X.disableFragmentWarnings=ZZ.disableFragmentWarnings,X.enableExperimentalFragmentVariables=ZZ.enableExperimentalFragmentVariables,X.disableExperimentalFragmentVariables=ZZ.disableExperimentalFragmentVariables})(sY||(sY={}));sY.default=sY;F6(globalThis.__DEV__!==!1?"log":"silent");function k9(X){return new PY(function(Y,Z){var J=t(Y,[]);return new S(function(G){var $,H=!1;return Promise.resolve(J).then(function(B){return X(B,Y.getContext())}).then(Y.setContext).then(function(){if(H)return;$=Z(Y).subscribe({next:G.next.bind(G),error:G.error.bind(G),complete:G.complete.bind(G)})}).catch(G.error.bind(G)),function(){if(H=!0,$)$.unsubscribe()}})})}globalThis.__DEV__=!0;var U1="http://localhost:8081/v1/graphql",Q1="myadminsecretkey",P1=new aX({uri:U1}),V1=k9((X,{headers:Y})=>{return{headers:{...Y,"X-Hasura-Admin-Secret":Q1}}});class h9{fields=[];loops=[];client;currentOffset=0;constructor(){console.log("\uD83C\uDFAF Stencil GraphQL DOM Bindings with Apollo Client + DevTools initialized!"),this.client=new iZ({link:V1.concat(P1),cache:new YZ,connectToDevTools:!0,defaultOptions:{watchQuery:{errorPolicy:"all"},query:{errorPolicy:"all"}}}),console.log("\uD83D\uDD17 Using global Apollo Client for GraphQL queries"),window.__APOLLO_CLIENT__=this.client}scanDOM(){console.log("\uD83D\uDD0D Scanning DOM for GraphQL field bindings..."),this.scanLoopContainers();let X=document.querySelectorAll("[data-gql-field]:not([data-gql-template] [data-gql-field])");this.fields=[],X.forEach((Y)=>{let Z=Y.getAttribute("data-gql-field");if(Z)this.fields.push({element:Y,path:Z}),console.log(`\uD83D\uDCCD Found field binding: ${Z}`)}),console.log(`\u2705 Found ${this.fields.length} field bindings and ${this.loops.length} loop containers`),this.setupRefreshButtons(),this.setupPaginationButtons()}scanLoopContainers(){let X=document.querySelectorAll("[data-gql-loop]");this.loops=[],X.forEach((Y)=>{let Z=Y.getAttribute("data-gql-loop"),J=Y.getAttribute("data-gql-limit"),G=Y.querySelector("[data-gql-template]");if(Z&&G&&J){let $=parseInt(J)||5;this.loops.push({element:Y,arrayName:Z,limit:$,template:G}),console.log(`\uD83D\uDD04 Found loop container: ${Z} (limit: ${$})`)}})}getTemplateFields(X){let Y=X.querySelectorAll("[data-gql-field]"),Z=new Set;return Y.forEach((J)=>{let G=J.getAttribute("data-gql-field");if(G)Z.add(G)}),Array.from(Z)}setupRefreshButtons(){let X=document.querySelectorAll("[data-gql-refresh]");X.forEach((Y)=>{Y.addEventListener("click",async()=>{console.log("\uD83D\uDD04 Refresh button clicked - invalidating cache and refetching data..."),this.clearCache();let Z=this.buildQuery();if(Z){let J=await this.executeQuery(Z,!1);if(J)this.updateDOM(J)}console.log("\u2705 Data refreshed successfully!")})}),console.log(`\uD83D\uDD04 Set up ${X.length} refresh button listeners`)}setupPaginationButtons(){let X=document.querySelectorAll("[data-gql-paginate]");X.forEach((Y)=>{let Z=Y.getAttribute("data-gql-paginate");Y.addEventListener("click",async()=>{console.log(`\uD83D\uDCC4 Pagination button clicked: ${Z}`);let J=this.loops.length>0?this.loops[0].limit:5;if(Z==="next")this.currentOffset+=J;else if(Z==="prev"&&this.currentOffset>=J)this.currentOffset-=J;if(this.currentOffset<0)this.currentOffset=0;console.log(`\uD83D\uDCC4 Current offset: ${this.currentOffset}, page size: ${J}`);let G=this.buildQuery();if(G){let $=await this.executeQuery(G,!1);if($)this.updateDOM($)}})}),console.log(`\uD83D\uDCC4 Set up ${X.length} pagination button listeners`)}buildQueryStructure(){console.log("\uD83C\uDFD7\uFE0F  Building query structure from field paths...");let X={};return this.fields.forEach(({path:Y})=>{if(Y.startsWith("widgets.")&&/widgets\.\d+\./.test(Y))return;if(Y==="current_page")return;let Z=Y.split("."),J=X;Z.forEach((G,$)=>{if($===Z.length-1)J[G]=!0;else{if(!J[G])J[G]={};J=J[G]}})}),console.log("\uD83D\uDCCA Query structure built:",X),X}structureToGraphQL(X,Y=0){let Z="  ".repeat(Y),J="";return Object.entries(X).forEach(([G,$])=>{if($===!0)J+=`${Z}${G}\n`;else J+=`${Z}${G} {\n`,J+=this.structureToGraphQL($,Y+1),J+=`${Z}}\n`}),J}buildQuery(){if(console.log("\uD83C\uDFD7\uFE0F  Building GraphQL query from field paths..."),this.fields.length===0)return console.log("\u26A0\uFE0F  No fields found to query"),null;let X=this.buildQueryStructure(),Y=this.structureToGraphQL(X,1),Z="";this.loops.forEach((G)=>{let $=this.getTemplateFields(G.template),H="";$.forEach((B)=>{if(B==="category")H+="      category {\n        name\n      }\n";else H+=`      ${B}\n`}),Z+=`    ${G.arrayName}(limit: ${G.limit}, offset: ${this.currentOffset}, order_by: {id: asc}) {
${H}    }
`,console.log(`\uD83D\uDD04 Generated query for ${G.arrayName} with fields:`,$)});let J=`
      query StencilGeneratedQuery {
${Z}${Y}      }
    `;console.log("\uD83D\uDCDD Generated GraphQL query:",J);try{return sY(J)}catch(G){return console.error("\u274C Invalid GraphQL query generated:",G),null}}async executeQuery(X,Y=!0){console.log("\uD83D\uDE80 Executing GraphQL query with Apollo Client...");try{let Z=await this.client.query({query:X,fetchPolicy:Y?"cache-first":"network-only",errorPolicy:"all",context:{queryName:"StencilGeneratedQuery",source:"stencil-dom-bindings"}});return console.log("\uD83D\uDCCA Query result:",Z.data),Z.data}catch(Z){return console.error("\u274C Query execution failed:",Z),null}}updateDOM(X){console.log("\uD83C\uDFA8 Updating DOM with query results..."),this.fields.forEach(({element:Y,path:Z})=>{let J;if(Z==="current_page"){let G=this.loops.length>0?this.loops[0].limit:5;J=Math.floor(this.currentOffset/G)+1}else J=this.getNestedValue(X,Z);if(J!==void 0&&J!==null){let G;if(typeof J==="number")G=Number(J).toFixed(2);else if(typeof J==="boolean")G=J?"Yes":"No";else G=J.toString();Y.textContent=G,console.log(`\u2728 Updated ${Z}: ${G}`)}else console.warn(`\u26A0\uFE0F  No value found for path: ${Z}`),Y.textContent="N/A"}),this.updateLoopContainers(X)}updateLoopContainers(X){console.log("\uD83C\uDFA8 Updating loop containers with data:",X),this.loops.forEach((Y)=>{let Z=X[Y.arrayName];if(console.log(`\uD83D\uDD04 Processing loop ${Y.arrayName}:`,Z),!Array.isArray(Z)){console.warn(`\u26A0\uFE0F  No array data found for loop: ${Y.arrayName}`,X);return}if(Z.length===0)console.warn(`\u26A0\uFE0F  Empty array for loop: ${Y.arrayName}`);let J=Y.element.querySelectorAll("[data-gql-replicated]");console.log(`\uD83E\uDDF9 Clearing ${J.length} existing replicated items`),J.forEach((G)=>G.remove()),Y.template.style.display="",Z.forEach((G,$)=>{console.log(`\uD83D\uDCCB Creating replica ${$} with data:`,G);let H=Y.template.cloneNode(!0);H.setAttribute("data-gql-replicated","true"),H.removeAttribute("data-gql-template"),H.querySelectorAll("[data-gql-field]").forEach((z)=>{let W=z.getAttribute("data-gql-field");if(W){let U=G[W];if(W==="category"&&G.category)U=G.category.name;if(U!==void 0&&U!==null){let Q;if(typeof U==="number")Q=Number(U).toFixed(2);else if(typeof U==="boolean")Q=U?"Yes":"No";else Q=U.toString();z.textContent=Q,console.log(`  \u2728 Updated ${W}: ${Q}`)}else z.textContent="N/A",console.log(`  \u26A0\uFE0F  No value for ${W}`)}}),Y.element.insertBefore(H,Y.template)}),Y.template.style.display="none",console.log(`\uD83D\uDD04 Updated loop container ${Y.arrayName} with ${Z.length} items`)})}getNestedValue(X,Y){if(Y.startsWith("widgets.")&&/widgets\.\d+\./.test(Y)){let Z=Y.match(/^widgets\.(\d+)\.(.+)$/);if(Z&&X.widgets&&Array.isArray(X.widgets)){let J=parseInt(Z[1]),G=Z[2];if(G==="category")return X.widgets[J]?.category?.name;return X.widgets[J]?.[G]}return}return Y.split(".").reduce((Z,J)=>Z?.[J],X)}async run(){console.log("\uD83C\uDFAC Starting Stencil GraphQL DOM binding process..."),this.scanDOM();let X=this.buildQuery();if(X){let Y=await this.executeQuery(X,!0);if(Y)this.updateDOM(Y)}console.log("\uD83C\uDF89 Stencil GraphQL process complete!")}async refresh(){console.log("\uD83D\uDD04 Refreshing GraphQL data...");let X=this.buildQuery();if(X){let Y=await this.executeQuery(X,!1);if(Y)this.updateDOM(Y)}}clearCache(){console.log("\uD83D\uDDD1\uFE0F  Clearing Apollo cache..."),this.client.cache.reset()}getCacheStats(){let X=this.client.cache.extract();return{cacheSize:X?Object.keys(X).length:0,cache:X}}getApolloClient(){return this.client}}var A6=new h9;window.stencil=A6;if(document.readyState==="loading")document.addEventListener("DOMContentLoaded",()=>{console.log("\uD83D\uDE80 DOM is ready, initializing Stencil..."),A6.run()});else console.log("\uD83D\uDE80 DOM already ready, initializing Stencil..."),A6.run();

//# debugId=C271597A522FEF3C64756E2164756E21
//# sourceMappingURL=data:application/json;base64,
