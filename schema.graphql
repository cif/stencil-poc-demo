schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "categories"
"""
type categories {
  created_at: timestamp
  description: String
  id: Int!
  name: String!

  """An array relationship"""
  widgets(
    """distinct select on columns"""
    distinct_on: [widgets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [widgets_order_by!]

    """filter the rows returned"""
    where: widgets_bool_exp
  ): [widgets!]!

  """An aggregate relationship"""
  widgets_aggregate(
    """distinct select on columns"""
    distinct_on: [widgets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [widgets_order_by!]

    """filter the rows returned"""
    where: widgets_bool_exp
  ): widgets_aggregate!
}

"""
aggregated selection of "categories"
"""
type categories_aggregate {
  aggregate: categories_aggregate_fields
  nodes: [categories!]!
}

"""
aggregate fields of "categories"
"""
type categories_aggregate_fields {
  avg: categories_avg_fields
  count(columns: [categories_select_column!], distinct: Boolean): Int!
  max: categories_max_fields
  min: categories_min_fields
  stddev: categories_stddev_fields
  stddev_pop: categories_stddev_pop_fields
  stddev_samp: categories_stddev_samp_fields
  sum: categories_sum_fields
  var_pop: categories_var_pop_fields
  var_samp: categories_var_samp_fields
  variance: categories_variance_fields
}

"""aggregate avg on columns"""
type categories_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "categories". All fields are combined with a logical 'AND'.
"""
input categories_bool_exp {
  _and: [categories_bool_exp!]
  _not: categories_bool_exp
  _or: [categories_bool_exp!]
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  widgets: widgets_bool_exp
  widgets_aggregate: widgets_aggregate_bool_exp
}

"""
unique or primary key constraints on table "categories"
"""
enum categories_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  categories_name_key

  """
  unique or primary key constraint on columns "id"
  """
  categories_pkey
}

"""
input type for incrementing numeric columns in table "categories"
"""
input categories_inc_input {
  id: Int
}

"""
input type for inserting data into table "categories"
"""
input categories_insert_input {
  created_at: timestamp
  description: String
  id: Int
  name: String
  widgets: widgets_arr_rel_insert_input
}

"""aggregate max on columns"""
type categories_max_fields {
  created_at: timestamp
  description: String
  id: Int
  name: String
}

"""aggregate min on columns"""
type categories_min_fields {
  created_at: timestamp
  description: String
  id: Int
  name: String
}

"""
response of any mutation on the table "categories"
"""
type categories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [categories!]!
}

"""
input type for inserting object relation for remote table "categories"
"""
input categories_obj_rel_insert_input {
  data: categories_insert_input!

  """upsert condition"""
  on_conflict: categories_on_conflict
}

"""
on_conflict condition type for table "categories"
"""
input categories_on_conflict {
  constraint: categories_constraint!
  update_columns: [categories_update_column!]! = []
  where: categories_bool_exp
}

"""Ordering options when selecting data from "categories"."""
input categories_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  widgets_aggregate: widgets_aggregate_order_by
}

"""primary key columns input for table: categories"""
input categories_pk_columns_input {
  id: Int!
}

"""
select columns of table "categories"
"""
enum categories_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "categories"
"""
input categories_set_input {
  created_at: timestamp
  description: String
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type categories_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type categories_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type categories_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "categories"
"""
input categories_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: categories_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input categories_stream_cursor_value_input {
  created_at: timestamp
  description: String
  id: Int
  name: String
}

"""aggregate sum on columns"""
type categories_sum_fields {
  id: Int
}

"""
update columns of table "categories"
"""
enum categories_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name
}

input categories_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: categories_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: categories_set_input

  """filter the rows which have to be updated"""
  where: categories_bool_exp!
}

"""aggregate var_pop on columns"""
type categories_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type categories_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type categories_variance_fields {
  id: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "categories"
  """
  delete_categories(
    """filter the rows which have to be deleted"""
    where: categories_bool_exp!
  ): categories_mutation_response

  """
  delete single row from the table: "categories"
  """
  delete_categories_by_pk(id: Int!): categories

  """
  delete data from the table: "widgets"
  """
  delete_widgets(
    """filter the rows which have to be deleted"""
    where: widgets_bool_exp!
  ): widgets_mutation_response

  """
  delete single row from the table: "widgets"
  """
  delete_widgets_by_pk(id: Int!): widgets

  """
  insert data into the table: "categories"
  """
  insert_categories(
    """the rows to be inserted"""
    objects: [categories_insert_input!]!

    """upsert condition"""
    on_conflict: categories_on_conflict
  ): categories_mutation_response

  """
  insert a single row into the table: "categories"
  """
  insert_categories_one(
    """the row to be inserted"""
    object: categories_insert_input!

    """upsert condition"""
    on_conflict: categories_on_conflict
  ): categories

  """
  insert data into the table: "widgets"
  """
  insert_widgets(
    """the rows to be inserted"""
    objects: [widgets_insert_input!]!

    """upsert condition"""
    on_conflict: widgets_on_conflict
  ): widgets_mutation_response

  """
  insert a single row into the table: "widgets"
  """
  insert_widgets_one(
    """the row to be inserted"""
    object: widgets_insert_input!

    """upsert condition"""
    on_conflict: widgets_on_conflict
  ): widgets

  """
  update data of the table: "categories"
  """
  update_categories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: categories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: categories_set_input

    """filter the rows which have to be updated"""
    where: categories_bool_exp!
  ): categories_mutation_response

  """
  update single row of the table: "categories"
  """
  update_categories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: categories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: categories_set_input
    pk_columns: categories_pk_columns_input!
  ): categories

  """
  update multiples rows of table: "categories"
  """
  update_categories_many(
    """updates to execute, in order"""
    updates: [categories_updates!]!
  ): [categories_mutation_response]

  """
  update data of the table: "widgets"
  """
  update_widgets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: widgets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: widgets_set_input

    """filter the rows which have to be updated"""
    where: widgets_bool_exp!
  ): widgets_mutation_response

  """
  update single row of the table: "widgets"
  """
  update_widgets_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: widgets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: widgets_set_input
    pk_columns: widgets_pk_columns_input!
  ): widgets

  """
  update multiples rows of table: "widgets"
  """
  update_widgets_many(
    """updates to execute, in order"""
    updates: [widgets_updates!]!
  ): [widgets_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(id: Int!): categories

  """An array relationship"""
  widgets(
    """distinct select on columns"""
    distinct_on: [widgets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [widgets_order_by!]

    """filter the rows returned"""
    where: widgets_bool_exp
  ): [widgets!]!

  """An aggregate relationship"""
  widgets_aggregate(
    """distinct select on columns"""
    distinct_on: [widgets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [widgets_order_by!]

    """filter the rows returned"""
    where: widgets_bool_exp
  ): widgets_aggregate!

  """fetch data from the table: "widgets" using primary key columns"""
  widgets_by_pk(id: Int!): widgets
}

type subscription_root {
  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(id: Int!): categories

  """
  fetch data from the table in a streaming manner: "categories"
  """
  categories_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [categories_stream_cursor_input]!

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """An array relationship"""
  widgets(
    """distinct select on columns"""
    distinct_on: [widgets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [widgets_order_by!]

    """filter the rows returned"""
    where: widgets_bool_exp
  ): [widgets!]!

  """An aggregate relationship"""
  widgets_aggregate(
    """distinct select on columns"""
    distinct_on: [widgets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [widgets_order_by!]

    """filter the rows returned"""
    where: widgets_bool_exp
  ): widgets_aggregate!

  """fetch data from the table: "widgets" using primary key columns"""
  widgets_by_pk(id: Int!): widgets

  """
  fetch data from the table in a streaming manner: "widgets"
  """
  widgets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [widgets_stream_cursor_input]!

    """filter the rows returned"""
    where: widgets_bool_exp
  ): [widgets!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "widgets"
"""
type widgets {
  """An object relationship"""
  category: categories
  category_id: Int
  created_at: timestamp

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  description: String
  id: Int!
  in_stock: Boolean
  name: String!
  price: numeric!

  """
  A computed field, executes function "get_price_category"
  """
  price_category: String
  updated_at: timestamp

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
aggregated selection of "widgets"
"""
type widgets_aggregate {
  aggregate: widgets_aggregate_fields
  nodes: [widgets!]!
}

input widgets_aggregate_bool_exp {
  bool_and: widgets_aggregate_bool_exp_bool_and
  bool_or: widgets_aggregate_bool_exp_bool_or
  count: widgets_aggregate_bool_exp_count
}

input widgets_aggregate_bool_exp_bool_and {
  arguments: widgets_select_column_widgets_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: widgets_bool_exp
  predicate: Boolean_comparison_exp!
}

input widgets_aggregate_bool_exp_bool_or {
  arguments: widgets_select_column_widgets_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: widgets_bool_exp
  predicate: Boolean_comparison_exp!
}

input widgets_aggregate_bool_exp_count {
  arguments: [widgets_select_column!]
  distinct: Boolean
  filter: widgets_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "widgets"
"""
type widgets_aggregate_fields {
  avg: widgets_avg_fields
  count(columns: [widgets_select_column!], distinct: Boolean): Int!
  max: widgets_max_fields
  min: widgets_min_fields
  stddev: widgets_stddev_fields
  stddev_pop: widgets_stddev_pop_fields
  stddev_samp: widgets_stddev_samp_fields
  sum: widgets_sum_fields
  var_pop: widgets_var_pop_fields
  var_samp: widgets_var_samp_fields
  variance: widgets_variance_fields
}

"""
order by aggregate values of table "widgets"
"""
input widgets_aggregate_order_by {
  avg: widgets_avg_order_by
  count: order_by
  max: widgets_max_order_by
  min: widgets_min_order_by
  stddev: widgets_stddev_order_by
  stddev_pop: widgets_stddev_pop_order_by
  stddev_samp: widgets_stddev_samp_order_by
  sum: widgets_sum_order_by
  var_pop: widgets_var_pop_order_by
  var_samp: widgets_var_samp_order_by
  variance: widgets_variance_order_by
}

"""
input type for inserting array relation for remote table "widgets"
"""
input widgets_arr_rel_insert_input {
  data: [widgets_insert_input!]!

  """upsert condition"""
  on_conflict: widgets_on_conflict
}

"""aggregate avg on columns"""
type widgets_avg_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by avg() on columns of table "widgets"
"""
input widgets_avg_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "widgets". All fields are combined with a logical 'AND'.
"""
input widgets_bool_exp {
  _and: [widgets_bool_exp!]
  _not: widgets_bool_exp
  _or: [widgets_bool_exp!]
  category: categories_bool_exp
  category_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  days_old: Int_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  in_stock: Boolean_comparison_exp
  name: String_comparison_exp
  price: numeric_comparison_exp
  price_category: String_comparison_exp
  updated_at: timestamp_comparison_exp
  value_score: numeric_comparison_exp
}

"""
unique or primary key constraints on table "widgets"
"""
enum widgets_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  widgets_pkey
}

"""
input type for incrementing numeric columns in table "widgets"
"""
input widgets_inc_input {
  category_id: Int
  id: Int
  price: numeric
}

"""
input type for inserting data into table "widgets"
"""
input widgets_insert_input {
  category: categories_obj_rel_insert_input
  category_id: Int
  created_at: timestamp
  description: String
  id: Int
  in_stock: Boolean
  name: String
  price: numeric
  updated_at: timestamp
}

"""aggregate max on columns"""
type widgets_max_fields {
  category_id: Int
  created_at: timestamp

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  description: String
  id: Int
  name: String
  price: numeric

  """
  A computed field, executes function "get_price_category"
  """
  price_category: String
  updated_at: timestamp

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by max() on columns of table "widgets"
"""
input widgets_max_order_by {
  category_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  price: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type widgets_min_fields {
  category_id: Int
  created_at: timestamp

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  description: String
  id: Int
  name: String
  price: numeric

  """
  A computed field, executes function "get_price_category"
  """
  price_category: String
  updated_at: timestamp

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by min() on columns of table "widgets"
"""
input widgets_min_order_by {
  category_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  price: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "widgets"
"""
type widgets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [widgets!]!
}

"""
on_conflict condition type for table "widgets"
"""
input widgets_on_conflict {
  constraint: widgets_constraint!
  update_columns: [widgets_update_column!]! = []
  where: widgets_bool_exp
}

"""Ordering options when selecting data from "widgets"."""
input widgets_order_by {
  category: categories_order_by
  category_id: order_by
  created_at: order_by
  days_old: order_by
  description: order_by
  id: order_by
  in_stock: order_by
  name: order_by
  price: order_by
  price_category: order_by
  updated_at: order_by
  value_score: order_by
}

"""primary key columns input for table: widgets"""
input widgets_pk_columns_input {
  id: Int!
}

"""
select columns of table "widgets"
"""
enum widgets_select_column {
  """column name"""
  category_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  in_stock

  """column name"""
  name

  """column name"""
  price

  """column name"""
  updated_at
}

"""
select "widgets_aggregate_bool_exp_bool_and_arguments_columns" columns of table "widgets"
"""
enum widgets_select_column_widgets_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  in_stock
}

"""
select "widgets_aggregate_bool_exp_bool_or_arguments_columns" columns of table "widgets"
"""
enum widgets_select_column_widgets_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  in_stock
}

"""
input type for updating data in table "widgets"
"""
input widgets_set_input {
  category_id: Int
  created_at: timestamp
  description: String
  id: Int
  in_stock: Boolean
  name: String
  price: numeric
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type widgets_stddev_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by stddev() on columns of table "widgets"
"""
input widgets_stddev_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""aggregate stddev_pop on columns"""
type widgets_stddev_pop_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by stddev_pop() on columns of table "widgets"
"""
input widgets_stddev_pop_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""aggregate stddev_samp on columns"""
type widgets_stddev_samp_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by stddev_samp() on columns of table "widgets"
"""
input widgets_stddev_samp_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""
Streaming cursor of the table "widgets"
"""
input widgets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: widgets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input widgets_stream_cursor_value_input {
  category_id: Int
  created_at: timestamp
  description: String
  id: Int
  in_stock: Boolean
  name: String
  price: numeric
  updated_at: timestamp
}

"""aggregate sum on columns"""
type widgets_sum_fields {
  category_id: Int

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Int
  price: numeric

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by sum() on columns of table "widgets"
"""
input widgets_sum_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""
update columns of table "widgets"
"""
enum widgets_update_column {
  """column name"""
  category_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  in_stock

  """column name"""
  name

  """column name"""
  price

  """column name"""
  updated_at
}

input widgets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: widgets_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: widgets_set_input

  """filter the rows which have to be updated"""
  where: widgets_bool_exp!
}

"""aggregate var_pop on columns"""
type widgets_var_pop_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by var_pop() on columns of table "widgets"
"""
input widgets_var_pop_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""aggregate var_samp on columns"""
type widgets_var_samp_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by var_samp() on columns of table "widgets"
"""
input widgets_var_samp_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

"""aggregate variance on columns"""
type widgets_variance_fields {
  category_id: Float

  """
  A computed field, executes function "get_days_old"
  """
  days_old: Int
  id: Float
  price: Float

  """
  A computed field, executes function "get_value_score"
  """
  value_score: numeric
}

"""
order by variance() on columns of table "widgets"
"""
input widgets_variance_order_by {
  category_id: order_by
  id: order_by
  price: order_by
}

